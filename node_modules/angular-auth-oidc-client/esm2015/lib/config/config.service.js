import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import { DEFAULT_CONFIG } from './default-config';
import * as i0 from "@angular/core";
import * as i1 from "../logging/logger.service";
import * as i2 from "../public-events/public-events.service";
import * as i3 from "./provider/config.provider";
import * as i4 from "./auth-well-known/auth-well-known.service";
import * as i5 from "../storage/storage-persistence.service";
import * as i6 from "./validation/config-validation.service";
import * as i7 from "../utils/platform-provider/platform.provider";
import * as i8 from "./../storage/default-sessionstorage.service";
export class OidcConfigService {
    constructor(loggerService, publicEventsService, configurationProvider, authWellKnownService, storagePersistenceService, configValidationService, platformProvider, defaultSessionStorageService) {
        this.loggerService = loggerService;
        this.publicEventsService = publicEventsService;
        this.configurationProvider = configurationProvider;
        this.authWellKnownService = authWellKnownService;
        this.storagePersistenceService = storagePersistenceService;
        this.configValidationService = configValidationService;
        this.platformProvider = platformProvider;
        this.defaultSessionStorageService = defaultSessionStorageService;
    }
    withConfigs(passedConfigs) {
        if (!this.configValidationService.validateConfigs(passedConfigs)) {
            return Promise.resolve(null);
        }
        this.createUniqueIds(passedConfigs);
        const allHandleConfigPromises = passedConfigs.map((x) => this.handleConfig(x));
        return Promise.all(allHandleConfigPromises);
    }
    createUniqueIds(passedConfigs) {
        passedConfigs.forEach((config, index) => {
            if (!config.configId) {
                config.configId = `${index}-${config.clientId}`;
            }
        });
    }
    handleConfig(passedConfig) {
        return new Promise((resolve, reject) => {
            if (!this.configValidationService.validateConfig(passedConfig)) {
                this.loggerService.logError(passedConfig.configId, 'Validation of config rejected with errors. Config is NOT set.');
                resolve(null);
                return;
            }
            if (!passedConfig.authWellknownEndpointUrl) {
                passedConfig.authWellknownEndpointUrl = passedConfig.authority;
            }
            const usedConfig = this.prepareConfig(passedConfig);
            this.configurationProvider.setConfig(usedConfig);
            const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', usedConfig.configId);
            if (!!alreadyExistingAuthWellKnownEndpoints) {
                usedConfig.authWellknownEndpoints = alreadyExistingAuthWellKnownEndpoints;
                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, usedConfig);
                resolve(usedConfig);
                return;
            }
            const passedAuthWellKnownEndpoints = usedConfig.authWellknownEndpoints;
            if (!!passedAuthWellKnownEndpoints) {
                this.authWellKnownService.storeWellKnownEndpoints(usedConfig.configId, passedAuthWellKnownEndpoints);
                usedConfig.authWellknownEndpoints = passedAuthWellKnownEndpoints;
                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, usedConfig);
                resolve(usedConfig);
                return;
            }
            if (usedConfig.eagerLoadAuthWellKnownEndpoints) {
                this.authWellKnownService
                    .getAuthWellKnownEndPoints(usedConfig.authWellknownEndpointUrl, usedConfig.configId)
                    .pipe(catchError((error) => {
                    this.loggerService.logError(usedConfig.configId, 'Getting auth well known endpoints failed on start', error);
                    return throwError(error);
                }), tap((wellknownEndPoints) => {
                    usedConfig.authWellknownEndpoints = wellknownEndPoints;
                    this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, usedConfig);
                }))
                    .subscribe(() => resolve(usedConfig), () => reject());
            }
            else {
                this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, usedConfig);
                resolve(usedConfig);
            }
        });
    }
    prepareConfig(configuration) {
        const openIdConfigurationInternal = Object.assign(Object.assign({}, DEFAULT_CONFIG), configuration);
        this.setSpecialCases(openIdConfigurationInternal);
        this.setStorage(openIdConfigurationInternal);
        return openIdConfigurationInternal;
    }
    setSpecialCases(currentConfig) {
        if (!this.platformProvider.isBrowser) {
            currentConfig.startCheckSession = false;
            currentConfig.silentRenew = false;
            currentConfig.useRefreshToken = false;
            currentConfig.usePushedAuthorisationRequests = false;
        }
    }
    setStorage(currentConfig) {
        if (currentConfig.storage) {
            return;
        }
        if (this.hasBrowserStorage()) {
            currentConfig.storage = this.defaultSessionStorageService;
        }
        else {
            currentConfig.storage = null;
        }
    }
    hasBrowserStorage() {
        return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';
    }
}
OidcConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: OidcConfigService, deps: [{ token: i1.LoggerService }, { token: i2.PublicEventsService }, { token: i3.ConfigurationProvider }, { token: i4.AuthWellKnownService }, { token: i5.StoragePersistenceService }, { token: i6.ConfigValidationService }, { token: i7.PlatformProvider }, { token: i8.DefaultSessionStorageService }], target: i0.ɵɵFactoryTarget.Injectable });
OidcConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: OidcConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: OidcConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.PublicEventsService }, { type: i3.ConfigurationProvider }, { type: i4.AuthWellKnownService }, { type: i5.StoragePersistenceService }, { type: i6.ConfigValidationService }, { type: i7.PlatformProvider }, { type: i8.DefaultSessionStorageService }]; } });
//# sourceMappingURL=data:application/json;base64,