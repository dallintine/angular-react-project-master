import { Injectable } from '@angular/core';
import { allRules } from './rules';
import { allMultipleConfigRules } from './rules/index';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
export class ConfigValidationService {
    constructor(loggerService) {
        this.loggerService = loggerService;
    }
    validateConfigs(passedConfigs) {
        return this.validateConfigsInternal(passedConfigs, allMultipleConfigRules);
    }
    validateConfig(passedConfig) {
        return this.validateConfigInternal(passedConfig, allRules);
    }
    validateConfigsInternal(passedConfigs, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));
        let overallErrorCount = 0;
        passedConfigs.forEach((passedConfig) => {
            const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig === null || passedConfig === void 0 ? void 0 : passedConfig.configId);
            overallErrorCount += errorCount;
        });
        return overallErrorCount === 0;
    }
    validateConfigInternal(passedConfig, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));
        const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig.configId);
        return errorCount === 0;
    }
    processValidationResultsAndGetErrorCount(allValidationResults, configId) {
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.forEach((message) => this.loggerService.logError(configId, message));
        allWarnings.forEach((message) => this.loggerService.logWarning(configId, message));
        return allErrorMessages.length;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
}
ConfigValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: ConfigValidationService, deps: [{ token: i1.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
ConfigValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: ConfigValidationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: ConfigValidationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NvbmZpZy92YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBR3ZELE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRXBELGVBQWUsQ0FBQyxhQUFvQztRQUNsRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQWlDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU8sdUJBQXVCLENBQUMsYUFBb0MsRUFBRSxhQUFvQjtRQUN4RixNQUFNLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRTlFLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsd0NBQXdDLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxhQUFaLFlBQVksdUJBQVosWUFBWSxDQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQy9HLGlCQUFpQixJQUFJLFVBQVUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8saUJBQWlCLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxZQUFpQyxFQUFFLGFBQW9CO1FBQ3BGLE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFFN0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5RyxPQUFPLFVBQVUsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVPLHdDQUF3QyxDQUFDLG9CQUE0QyxFQUFFLFFBQWdCO1FBQzdHLE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFOUUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDdEUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0RixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVuRixPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBRU8sb0JBQW9CLENBQUMsSUFBVyxFQUFFLE9BQStCO1FBQ3ZFLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFN0YsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOztvSEE5Q1UsdUJBQXVCO3dIQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9vcGVuaWQtY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBMZXZlbCwgUnVsZVZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuL3J1bGUnO1xuaW1wb3J0IHsgYWxsUnVsZXMgfSBmcm9tICcuL3J1bGVzJztcbmltcG9ydCB7IGFsbE11bHRpcGxlQ29uZmlnUnVsZXMgfSBmcm9tICcuL3J1bGVzL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbmZpZ1ZhbGlkYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2dnZXJTZXJ2aWNlOiBMb2dnZXJTZXJ2aWNlKSB7fVxuXG4gIHZhbGlkYXRlQ29uZmlncyhwYXNzZWRDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUNvbmZpZ3NJbnRlcm5hbChwYXNzZWRDb25maWdzLCBhbGxNdWx0aXBsZUNvbmZpZ1J1bGVzKTtcbiAgfVxuXG4gIHZhbGlkYXRlQ29uZmlnKHBhc3NlZENvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQ29uZmlnSW50ZXJuYWwocGFzc2VkQ29uZmlnLCBhbGxSdWxlcyk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlQ29uZmlnc0ludGVybmFsKHBhc3NlZENvbmZpZ3M6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSwgYWxsUnVsZXNUb1VzZTogYW55W10pOiBib29sZWFuIHtcbiAgICBjb25zdCBhbGxWYWxpZGF0aW9uUmVzdWx0cyA9IGFsbFJ1bGVzVG9Vc2UubWFwKChydWxlKSA9PiBydWxlKHBhc3NlZENvbmZpZ3MpKTtcblxuICAgIGxldCBvdmVyYWxsRXJyb3JDb3VudCA9IDA7XG4gICAgcGFzc2VkQ29uZmlncy5mb3JFYWNoKChwYXNzZWRDb25maWcpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yQ291bnQgPSB0aGlzLnByb2Nlc3NWYWxpZGF0aW9uUmVzdWx0c0FuZEdldEVycm9yQ291bnQoYWxsVmFsaWRhdGlvblJlc3VsdHMsIHBhc3NlZENvbmZpZz8uY29uZmlnSWQpO1xuICAgICAgb3ZlcmFsbEVycm9yQ291bnQgKz0gZXJyb3JDb3VudDtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdmVyYWxsRXJyb3JDb3VudCA9PT0gMDtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVDb25maWdJbnRlcm5hbChwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24sIGFsbFJ1bGVzVG9Vc2U6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYWxsVmFsaWRhdGlvblJlc3VsdHMgPSBhbGxSdWxlc1RvVXNlLm1hcCgocnVsZSkgPT4gcnVsZShwYXNzZWRDb25maWcpKTtcblxuICAgIGNvbnN0IGVycm9yQ291bnQgPSB0aGlzLnByb2Nlc3NWYWxpZGF0aW9uUmVzdWx0c0FuZEdldEVycm9yQ291bnQoYWxsVmFsaWRhdGlvblJlc3VsdHMsIHBhc3NlZENvbmZpZy5jb25maWdJZCk7XG5cbiAgICByZXR1cm4gZXJyb3JDb3VudCA9PT0gMDtcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChhbGxWYWxpZGF0aW9uUmVzdWx0czogUnVsZVZhbGlkYXRpb25SZXN1bHRbXSwgY29uZmlnSWQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSBhbGxWYWxpZGF0aW9uUmVzdWx0cy5maWx0ZXIoKHgpID0+IHgubWVzc2FnZXMubGVuZ3RoID4gMCk7XG5cbiAgICBjb25zdCBhbGxFcnJvck1lc3NhZ2VzID0gdGhpcy5nZXRBbGxNZXNzYWdlc09mVHlwZSgnZXJyb3InLCBhbGxNZXNzYWdlcyk7XG4gICAgY29uc3QgYWxsV2FybmluZ3MgPSB0aGlzLmdldEFsbE1lc3NhZ2VzT2ZUeXBlKCd3YXJuaW5nJywgYWxsTWVzc2FnZXMpO1xuICAgIGFsbEVycm9yTWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT4gdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0Vycm9yKGNvbmZpZ0lkLCBtZXNzYWdlKSk7XG4gICAgYWxsV2FybmluZ3MuZm9yRWFjaCgobWVzc2FnZSkgPT4gdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ1dhcm5pbmcoY29uZmlnSWQsIG1lc3NhZ2UpKTtcblxuICAgIHJldHVybiBhbGxFcnJvck1lc3NhZ2VzLmxlbmd0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsTWVzc2FnZXNPZlR5cGUodHlwZTogTGV2ZWwsIHJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYWxsTWVzc2FnZXMgPSByZXN1bHRzLmZpbHRlcigoeCkgPT4geC5sZXZlbCA9PT0gdHlwZSkubWFwKChyZXN1bHQpID0+IHJlc3VsdC5tZXNzYWdlcyk7XG5cbiAgICByZXR1cm4gYWxsTWVzc2FnZXMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSk7XG4gIH1cbn1cbiJdfQ==