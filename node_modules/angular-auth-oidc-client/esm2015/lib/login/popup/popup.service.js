import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PopUpService {
    constructor() {
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.resultInternal$ = new Subject();
    }
    get result$() {
        return this.resultInternal$.asObservable();
    }
    isCurrentlyInPopup() {
        if (this.canAccessSessionStorage()) {
            const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);
            return !!window.opener && window.opener !== window && !!popup;
        }
        return false;
    }
    openPopUp(url, popupOptions) {
        const optionsToPass = this.getOptions(popupOptions);
        this.popUp = window.open(url, '_blank', optionsToPass);
        this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');
        const listener = (event) => {
            if (!(event === null || event === void 0 ? void 0 : event.data) || typeof event.data !== 'string') {
                return;
            }
            this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });
            this.cleanUp(listener);
        };
        window.addEventListener('message', listener, false);
        this.handle = window.setInterval(() => {
            if (this.popUp.closed) {
                this.resultInternal$.next({ userClosed: true });
                this.cleanUp(listener);
            }
        }, 200);
    }
    sendMessageToMainWindow(url) {
        if (window.opener) {
            this.sendMessage(url, window.location.href);
        }
    }
    cleanUp(listener) {
        var _a;
        window.removeEventListener('message', listener, false);
        window.clearInterval(this.handle);
        if (this.popUp) {
            (_a = this.popUp.sessionStorage) === null || _a === void 0 ? void 0 : _a.removeItem(this.STORAGE_IDENTIFIER);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href) {
        window.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };
        const options = Object.assign(Object.assign({}, popupDefaultOptions), (popupOptions || {}));
        const left = window.screenLeft + (window.outerWidth - options.width) / 2;
        const top = window.screenTop + (window.outerHeight - options.height) / 2;
        options.left = left;
        options.top = top;
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
    canAccessSessionStorage() {
        return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';
    }
}
PopUpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PopUpService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PopUpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PopUpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PopUpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2xvZ2luL3BvcHVwL3BvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUszQyxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVVLHVCQUFrQixHQUFHLFdBQVcsQ0FBQztRQUdqQyxvQkFBZSxHQUFHLElBQUksT0FBTyxFQUFlLENBQUM7S0FpRnREO0lBL0VDLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFLEVBQUU7WUFDbEMsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUU5RCxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDL0Q7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVyxFQUFFLFlBQTJCO1FBQ2hELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FB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LEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7YUFDaEYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUVPLHVCQUF1QjtRQUM3QixPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUMsYUFBYSxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsQ0FBQztJQUN2RyxDQUFDOzt5R0FwRlUsWUFBWTs2R0FBWixZQUFZLGNBREMsTUFBTTsyRkFDbkIsWUFBWTtrQkFEeEIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQb3B1cE9wdGlvbnMgfSBmcm9tICcuL3BvcHVwLW9wdGlvbnMnO1xuaW1wb3J0IHsgUG9wdXBSZXN1bHQgfSBmcm9tICcuL3BvcHVwLXJlc3VsdCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUG9wVXBTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBTVE9SQUdFX0lERU5USUZJRVIgPSAncG9wdXBhdXRoJztcbiAgcHJpdmF0ZSBwb3BVcDogV2luZG93O1xuICBwcml2YXRlIGhhbmRsZTogbnVtYmVyO1xuICBwcml2YXRlIHJlc3VsdEludGVybmFsJCA9IG5ldyBTdWJqZWN0PFBvcHVwUmVzdWx0PigpO1xuXG4gIGdldCByZXN1bHQkKCk6IE9ic2VydmFibGU8UG9wdXBSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHRJbnRlcm5hbCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBpc0N1cnJlbnRseUluUG9wdXAoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuY2FuQWNjZXNzU2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgICAgY29uc3QgcG9wdXAgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHRoaXMuU1RPUkFHRV9JREVOVElGSUVSKTtcblxuICAgICAgcmV0dXJuICEhd2luZG93Lm9wZW5lciAmJiB3aW5kb3cub3BlbmVyICE9PSB3aW5kb3cgJiYgISFwb3B1cDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBvcGVuUG9wVXAodXJsOiBzdHJpbmcsIHBvcHVwT3B0aW9ucz86IFBvcHVwT3B0aW9ucyk6IHZvaWQge1xuICAgIGNvbnN0IG9wdGlvbnNUb1Bhc3MgPSB0aGlzLmdldE9wdGlvbnMocG9wdXBPcHRpb25zKTtcbiAgICB0aGlzLnBvcFVwID0gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJywgb3B0aW9uc1RvUGFzcyk7XG4gICAgdGhpcy5wb3BVcC5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHRoaXMuU1RPUkFHRV9JREVOVElGSUVSLCAndHJ1ZScpO1xuXG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZXZlbnQ6IE1lc3NhZ2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFldmVudD8uZGF0YSB8fCB0eXBlb2YgZXZlbnQuZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlc3VsdEludGVybmFsJC5uZXh0KHsgdXNlckNsb3NlZDogZmFsc2UsIHJlY2VpdmVkVXJsOiBldmVudC5kYXRhIH0pO1xuXG4gICAgICB0aGlzLmNsZWFuVXAobGlzdGVuZXIpO1xuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG5cbiAgICB0aGlzLmhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wb3BVcC5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRJbnRlcm5hbCQubmV4dCh7IHVzZXJDbG9zZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgdGhpcy5jbGVhblVwKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9LCAyMDApO1xuICB9XG5cbiAgc2VuZE1lc3NhZ2VUb01haW5XaW5kb3codXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAod2luZG93Lm9wZW5lcikge1xuICAgICAgdGhpcy5zZW5kTWVzc2FnZSh1cmwsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNsZWFuVXAobGlzdGVuZXI6IGFueSk6IHZvaWQge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcblxuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaGFuZGxlKTtcblxuICAgIGlmICh0aGlzLnBvcFVwKSB7XG4gICAgICB0aGlzLnBvcFVwLnNlc3Npb25TdG9yYWdlPy5yZW1vdmVJdGVtKHRoaXMuU1RPUkFHRV9JREVOVElGSUVSKTtcbiAgICAgIHRoaXMucG9wVXAuY2xvc2UoKTtcbiAgICAgIHRoaXMucG9wVXAgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2VuZE1lc3NhZ2UodXJsOiBzdHJpbmcsIGhyZWY6IHN0cmluZyk6IHZvaWQge1xuICAgIHdpbmRvdy5vcGVuZXIucG9zdE1lc3NhZ2UodXJsLCBocmVmKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3B0aW9ucyhwb3B1cE9wdGlvbnM/OiBQb3B1cE9wdGlvbnMpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBvcHVwRGVmYXVsdE9wdGlvbnM6IFBvcHVwT3B0aW9ucyA9IHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiA1MDAsIGxlZnQ6IDUwLCB0b3A6IDUwIH07XG5cbiAgICBjb25zdCBvcHRpb25zOiBQb3B1cE9wdGlvbnMgPSB7IC4uLnBvcHVwRGVmYXVsdE9wdGlvbnMsIC4uLihwb3B1cE9wdGlvbnMgfHwge30pIH07XG4gICAgY29uc3QgbGVmdDogbnVtYmVyID0gd2luZG93LnNjcmVlbkxlZnQgKyAod2luZG93Lm91dGVyV2lkdGggLSBvcHRpb25zLndpZHRoKSAvIDI7XG4gICAgY29uc3QgdG9wOiBudW1iZXIgPSB3aW5kb3cuc2NyZWVuVG9wICsgKHdpbmRvdy5vdXRlckhlaWdodCAtIG9wdGlvbnMuaGVpZ2h0KSAvIDI7XG4gICAgb3B0aW9ucy5sZWZ0ID0gbGVmdDtcbiAgICBvcHRpb25zLnRvcCA9IHRvcDtcblxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhvcHRpb25zKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5BY2Nlc3NTZXNzaW9uU3RvcmFnZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQgJiYgdHlwZW9mIFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnO1xuICB9XG59XG4iXX0=