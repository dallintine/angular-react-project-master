import { Injectable } from '@angular/core';
import { LogLevel } from './log-level';
import * as i0 from "@angular/core";
import * as i1 from "../config/provider/config.provider";
export class LoggerService {
    constructor(configurationProvider) {
        this.configurationProvider = configurationProvider;
    }
    logError(configId, message, ...args) {
        if (!!configId) {
            this.logErrorWithConfig(configId, message, ...args);
        }
        else {
            this.logErrorWithoutConfig(message, ...args);
        }
    }
    logWarning(configId, message, ...args) {
        if (!!configId) {
            this.logWarningWithConfig(configId, message, ...args);
        }
        else {
            this.logWarningWithoutConfig(message, ...args);
        }
    }
    logDebug(configId, message, ...args) {
        if (!this.logLevelIsSet(configId)) {
            return;
        }
        if (this.loggingIsTurnedOff(configId)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configId, LogLevel.Debug)) {
            return;
        }
        if (!!args && !!args.length) {
            console.log(`[DEBUG] ${configId} - ${message}`, ...args);
        }
        else {
            console.log(`[DEBUG] ${configId} - ${message}`);
        }
    }
    logWarningWithoutConfig(message, ...args) {
        if (!!args && !!args.length) {
            console.warn(`[WARN] - ${message}`, ...args);
        }
        else {
            console.warn(`[WARN] - ${message}`);
        }
    }
    logWarningWithConfig(configId, message, ...args) {
        if (!this.logLevelIsSet(configId)) {
            return;
        }
        if (this.loggingIsTurnedOff(configId)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configId, LogLevel.Warn)) {
            return;
        }
        if (!!args && !!args.length) {
            console.warn(`[WARN] ${configId} - ${message}`, ...args);
        }
        else {
            console.warn(`[WARN] ${configId} - ${message}`);
        }
    }
    logErrorWithConfig(configId, message, ...args) {
        if (this.loggingIsTurnedOff(configId)) {
            return;
        }
        if (!!args && !!args.length) {
            console.error(`[ERROR] ${configId} - ${message}`, ...args);
        }
        else {
            console.error(`[ERROR] ${configId} - ${message}`);
        }
    }
    logErrorWithoutConfig(message, ...args) {
        if (!!args && !!args.length) {
            console.error(`[ERROR] - ${message}`, ...args);
        }
        else {
            console.error(`[ERROR] - ${message}`);
        }
    }
    currentLogLevelIsEqualOrSmallerThan(configId, logLevelToCompare) {
        const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};
        return logLevel <= logLevelToCompare;
    }
    logLevelIsSet(configId) {
        const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};
        if (logLevel === null) {
            return false;
        }
        if (logLevel === undefined) {
            return false;
        }
        return true;
    }
    loggingIsTurnedOff(configId) {
        const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};
        return logLevel === LogLevel.None;
    }
}
LoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: LoggerService, deps: [{ token: i1.ConfigurationProvider }], target: i0.ɵɵFactoryTarget.Injectable });
LoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: LoggerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: LoggerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConfigurationProvider }]; } });
//# sourceMappingURL=data:application/json;base64,