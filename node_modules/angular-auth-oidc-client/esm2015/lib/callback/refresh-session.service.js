import { Injectable } from '@angular/core';
import { forkJoin, of, throwError, TimeoutError, timer } from 'rxjs';
import { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../utils/flowHelper/flow-helper.service";
import * as i2 from "../config/provider/config.provider";
import * as i3 from "../flows/flows-data.service";
import * as i4 from "../logging/logger.service";
import * as i5 from "../iframe/silent-renew.service";
import * as i6 from "../auth-state/auth-state.service";
import * as i7 from "../config/auth-well-known/auth-well-known.service";
import * as i8 from "../iframe/refresh-session-iframe.service";
import * as i9 from "../storage/storage-persistence.service";
import * as i10 from "./refresh-session-refresh-token.service";
import * as i11 from "../user-data/user.service";
export const MAX_RETRY_ATTEMPTS = 3;
export class RefreshSessionService {
    constructor(flowHelper, configurationProvider, flowsDataService, loggerService, silentRenewService, authStateService, authWellKnownService, refreshSessionIframeService, storagePersistenceService, refreshSessionRefreshTokenService, userService) {
        this.flowHelper = flowHelper;
        this.configurationProvider = configurationProvider;
        this.flowsDataService = flowsDataService;
        this.loggerService = loggerService;
        this.silentRenewService = silentRenewService;
        this.authStateService = authStateService;
        this.authWellKnownService = authWellKnownService;
        this.refreshSessionIframeService = refreshSessionIframeService;
        this.storagePersistenceService = storagePersistenceService;
        this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;
        this.userService = userService;
    }
    userForceRefreshSession(configId, extraCustomParams) {
        this.persistCustomParams(extraCustomParams, configId);
        return this.forceRefreshSession(configId, extraCustomParams);
    }
    forceRefreshSession(configId, extraCustomParams) {
        const { customParamsRefreshTokenRequest } = this.configurationProvider.getOpenIDConfiguration();
        const mergedParams = Object.assign(Object.assign({}, customParamsRefreshTokenRequest), extraCustomParams);
        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {
            return this.startRefreshSession(configId, mergedParams).pipe(map(() => {
                const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);
                if (isAuthenticated) {
                    return {
                        idToken: this.authStateService.getIdToken(configId),
                        accessToken: this.authStateService.getAccessToken(configId),
                        userData: this.userService.getUserDataFromStore(configId),
                        isAuthenticated,
                        configId,
                    };
                }
                return null;
            }));
        }
        const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);
        const timeOutTime = silentRenewTimeoutInSeconds * 1000;
        return forkJoin([
            this.startRefreshSession(configId, extraCustomParams),
            this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),
        ]).pipe(timeout(timeOutTime), retryWhen(this.timeoutRetryStrategy.bind(this)), map(([_, callbackContext]) => {
            var _a, _b;
            const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);
            if (isAuthenticated) {
                return {
                    idToken: (_a = callbackContext === null || callbackContext === void 0 ? void 0 : callbackContext.authResult) === null || _a === void 0 ? void 0 : _a.id_token,
                    accessToken: (_b = callbackContext === null || callbackContext === void 0 ? void 0 : callbackContext.authResult) === null || _b === void 0 ? void 0 : _b.access_token,
                    userData: this.userService.getUserDataFromStore(configId),
                    isAuthenticated,
                    configId,
                };
            }
            return null;
        }));
    }
    persistCustomParams(extraCustomParams, configId) {
        const { useRefreshToken } = this.configurationProvider.getOpenIDConfiguration();
        if (extraCustomParams) {
            if (useRefreshToken) {
                this.storagePersistenceService.write('storageCustomParamsRefresh', extraCustomParams, configId);
            }
            else {
                this.storagePersistenceService.write('storageCustomParamsAuthRequest', extraCustomParams, configId);
            }
        }
    }
    startRefreshSession(configId, extraCustomParams) {
        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(configId);
        this.loggerService.logDebug(configId, `Checking: silentRenewRunning: ${isSilentRenewRunning}`);
        const shouldBeExecuted = !isSilentRenewRunning;
        if (!shouldBeExecuted) {
            return of(null);
        }
        const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId) || {};
        if (!authWellknownEndpointUrl) {
            this.loggerService.logError(configId, 'no authWellKnownEndpoint given!');
            return of(null);
        }
        return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId).pipe(switchMap(() => {
            this.flowsDataService.setSilentRenewRunning(configId);
            if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {
                // Refresh Session using Refresh tokens
                return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(configId, extraCustomParams);
            }
            return this.refreshSessionIframeService.refreshSessionWithIframe(configId, extraCustomParams);
        }));
    }
    timeoutRetryStrategy(errorAttempts, configId) {
        return errorAttempts.pipe(mergeMap((error, index) => {
            const scalingDuration = 1000;
            const currentAttempt = index + 1;
            if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {
                return throwError(error);
            }
            this.loggerService.logDebug(configId, `forceRefreshSession timeout. Attempt #${currentAttempt}`);
            this.flowsDataService.resetSilentRenewRunning(configId);
            return timer(currentAttempt * scalingDuration);
        }));
    }
}
RefreshSessionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: RefreshSessionService, deps: [{ token: i1.FlowHelper }, { token: i2.ConfigurationProvider }, { token: i3.FlowsDataService }, { token: i4.LoggerService }, { token: i5.SilentRenewService }, { token: i6.AuthStateService }, { token: i7.AuthWellKnownService }, { token: i8.RefreshSessionIframeService }, { token: i9.StoragePersistenceService }, { token: i10.RefreshSessionRefreshTokenService }, { token: i11.UserService }], target: i0.ɵɵFactoryTarget.Injectable });
RefreshSessionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: RefreshSessionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: RefreshSessionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.FlowHelper }, { type: i2.ConfigurationProvider }, { type: i3.FlowsDataService }, { type: i4.LoggerService }, { type: i5.SilentRenewService }, { type: i6.AuthStateService }, { type: i7.AuthWellKnownService }, { type: i8.RefreshSessionIframeService }, { type: i9.StoragePersistenceService }, { type: i10.RefreshSessionRefreshTokenService }, { type: i11.UserService }]; } });
//# sourceMappingURL=data:application/json;base64,