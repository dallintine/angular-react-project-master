import { Injectable } from '@angular/core';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../flows/reset-auth-data.service";
import * as i2 from "../utils/flowHelper/flow-helper.service";
import * as i3 from "../config/provider/config.provider";
import * as i4 from "../flows/flows-data.service";
import * as i5 from "../logging/logger.service";
import * as i6 from "../user-data/user.service";
import * as i7 from "../auth-state/auth-state.service";
import * as i8 from "../iframe/refresh-session-iframe.service";
import * as i9 from "./refresh-session-refresh-token.service";
import * as i10 from "./interval.service";
import * as i11 from "../storage/storage-persistence.service";
import * as i12 from "../public-events/public-events.service";
export class PeriodicallyTokenCheckService {
    constructor(resetAuthDataService, flowHelper, configurationProvider, flowsDataService, loggerService, userService, authStateService, refreshSessionIframeService, refreshSessionRefreshTokenService, intervalService, storagePersistenceService, publicEventsService) {
        this.resetAuthDataService = resetAuthDataService;
        this.flowHelper = flowHelper;
        this.configurationProvider = configurationProvider;
        this.flowsDataService = flowsDataService;
        this.loggerService = loggerService;
        this.userService = userService;
        this.authStateService = authStateService;
        this.refreshSessionIframeService = refreshSessionIframeService;
        this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;
        this.intervalService = intervalService;
        this.storagePersistenceService = storagePersistenceService;
        this.publicEventsService = publicEventsService;
    }
    startTokenValidationPeriodically() {
        const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled();
        if (configsWithSilentRenewEnabled.length <= 0) {
            return;
        }
        const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);
        if (!!this.intervalService.runTokenValidationRunning) {
            return;
        }
        // START PERIODICALLY CHECK ONCE AND CHECK EACH CONFIG WHICH HAS IT ENABLED
        const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(refreshTimeInSeconds).pipe(switchMap(() => {
            const objectWithConfigIdsAndRefreshEvent = {};
            configsWithSilentRenewEnabled.forEach(({ configId }) => {
                objectWithConfigIdsAndRefreshEvent[configId] = this.getRefreshEvent(configId);
            });
            return forkJoin(objectWithConfigIdsAndRefreshEvent);
        }));
        this.intervalService.runTokenValidationRunning = periodicallyCheck$.subscribe((objectWithConfigIds) => {
            for (const [key, _] of Object.entries(objectWithConfigIds)) {
                this.loggerService.logDebug(key, 'silent renew, periodic check finished!');
                if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(key)) {
                    this.flowsDataService.resetSilentRenewRunning(key);
                }
            }
        });
    }
    getRefreshEvent(configId) {
        const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(configId);
        if (!shouldStartRefreshEvent) {
            return of(null);
        }
        const refreshEvent$ = this.createRefreshEventForConfig(configId);
        this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);
        const refreshEventWithErrorHandler$ = refreshEvent$.pipe(catchError((error) => {
            this.loggerService.logError(configId, 'silent renew failed!', error);
            this.flowsDataService.resetSilentRenewRunning(configId);
            return throwError(error);
        }));
        return refreshEventWithErrorHandler$;
    }
    getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled) {
        const result = configsWithSilentRenewEnabled.reduce((prev, curr) => prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr);
        return result.tokenRefreshInSeconds;
    }
    getConfigsWithSilentRenewEnabled() {
        return this.configurationProvider.getAllConfigurations().filter((x) => x.silentRenew);
    }
    createRefreshEventForConfig(configId) {
        this.loggerService.logDebug(configId, 'starting silent renew...');
        const config = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!(config === null || config === void 0 ? void 0 : config.silentRenew)) {
            this.resetAuthDataService.resetAuthorizationData(configId);
            return of(null);
        }
        this.flowsDataService.setSilentRenewRunning(configId);
        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {
            // Retrieve Dynamically Set Custom Params for refresh body
            const customParamsRefresh = this.storagePersistenceService.read('storageCustomParamsRefresh', configId) || {};
            const { customParamsRefreshTokenRequest } = this.configurationProvider.getOpenIDConfiguration(configId);
            const mergedParams = Object.assign(Object.assign({}, customParamsRefreshTokenRequest), customParamsRefresh);
            // Refresh Session using Refresh tokens
            return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(configId, mergedParams);
        }
        // Retrieve Dynamically Set Custom Params
        const customParams = this.storagePersistenceService.read('storageCustomParamsAuthRequest', configId);
        return this.refreshSessionIframeService.refreshSessionWithIframe(configId, customParams);
    }
    shouldStartPeriodicallyCheckForConfig(configId) {
        const idToken = this.authStateService.getIdToken(configId);
        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(configId);
        const userDataFromStore = this.userService.getUserDataFromStore(configId);
        this.loggerService.logDebug(configId, `Checking: silentRenewRunning: ${isSilentRenewRunning} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`);
        const shouldBeExecuted = !!userDataFromStore && !isSilentRenewRunning && !!idToken;
        if (!shouldBeExecuted) {
            return false;
        }
        const idTokenStillValid = this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(configId);
        const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(configId);
        if (!idTokenStillValid && !accessTokenHasExpired) {
            return false;
        }
        return true;
    }
}
PeriodicallyTokenCheckService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PeriodicallyTokenCheckService, deps: [{ token: i1.ResetAuthDataService }, { token: i2.FlowHelper }, { token: i3.ConfigurationProvider }, { token: i4.FlowsDataService }, { token: i5.LoggerService }, { token: i6.UserService }, { token: i7.AuthStateService }, { token: i8.RefreshSessionIframeService }, { token: i9.RefreshSessionRefreshTokenService }, { token: i10.IntervalService }, { token: i11.StoragePersistenceService }, { token: i12.PublicEventsService }], target: i0.ɵɵFactoryTarget.Injectable });
PeriodicallyTokenCheckService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PeriodicallyTokenCheckService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: PeriodicallyTokenCheckService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ResetAuthDataService }, { type: i2.FlowHelper }, { type: i3.ConfigurationProvider }, { type: i4.FlowsDataService }, { type: i5.LoggerService }, { type: i6.UserService }, { type: i7.AuthStateService }, { type: i8.RefreshSessionIframeService }, { type: i9.RefreshSessionRefreshTokenService }, { type: i10.IntervalService }, { type: i11.StoragePersistenceService }, { type: i12.PublicEventsService }]; } });
//# sourceMappingURL=data:application/json;base64,