import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage-persistence.service";
import * as i2 from "./random/random.service";
import * as i3 from "../config/provider/config.provider";
import * as i4 from "../logging/logger.service";
export class FlowsDataService {
    constructor(storagePersistenceService, randomService, configurationProvider, loggerService) {
        this.storagePersistenceService = storagePersistenceService;
        this.randomService = randomService;
        this.configurationProvider = configurationProvider;
        this.loggerService = loggerService;
    }
    createNonce(configId) {
        const nonce = this.randomService.createRandom(40, configId);
        this.loggerService.logDebug(configId, 'Nonce created. nonce:' + nonce);
        this.setNonce(nonce, configId);
        return nonce;
    }
    setNonce(nonce, configId) {
        this.storagePersistenceService.write('authNonce', nonce, configId);
    }
    getAuthStateControl(configId) {
        return this.storagePersistenceService.read('authStateControl', configId);
    }
    setAuthStateControl(authStateControl, configId) {
        this.storagePersistenceService.write('authStateControl', authStateControl, configId);
    }
    getExistingOrCreateAuthStateControl(configId) {
        let state = this.storagePersistenceService.read('authStateControl', configId);
        if (!state) {
            state = this.randomService.createRandom(40, configId);
            this.storagePersistenceService.write('authStateControl', state, configId);
        }
        return state;
    }
    setSessionState(sessionState, configId) {
        this.storagePersistenceService.write('session_state', sessionState, configId);
    }
    resetStorageFlowData(configId) {
        this.storagePersistenceService.resetStorageFlowData(configId);
    }
    getCodeVerifier(configId) {
        return this.storagePersistenceService.read('codeVerifier', configId);
    }
    createCodeVerifier(configId) {
        const codeVerifier = this.randomService.createRandom(67, configId);
        this.storagePersistenceService.write('codeVerifier', codeVerifier, configId);
        return codeVerifier;
    }
    isSilentRenewRunning(configId) {
        const storageObject = this.getSilentRenewRunningStorageEntry(configId);
        if (!storageObject) {
            return false;
        }
        const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);
        const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;
        const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);
        const currentDateUtc = Date.parse(new Date().toISOString());
        const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);
        const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;
        if (isProbablyStuck) {
            this.loggerService.logDebug(configId, 'silent renew process is probably stuck, state will be reset.', configId);
            this.resetSilentRenewRunning(configId);
            return false;
        }
        return storageObject.state === 'running';
    }
    setSilentRenewRunning(configId) {
        const storageObject = {
            state: 'running',
            dateOfLaunchedProcessUtc: new Date().toISOString(),
        };
        this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configId);
    }
    resetSilentRenewRunning(configId) {
        this.storagePersistenceService.write('storageSilentRenewRunning', '', configId);
    }
    getSilentRenewRunningStorageEntry(configId) {
        const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configId);
        if (!storageEntry) {
            return null;
        }
        return JSON.parse(storageEntry);
    }
}
FlowsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FlowsDataService, deps: [{ token: i1.StoragePersistenceService }, { token: i2.RandomService }, { token: i3.ConfigurationProvider }, { token: i4.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
FlowsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FlowsDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: FlowsDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StoragePersistenceService }, { type: i2.RandomService }, { type: i3.ConfigurationProvider }, { type: i4.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,