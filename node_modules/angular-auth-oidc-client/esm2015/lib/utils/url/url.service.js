import { HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { UriEncoder } from './uri-encoder';
import * as i0 from "@angular/core";
import * as i1 from "../../config/provider/config.provider";
import * as i2 from "../../logging/logger.service";
import * as i3 from "../../flows/flows-data.service";
import * as i4 from "../flowHelper/flow-helper.service";
import * as i5 from "../../storage/storage-persistence.service";
import * as i6 from "../../validation/jsrsasign-reduced.service";
const CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];
const AUTH0_ENDPOINT = 'auth0.com';
export class UrlService {
    constructor(configurationProvider, loggerService, flowsDataService, flowHelper, storagePersistenceService, jsrsAsignReducedService) {
        this.configurationProvider = configurationProvider;
        this.loggerService = loggerService;
        this.flowsDataService = flowsDataService;
        this.flowHelper = flowHelper;
        this.storagePersistenceService = storagePersistenceService;
        this.jsrsAsignReducedService = jsrsAsignReducedService;
    }
    getUrlParameter(urlToCheck, name) {
        if (!urlToCheck) {
            return '';
        }
        if (!name) {
            return '';
        }
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        const results = regex.exec(urlToCheck);
        return results === null ? '' : decodeURIComponent(results[1]);
    }
    isCallbackFromSts(currentUrl) {
        return CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(currentUrl, x));
    }
    getRefreshSessionSilentRenewUrl(configId, customParams) {
        if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {
            return this.createUrlCodeFlowWithSilentRenew(configId, customParams);
        }
        return this.createUrlImplicitFlowWithSilentRenew(configId, customParams) || '';
    }
    getAuthorizeParUrl(requestUri, configId) {
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        if (!authWellKnownEndPoints) {
            this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');
            return null;
        }
        const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;
        if (!authorizationEndpoint) {
            this.loggerService.logError(configId, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);
            return null;
        }
        const { clientId } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!clientId) {
            this.loggerService.logError(configId, `getAuthorizeParUrl could not add clientId because it was: `, clientId);
            return null;
        }
        const urlParts = authorizationEndpoint.split('?');
        const authorizationUrl = urlParts[0];
        const existingParams = urlParts[1];
        let params = this.createHttpParams(existingParams);
        params = params.set('request_uri', requestUri);
        params = params.append('client_id', clientId);
        return `${authorizationUrl}?${params}`;
    }
    getAuthorizeUrl(configId, customParams) {
        if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {
            return this.createUrlCodeFlowAuthorize(configId, customParams);
        }
        return this.createUrlImplicitFlowAuthorize(configId, customParams) || '';
    }
    createEndSessionUrl(idTokenHint, configId, customParamsEndSession) {
        // Auth0 needs a special logout url
        // See https://auth0.com/docs/api/authentication#logout
        if (this.isAuth0Endpoint(configId)) {
            return this.composeAuth0Endpoint(configId);
        }
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        const endSessionEndpoint = authWellKnownEndPoints === null || authWellKnownEndPoints === void 0 ? void 0 : authWellKnownEndPoints.endSessionEndpoint;
        if (!endSessionEndpoint) {
            return null;
        }
        const urlParts = endSessionEndpoint.split('?');
        const authorizationEndSessionUrl = urlParts[0];
        const existingParams = urlParts[1];
        let params = this.createHttpParams(existingParams);
        params = params.set('id_token_hint', idTokenHint);
        const postLogoutRedirectUri = this.getPostLogoutRedirectUrl(configId);
        if (postLogoutRedirectUri) {
            params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);
        }
        if (customParamsEndSession) {
            params = this.appendCustomParams(Object.assign({}, customParamsEndSession), params);
        }
        return `${authorizationEndSessionUrl}?${params}`;
    }
    createRevocationEndpointBodyAccessToken(token, configId) {
        const clientId = this.getClientId(configId);
        if (!clientId) {
            return null;
        }
        let params = this.createHttpParams();
        params = params.set('client_id', clientId);
        params = params.set('token', token);
        params = params.set('token_type_hint', 'access_token');
        return params.toString();
    }
    createRevocationEndpointBodyRefreshToken(token, configId) {
        const clientId = this.getClientId(configId);
        if (!clientId) {
            return null;
        }
        let params = this.createHttpParams();
        params = params.set('client_id', clientId);
        params = params.set('token', token);
        params = params.set('token_type_hint', 'refresh_token');
        return params.toString();
    }
    getRevocationEndpointUrl(configId) {
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        const revocationEndpoint = authWellKnownEndPoints === null || authWellKnownEndPoints === void 0 ? void 0 : authWellKnownEndPoints.revocationEndpoint;
        if (!revocationEndpoint) {
            return null;
        }
        const urlParts = revocationEndpoint.split('?');
        const revocationEndpointUrl = urlParts[0];
        return revocationEndpointUrl;
    }
    createBodyForCodeFlowCodeRequest(code, configId, customTokenParams) {
        const codeVerifier = this.flowsDataService.getCodeVerifier(configId);
        if (!codeVerifier) {
            this.loggerService.logError(configId, `CodeVerifier is not set `, codeVerifier);
            return null;
        }
        const clientId = this.getClientId(configId);
        if (!clientId) {
            return null;
        }
        let params = this.createHttpParams();
        params = params.set('grant_type', 'authorization_code');
        params = params.set('client_id', clientId);
        params = params.set('code_verifier', codeVerifier);
        params = params.set('code', code);
        if (customTokenParams) {
            params = this.appendCustomParams(Object.assign({}, customTokenParams), params);
        }
        const silentRenewUrl = this.getSilentRenewUrl(configId);
        if (this.flowsDataService.isSilentRenewRunning(configId) && silentRenewUrl) {
            params = params.set('redirect_uri', silentRenewUrl);
            return params.toString();
        }
        const redirectUrl = this.getRedirectUrl(configId);
        if (!redirectUrl) {
            return null;
        }
        params = params.set('redirect_uri', redirectUrl);
        return params.toString();
    }
    createBodyForCodeFlowRefreshTokensRequest(refreshToken, configId, customParamsRefresh) {
        const clientId = this.getClientId(configId);
        if (!clientId) {
            return null;
        }
        let params = this.createHttpParams();
        params = params.set('grant_type', 'refresh_token');
        params = params.set('client_id', clientId);
        params = params.set('refresh_token', refreshToken);
        if (customParamsRefresh) {
            params = this.appendCustomParams(Object.assign({}, customParamsRefresh), params);
        }
        return params.toString();
    }
    createBodyForParCodeFlowRequest(configId, customParamsRequest) {
        const redirectUrl = this.getRedirectUrl(configId);
        if (!redirectUrl) {
            return null;
        }
        const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);
        const nonce = this.flowsDataService.createNonce(configId);
        this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);
        // code_challenge with "S256"
        const codeVerifier = this.flowsDataService.createCodeVerifier(configId);
        const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);
        const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = this.configurationProvider.getOpenIDConfiguration(configId);
        let params = this.createHttpParams('');
        params = params.set('client_id', clientId);
        params = params.append('redirect_uri', redirectUrl);
        params = params.append('response_type', responseType);
        params = params.append('scope', scope);
        params = params.append('nonce', nonce);
        params = params.append('state', state);
        params = params.append('code_challenge', codeChallenge);
        params = params.append('code_challenge_method', 'S256');
        if (hdParam) {
            params = params.append('hd', hdParam);
        }
        if (customParamsAuthRequest) {
            params = this.appendCustomParams(Object.assign({}, customParamsAuthRequest), params);
        }
        if (customParamsRequest) {
            params = this.appendCustomParams(Object.assign({}, customParamsRequest), params);
        }
        return params.toString();
    }
    createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, configId, prompt, customRequestParams) {
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        const authorizationEndpoint = authWellKnownEndPoints === null || authWellKnownEndPoints === void 0 ? void 0 : authWellKnownEndPoints.authorizationEndpoint;
        if (!authorizationEndpoint) {
            this.loggerService.logError(configId, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);
            return null;
        }
        const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!clientId) {
            this.loggerService.logError(configId, `createAuthorizeUrl could not add clientId because it was: `, clientId);
            return null;
        }
        if (!responseType) {
            this.loggerService.logError(configId, `createAuthorizeUrl could not add responseType because it was: `, responseType);
            return null;
        }
        if (!scope) {
            this.loggerService.logError(configId, `createAuthorizeUrl could not add scope because it was: `, scope);
            return null;
        }
        const urlParts = authorizationEndpoint.split('?');
        const authorizationUrl = urlParts[0];
        const existingParams = urlParts[1];
        let params = this.createHttpParams(existingParams);
        params = params.set('client_id', clientId);
        params = params.append('redirect_uri', redirectUrl);
        params = params.append('response_type', responseType);
        params = params.append('scope', scope);
        params = params.append('nonce', nonce);
        params = params.append('state', state);
        if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {
            params = params.append('code_challenge', codeChallenge);
            params = params.append('code_challenge_method', 'S256');
        }
        const mergedParams = Object.assign(Object.assign({}, customParamsAuthRequest), customRequestParams);
        if (Object.keys(mergedParams).length > 0) {
            params = this.appendCustomParams(Object.assign({}, mergedParams), params);
        }
        if (prompt) {
            params = this.overWriteParam(params, 'prompt', prompt);
        }
        if (hdParam) {
            params = params.append('hd', hdParam);
        }
        return `${authorizationUrl}?${params}`;
    }
    createUrlImplicitFlowWithSilentRenew(configId, customParams) {
        const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);
        const nonce = this.flowsDataService.createNonce(configId);
        const silentRenewUrl = this.getSilentRenewUrl(configId);
        if (!silentRenewUrl) {
            return null;
        }
        this.loggerService.logDebug(configId, 'RefreshSession created. adding myautostate: ', state);
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        if (authWellKnownEndPoints) {
            return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, configId, 'none', customParams);
        }
        this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');
        return null;
    }
    createUrlCodeFlowWithSilentRenew(configId, customParams) {
        const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);
        const nonce = this.flowsDataService.createNonce(configId);
        this.loggerService.logDebug(configId, 'RefreshSession created. adding myautostate: ' + state);
        // code_challenge with "S256"
        const codeVerifier = this.flowsDataService.createCodeVerifier(configId);
        const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);
        const silentRenewUrl = this.getSilentRenewUrl(configId);
        if (!silentRenewUrl) {
            return null;
        }
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        if (authWellKnownEndPoints) {
            return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, configId, 'none', customParams);
        }
        this.loggerService.logWarning(configId, 'authWellKnownEndpoints is undefined');
        return null;
    }
    createUrlImplicitFlowAuthorize(configId, customParams) {
        const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);
        const nonce = this.flowsDataService.createNonce(configId);
        this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);
        const redirectUrl = this.getRedirectUrl(configId);
        if (!redirectUrl) {
            return null;
        }
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        if (authWellKnownEndPoints) {
            return this.createAuthorizeUrl('', redirectUrl, nonce, state, configId, null, customParams);
        }
        this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');
        return null;
    }
    createUrlCodeFlowAuthorize(configId, customParams) {
        const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);
        const nonce = this.flowsDataService.createNonce(configId);
        this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);
        const redirectUrl = this.getRedirectUrl(configId);
        if (!redirectUrl) {
            return null;
        }
        // code_challenge with "S256"
        const codeVerifier = this.flowsDataService.createCodeVerifier(configId);
        const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);
        if (authWellKnownEndPoints) {
            return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, configId, null, customParams);
        }
        this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');
        return null;
    }
    getRedirectUrl(configId) {
        const { redirectUrl } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!redirectUrl) {
            this.loggerService.logError(configId, `could not get redirectUrl, was: `, redirectUrl);
            null;
        }
        return redirectUrl;
    }
    getSilentRenewUrl(configId) {
        const { silentRenewUrl } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!silentRenewUrl) {
            this.loggerService.logError(configId, `could not get silentRenewUrl, was: `, silentRenewUrl);
            return null;
        }
        return silentRenewUrl;
    }
    getPostLogoutRedirectUrl(configId) {
        const { postLogoutRedirectUri } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!postLogoutRedirectUri) {
            this.loggerService.logError(configId, `could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);
            return null;
        }
        return postLogoutRedirectUri;
    }
    getClientId(configId) {
        const { clientId } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!clientId) {
            this.loggerService.logError(configId, `could not get clientId, was: `, clientId);
            return null;
        }
        return clientId;
    }
    appendCustomParams(customParams, params) {
        for (const [key, value] of Object.entries(Object.assign({}, customParams))) {
            params = params.append(key, value.toString());
        }
        return params;
    }
    overWriteParam(params, key, value) {
        return params.set(key, value);
    }
    createHttpParams(existingParams) {
        existingParams = existingParams !== null && existingParams !== void 0 ? existingParams : '';
        const params = new HttpParams({
            fromString: existingParams,
            encoder: new UriEncoder(),
        });
        return params;
    }
    isAuth0Endpoint(configId) {
        const { authority } = this.configurationProvider.getOpenIDConfiguration(configId);
        if (!authority) {
            return false;
        }
        return authority.endsWith(AUTH0_ENDPOINT);
    }
    composeAuth0Endpoint(configId) {
        // format: https://YOUR_DOMAIN/v2/logout?client_id=YOUR_CLIENT_ID&returnTo=LOGOUT_URL
        const { authority, clientId } = this.configurationProvider.getOpenIDConfiguration(configId);
        const postLogoutRedirectUrl = this.getPostLogoutRedirectUrl(configId);
        return `${authority}/v2/logout?client_id=${clientId}&returnTo=${postLogoutRedirectUrl}`;
    }
}
UrlService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: UrlService, deps: [{ token: i1.ConfigurationProvider }, { token: i2.LoggerService }, { token: i3.FlowsDataService }, { token: i4.FlowHelper }, { token: i5.StoragePersistenceService }, { token: i6.JsrsAsignReducedService }], target: i0.ɵɵFactoryTarget.Injectable });
UrlService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: UrlService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.4", ngImport: i0, type: UrlService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConfigurationProvider }, { type: i2.LoggerService }, { type: i3.FlowsDataService }, { type: i4.FlowHelper }, { type: i5.StoragePersistenceService }, { type: i6.JsrsAsignReducedService }]; } });
//# sourceMappingURL=data:application/json;base64,