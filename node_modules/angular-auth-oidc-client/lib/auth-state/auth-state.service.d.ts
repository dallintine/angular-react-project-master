import { Observable } from 'rxjs';
import { ConfigurationProvider } from '../config/provider/config.provider';
import { AuthResult } from '../flows/callback-context';
import { LoggerService } from '../logging/logger.service';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { TokenValidationService } from '../validation/token-validation.service';
import { AuthenticatedResult } from './auth-result';
import { AuthStateResult } from './auth-state';
import * as i0 from "@angular/core";
export declare class AuthStateService {
    private storagePersistenceService;
    private loggerService;
    private publicEventsService;
    private configurationProvider;
    private tokenValidationService;
    private authenticatedInternal$;
    get authenticated$(): Observable<AuthenticatedResult>;
    constructor(storagePersistenceService: StoragePersistenceService, loggerService: LoggerService, publicEventsService: PublicEventsService, configurationProvider: ConfigurationProvider, tokenValidationService: TokenValidationService);
    setAuthenticatedAndFireEvent(): void;
    setUnauthenticatedAndFireEvent(configIdToReset: string): void;
    updateAndPublishAuthState(authenticationResult: AuthStateResult): void;
    setAuthorizationData(accessToken: string, authResult: AuthResult, configId: string): void;
    getAccessToken(configId: string): string;
    getIdToken(configId: string): string;
    getRefreshToken(configId: string): string;
    getAuthenticationResult(configId?: string): any;
    areAuthStorageTokensValid(configId: string): boolean;
    hasIdTokenExpiredAndRenewCheckIsEnabled(configId: string): boolean;
    hasAccessTokenExpiredIfExpiryExists(configId: string): boolean;
    isAuthenticated(configId: string): boolean;
    private decodeURIComponentSafely;
    private persistAccessTokenExpirationTime;
    private composeAuthenticatedResult;
    private composeUnAuthenticatedResult;
    private checkAllConfigsIfTheyAreAuthenticated;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthStateService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthStateService>;
}
