{"version":3,"file":"angular-auth-oidc-client.js","sources":["../../../projects/angular-auth-oidc-client/src/lib/api/http-base.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/provider/config.provider.ts","../../../projects/angular-auth-oidc-client/src/lib/api/data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/event-types.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/log-level.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/browser-storage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/storage-persistence.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/public-events.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/tokenHelper/token-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/jsrsasign-reduced.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/token-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-state/auth-state.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/uri-encoder.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/random/random.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/flowHelper/flow-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/code-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/user-data/user.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/reset-auth-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/implicit-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/signin-key-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/history-jwt-keys-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/user-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/equality/equality.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/state-validation-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-session-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-token-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/interval.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/implicit-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/existing-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/check-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/current-url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/silent-renew.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/code-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/refresh-session-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session-refresh-token.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/periodically-token-check.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup.service.ts","../../../projects/angular-auth-oidc-client/src/lib/check-auth.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/default-config.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-authority.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-clientId.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-no-duplicated-configs.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-redirect-url.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-silentRenewUrl-with-no-refreshtokens.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/use-offline-scope-with-silent-renew.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/index.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/config-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/platform-provider/platform.provider.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/default-sessionstorage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/config.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/loader/config-loader.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/closest-matching-route.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/response-type-validation/response-type-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/redirect/redirect.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/standard/standard-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/logoff-revoke/logoff-revocation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/oidc.security.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth.module.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-all-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-partial-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/auth.interceptor.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/abstract-security-storage.ts","../../../projects/angular-auth-oidc-client/src/lib/angular-auth-oidc-client.ts","../../../projects/angular-auth-oidc-client/src/public-api.ts","../../../projects/angular-auth-oidc-client/src/angular-auth-oidc-client.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HttpBaseService {\n  constructor(private http: HttpClient) {}\n\n  get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\n    return this.http.get<T>(url, params);\n  }\n\n  post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\n    return this.http.post<T>(url, body, params);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OpenIdConfiguration } from '../openid-configuration';\n\n@Injectable()\nexport class ConfigurationProvider {\n  private configsInternal: Record<string, OpenIdConfiguration> = {};\n\n  hasAsLeastOneConfig(): boolean {\n    return Object.keys(this.configsInternal).length > 0;\n  }\n\n  hasManyConfigs(): boolean {\n    return Object.keys(this.configsInternal).length > 1;\n  }\n\n  setConfig(readyConfig: OpenIdConfiguration): void {\n    const { configId } = readyConfig;\n    this.configsInternal[configId] = readyConfig;\n  }\n\n  getOpenIDConfiguration(configId?: string): OpenIdConfiguration {\n    if (!!configId) {\n      return this.configsInternal[configId] || null;\n    }\n\n    const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];\n\n    return value || null;\n  }\n\n  getAllConfigurations(): OpenIdConfiguration[] {\n    return Object.values(this.configsInternal);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { HttpBaseService } from './http-base.service';\n\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\n\n@Injectable()\nexport class DataService {\n  constructor(private httpClient: HttpBaseService, private readonly configurationProvider: ConfigurationProvider) {}\n\n  get<T>(url: string, configId: string, token?: string): Observable<T> {\n    const headers = this.prepareHeaders(token);\n    const params = this.prepareParams(configId);\n\n    return this.httpClient.get<T>(url, {\n      headers,\n      params,\n    });\n  }\n\n  post<T>(url: string, body: any, configId: string, headersParams?: HttpHeaders): Observable<T> {\n    const headers = headersParams || this.prepareHeaders();\n    const params = this.prepareParams(configId);\n\n    return this.httpClient.post<T>(url, body, { headers, params });\n  }\n\n  private prepareHeaders(token?: string): HttpHeaders {\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/json');\n\n    if (!!token) {\n      headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n    }\n\n    return headers;\n  }\n\n  private prepareParams(configId: string): HttpParams {\n    let params = new HttpParams();\n    const { ngswBypass } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n\n    return params;\n  }\n}\n","// eslint-disable-next-line no-shadow\nexport enum EventTypes {\n  /**\n   *  This only works in the AppModule Constructor\n   */\n  ConfigLoaded,\n  ConfigLoadingFailed,\n  CheckSessionReceived,\n  UserDataChanged,\n  NewAuthenticationResult,\n  TokenExpired,\n  IdTokenExpired,\n  SilentRenewStarted,\n}\n","// eslint-disable-next-line no-shadow\nexport enum LogLevel {\n  None,\n  Debug,\n  Warn,\n  Error,\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  logError(configId: string, message: any, ...args: any[]): void {\n    if (!!configId) {\n      this.logErrorWithConfig(configId, message, ...args);\n    } else {\n      this.logErrorWithoutConfig(message, ...args);\n    }\n  }\n\n  logWarning(configId: string, message: any, ...args: any[]): void {\n    if (!!configId) {\n      this.logWarningWithConfig(configId, message, ...args);\n    } else {\n      this.logWarningWithoutConfig(message, ...args);\n    }\n  }\n\n  logDebug(configId: string, message: any, ...args: any[]): void {\n    if (!this.logLevelIsSet(configId)) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff(configId)) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configId, LogLevel.Debug)) {\n      return;\n    }\n\n    if (!!args && !!args.length) {\n      console.log(`[DEBUG] ${configId} - ${message}`, ...args);\n    } else {\n      console.log(`[DEBUG] ${configId} - ${message}`);\n    }\n  }\n\n  private logWarningWithoutConfig(message: any, ...args: any[]): void {\n    if (!!args && !!args.length) {\n      console.warn(`[WARN] - ${message}`, ...args);\n    } else {\n      console.warn(`[WARN] - ${message}`);\n    }\n  }\n\n  private logWarningWithConfig(configId: string, message: any, ...args: any[]): void {\n    if (!this.logLevelIsSet(configId)) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff(configId)) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configId, LogLevel.Warn)) {\n      return;\n    }\n\n    if (!!args && !!args.length) {\n      console.warn(`[WARN] ${configId} - ${message}`, ...args);\n    } else {\n      console.warn(`[WARN] ${configId} - ${message}`);\n    }\n  }\n\n  private logErrorWithConfig(configId: string, message: any, ...args: any[]): void {\n    if (this.loggingIsTurnedOff(configId)) {\n      return;\n    }\n\n    if (!!args && !!args.length) {\n      console.error(`[ERROR] ${configId} - ${message}`, ...args);\n    } else {\n      console.error(`[ERROR] ${configId} - ${message}`);\n    }\n  }\n\n  private logErrorWithoutConfig(message: any, ...args: any[]): void {\n    if (!!args && !!args.length) {\n      console.error(`[ERROR] - ${message}`, ...args);\n    } else {\n      console.error(`[ERROR] - ${message}`);\n    }\n  }\n\n  private currentLogLevelIsEqualOrSmallerThan(configId: string, logLevelToCompare: LogLevel): boolean {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};\n\n    return logLevel <= logLevelToCompare;\n  }\n\n  private logLevelIsSet(configId: string): boolean {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};\n\n    if (logLevel === null) {\n      return false;\n    }\n\n    if (logLevel === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private loggingIsTurnedOff(configId: string): boolean {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration(configId) || {};\n\n    return logLevel === LogLevel.None;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\n@Injectable()\nexport class BrowserStorageService {\n  constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\n\n  read(key: string, configId: string): any {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configId, `Wanted to read '${key}' but Storage was undefined`);\n\n      return null;\n    }\n\n    const storage = this.getStorage(configId);\n\n    if (!storage) {\n      this.loggerService.logDebug(configId, `Wanted to read config for '${configId}' but Storage was falsy`);\n\n      return null;\n    }\n\n    const storedConfig = storage.read(configId);\n\n    if (!storedConfig) {\n      return null;\n    }\n\n    return JSON.parse(storedConfig);\n  }\n\n  write(value: any, configId: string): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configId, `Wanted to write '${value}' but Storage was falsy`);\n\n      return false;\n    }\n\n    const storage = this.getStorage(configId);\n    if (!storage) {\n      this.loggerService.logDebug(configId, `Wanted to write '${value}' but Storage was falsy`);\n\n      return false;\n    }\n\n    value = value || null;\n\n    storage.write(configId, JSON.stringify(value));\n\n    return true;\n  }\n\n  remove(key: string, configId: string): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configId, `Wanted to remove '${key}' but Storage was falsy`);\n\n      return false;\n    }\n\n    const storage = this.getStorage(configId);\n    if (!storage) {\n      this.loggerService.logDebug(configId, `Wanted to write '${key}' but Storage was falsy`);\n\n      return false;\n    }\n\n    storage.remove(key);\n\n    return true;\n  }\n\n  // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING\n  clear(configId: string): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configId, `Wanted to clear storage but Storage was falsy`);\n\n      return false;\n    }\n\n    const storage = this.getStorage(configId);\n    if (!storage) {\n      this.loggerService.logDebug(configId, `Wanted to clear storage but Storage was falsy`);\n\n      return false;\n    }\n\n    storage.clear();\n\n    return true;\n  }\n\n  private getStorage(configId: string): AbstractSecurityStorage {\n    const { storage } = this.configProvider.getOpenIDConfiguration(configId) || {};\n\n    return storage;\n  }\n\n  private hasStorage(): boolean {\n    return typeof Storage !== 'undefined';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BrowserStorageService } from './browser-storage.service';\n\nexport type StorageKeys =\n  | 'authnResult'\n  | 'authzData'\n  | 'access_token_expires_at'\n  | 'authWellKnownEndPoints'\n  | 'userData'\n  | 'authNonce'\n  | 'codeVerifier'\n  | 'authStateControl'\n  | 'session_state'\n  | 'storageSilentRenewRunning'\n  | 'storageCustomParamsAuthRequest'\n  | 'storageCustomParamsRefresh'\n  | 'storageCustomParamsEndSession'\n  | 'redirect'\n  | 'configIds'\n  | 'jwtKeys';\n\n@Injectable()\nexport class StoragePersistenceService {\n  constructor(private readonly browserStorageService: BrowserStorageService) {}\n\n  read(key: StorageKeys, configId: string): any {\n    const storedConfig = this.browserStorageService.read(key, configId) || {};\n\n    return storedConfig[key];\n  }\n\n  write(key: StorageKeys, value: any, configId: string): void {\n    const storedConfig = this.browserStorageService.read(key, configId) || {};\n\n    storedConfig[key] = value;\n    this.browserStorageService.write(storedConfig, configId);\n  }\n\n  remove(key: StorageKeys, configId: string): void {\n    const storedConfig = this.browserStorageService.read(key, configId) || {};\n\n    delete storedConfig[key];\n\n    this.browserStorageService.write(storedConfig, configId);\n  }\n\n  clear(configId: string): void {\n    this.browserStorageService.clear(configId);\n  }\n\n  resetStorageFlowData(configId: string): void {\n    this.remove('session_state', configId);\n    this.remove('storageSilentRenewRunning', configId);\n    this.remove('codeVerifier', configId);\n    this.remove('userData', configId);\n    this.remove('storageCustomParamsAuthRequest', configId);\n    this.remove('access_token_expires_at', configId);\n    this.remove('storageCustomParamsRefresh', configId);\n    this.remove('storageCustomParamsEndSession', configId);\n  }\n\n  resetAuthStateInStorage(configId: string): void {\n    this.remove('authzData', configId);\n    this.remove('authnResult', configId);\n  }\n\n  getAccessToken(configId: string): string {\n    return this.read('authzData', configId);\n  }\n\n  getIdToken(configId: string): string {\n    return this.read('authnResult', configId)?.id_token;\n  }\n\n  getRefreshToken(configId: string): string {\n    return this.read('authnResult', configId)?.refresh_token;\n  }\n\n  getAuthenticationResult(configId: string): any {\n    return this.read('authnResult', configId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { EventTypes } from './event-types';\nimport { OidcClientNotification } from './notification';\n\n@Injectable()\nexport class PublicEventsService {\n  private notify = new ReplaySubject<OidcClientNotification<any>>(1);\n\n  /**\n   * Fires a new event.\n   *\n   * @param type The event type.\n   * @param value The event value.\n   */\n  fireEvent<T>(type: EventTypes, value?: T): void {\n    this.notify.next({ type, value });\n  }\n\n  /**\n   * Wires up the event notification observable.\n   */\n  registerForEvents(): Observable<OidcClientNotification<any>> {\n    return this.notify.asObservable();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\nconst PARTS_OF_TOKEN = 3;\n@Injectable()\nexport class TokenHelperService {\n  constructor(private readonly loggerService: LoggerService) {}\n\n  getTokenExpirationDate(dataIdToken: any): Date {\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      return new Date(new Date().toUTCString());\n    }\n\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(dataIdToken.exp);\n\n    return date;\n  }\n\n  getHeaderFromToken(token: any, encoded: boolean, configId: string): any {\n    if (!this.tokenIsValid(token, configId)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 0, encoded);\n  }\n\n  getPayloadFromToken(token: any, encoded: boolean, configId: string): any {\n    if (!this.tokenIsValid(token, configId)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 1, encoded);\n  }\n\n  getSignatureFromToken(token: any, encoded: boolean, configId: string): any {\n    if (!this.tokenIsValid(token, configId)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 2, encoded);\n  }\n\n  private getPartOfToken(token: string, index: number, encoded: boolean): any {\n    const partOfToken = this.extractPartOfToken(token, index);\n\n    if (encoded) {\n      return partOfToken;\n    }\n\n    const result = this.urlBase64Decode(partOfToken);\n\n    return JSON.parse(result);\n  }\n\n  private urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += '==';\n        break;\n      case 3:\n        output += '=';\n        break;\n      default:\n        throw Error('Illegal base64url string!');\n    }\n\n    const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n    try {\n      // Going backwards: from byte stream, to percent-encoding, to original string.\n      return decodeURIComponent(\n        decoded\n          .split('')\n          .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n    } catch (err) {\n      return decoded;\n    }\n  }\n\n  private tokenIsValid(token: string, configId: string): boolean {\n    if (!token) {\n      this.loggerService.logError(configId, `token '${token}' is not valid --> token falsy`);\n\n      return false;\n    }\n\n    if (!(token as string).includes('.')) {\n      this.loggerService.logError(configId, `token '${token}' is not valid --> no dots included`);\n\n      return false;\n    }\n\n    const parts = token.split('.');\n\n    if (parts.length !== PARTS_OF_TOKEN) {\n      this.loggerService.logError(configId, `token '${token}' is not valid --> token has to have exactly ${PARTS_OF_TOKEN - 1} dots`);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  private extractPartOfToken(token: string, index: number): string {\n    return token.split('.')[index];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KJUR } from 'jsrsasign-reduced';\n\n@Injectable()\nexport class JsrsAsignReducedService {\n  generateCodeChallenge(codeVerifier: any): string {\n    const hash = KJUR.crypto.Util.hashString(codeVerifier, 'sha256');\n    const testData = hextob64u(hash);\n\n    return testData;\n  }\n\n  generateAtHash(accessToken: any, sha: string): string {\n    const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n    const first128bits = hash.substr(0, hash.length / 2);\n    const testData = hextob64u(first128bits);\n\n    return testData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\nimport { JsrsAsignReducedService } from './jsrsasign-reduced.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n  static refreshTokenNoncePlaceholder = '--RefreshToken--';\n  keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n\n  constructor(\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService,\n    private jsrsAsignReducedService: JsrsAsignReducedService\n  ) {}\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  hasIdTokenExpired(token: string, configId: string, offsetSeconds?: number): boolean {\n    const decoded = this.tokenHelperService.getPayloadFromToken(token, false, configId);\n\n    return !this.validateIdTokenExpNotExpired(decoded, configId, offsetSeconds);\n  }\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  validateIdTokenExpNotExpired(decodedIdToken: string, configId: string, offsetSeconds?: number): boolean {\n    const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (!tokenExpirationDate) {\n      return false;\n    }\n\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(\n      configId,\n      `Has idToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\n        tokenExpirationValue - nowWithOffset\n      )} , ${new Date(tokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`\n    );\n\n    // Token not expired?\n    return tokenNotExpired;\n  }\n\n  validateAccessTokenNotExpired(accessTokenExpiresAt: Date, configId: string, offsetSeconds?: number): boolean {\n    // value is optional, so if it does not exist, then it has not expired\n    if (!accessTokenExpiresAt) {\n      return true;\n    }\n\n    offsetSeconds = offsetSeconds || 0;\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(\n      configId,\n      `Has accessToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\n        accessTokenExpirationValue - nowWithOffset\n      )} , ${new Date(accessTokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`\n    );\n\n    // access token not expired?\n    return tokenNotExpired;\n  }\n\n  // iss\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n  // https scheme that contains scheme, host,\n  // and optionally, port number and path components and no query or fragment components.\n  //\n  // sub\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n  //\n  // aud\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n  // audience value.\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n  //\n  // exp\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n  // the date/ time.\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n  //\n  // iat\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n  // 1970- 01 - 01T00: 00: 00Z as measured\n  // in UTC until the date/ time.\n  validateRequiredIdToken(dataIdToken: any, configId: string): boolean {\n    let validated = true;\n    if (!dataIdToken.hasOwnProperty('iss')) {\n      validated = false;\n      this.loggerService.logWarning(configId, 'iss is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('sub')) {\n      validated = false;\n      this.loggerService.logWarning(configId, 'sub is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('aud')) {\n      validated = false;\n      this.loggerService.logWarning(configId, 'aud is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      validated = false;\n      this.loggerService.logWarning(configId, 'exp is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      validated = false;\n      this.loggerService.logWarning(configId, 'iat is missing, this is required in the id_token');\n    }\n\n    return validated;\n  }\n\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n  validateIdTokenIatMaxOffset(\n    dataIdToken: any,\n    maxOffsetAllowedInSeconds: number,\n    disableIatOffsetValidation: boolean,\n    configId: string\n  ): boolean {\n    if (disableIatOffsetValidation) {\n      return true;\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      return false;\n    }\n\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n    const nowInUtc = new Date(new Date().toUTCString());\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\n\n    this.loggerService.logDebug(configId, `validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`);\n\n    if (diff > 0) {\n      return diff < maxOffsetAllowedInMilliseconds;\n    }\n\n    return -diff < maxOffsetAllowedInMilliseconds;\n  }\n\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n  // The precise method for detecting replay attacks is Client specific.\n\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n  // The current spec is ambiguous and KeyCloak does send it.\n  validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean, configId: string): boolean {\n    const isFromRefreshToken =\n      (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n      this.loggerService.logDebug(\n        configId,\n        'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce\n      );\n\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n  // MUST exactly match the value of the iss (issuer) Claim.\n  validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any, configId: string): boolean {\n    if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n      this.loggerService.logDebug(\n        configId,\n        'Validate_id_token_iss failed, dataIdToken.iss: ' +\n          dataIdToken.iss +\n          ' authWellKnownEndpoints issuer:' +\n          authWellKnownEndpointsIssuer\n      );\n\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n  // by the iss (issuer) Claim as an audience.\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n  // not trusted by the Client.\n  validateIdTokenAud(dataIdToken: any, aud: any, configId: string): boolean {\n    if (Array.isArray(dataIdToken.aud)) {\n      const result = dataIdToken.aud.includes(aud);\n\n      if (!result) {\n        this.loggerService.logDebug(\n          configId,\n          'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud\n        );\n\n        return false;\n      }\n\n      return true;\n    } else if (dataIdToken.aud !== aud) {\n      this.loggerService.logDebug(configId, 'Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n    if (!dataIdToken) {\n      return false;\n    }\n\n    if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken.azp) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n  validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n    if (!dataIdToken?.azp) {\n      return true;\n    }\n\n    if (dataIdToken.azp === clientId) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateStateFromHashCallback(state: any, localState: any, configId: string): boolean {\n    if ((state as string) !== (localState as string)) {\n      this.loggerService.logDebug(configId, 'ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\n  validateSignatureIdToken(idToken: any, jwtkeys: any, configId: string): boolean {\n    if (!jwtkeys || !jwtkeys.keys) {\n      return false;\n    }\n\n    const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false, configId);\n\n    if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n      this.loggerService.logWarning(configId, 'id token has no header data');\n\n      return false;\n    }\n\n    const kid = headerData.kid;\n    const alg = headerData.alg;\n\n    if (!this.keyAlgorithms.includes(alg as string)) {\n      this.loggerService.logWarning(configId, 'alg not supported', alg);\n\n      return false;\n    }\n\n    let jwtKtyToUse = 'RSA';\n    if ((alg as string).charAt(0) === 'E') {\n      jwtKtyToUse = 'EC';\n    }\n\n    let isValid = false;\n\n    // No kid in the Jose header\n    if (!kid) {\n      let keyToValidate;\n\n      // If only one key, use it\n      if (jwtkeys.keys.length === 1 && (jwtkeys.keys[0].kty as string) === jwtKtyToUse) {\n        keyToValidate = jwtkeys.keys[0];\n      } else {\n        // More than one key\n        // Make sure there's exactly 1 key candidate\n        // kty \"RSA\" and \"EC\" uses \"sig\"\n        let amountOfMatchingKeys = 0;\n        for (const key of jwtkeys.keys) {\n          if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n            amountOfMatchingKeys++;\n            keyToValidate = key;\n          }\n        }\n\n        if (amountOfMatchingKeys > 1) {\n          this.loggerService.logWarning(configId, 'no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n\n          return false;\n        }\n      }\n\n      if (!keyToValidate) {\n        this.loggerService.logWarning(configId, 'no keys found, incorrect Signature, validation failed for id_token');\n\n        return false;\n      }\n\n      isValid = KJUR.jws.JWS.verify(idToken, KEYUTIL.getKey(keyToValidate), [alg]);\n\n      if (!isValid) {\n        this.loggerService.logWarning(configId, 'incorrect Signature, validation failed for id_token');\n      }\n\n      return isValid;\n    } else {\n      // kid in the Jose header of id_token\n      for (const key of jwtkeys.keys) {\n        if ((key.kid as string) === (kid as string)) {\n          const publicKey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(idToken, publicKey, [alg]);\n          if (!isValid) {\n            this.loggerService.logWarning(configId, 'incorrect Signature, validation failed for id_token');\n          }\n\n          return isValid;\n        }\n      }\n    }\n\n    return isValid;\n  }\n\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n  ////    if (!header_data.hasOwnProperty('kid')) {\n  ////        // no kid defined in Jose header\n  ////        if (jwtkeys.keys.length != 1) {\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n  ////            return false;\n  ////        }\n  ////    }\n\n  ////    return true;\n  //// }\n\n  // Access Token Validation\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n  // is present in the ID Token.\n  validateIdTokenAtHash(accessToken: any, atHash: any, idTokenAlg: string, configId: string): boolean {\n    this.loggerService.logDebug(configId, 'at_hash from the server:' + atHash);\n\n    // 'sha256' 'sha384' 'sha512'\n    let sha = 'sha256';\n    if (idTokenAlg.includes('384')) {\n      sha = 'sha384';\n    } else if (idTokenAlg.includes('512')) {\n      sha = 'sha512';\n    }\n\n    const testData = this.jsrsAsignReducedService.generateAtHash('' + accessToken, sha);\n    this.loggerService.logDebug(configId, 'at_hash client validation not decoded:' + testData);\n    if (testData === (atHash as string)) {\n      return true; // isValid;\n    } else {\n      const testValue = this.jsrsAsignReducedService.generateAtHash('' + decodeURIComponent(accessToken), sha);\n      this.loggerService.logDebug(configId, '-gen access--' + testValue);\n      if (testValue === (atHash as string)) {\n        return true; // isValid\n      }\n    }\n\n    return false;\n  }\n\n  private millisToMinutesAndSeconds(millis: number): string {\n    const minutes = Math.floor(millis / 60000);\n    const seconds = ((millis % 60000) / 1000).toFixed(0);\n\n    return minutes + ':' + (+seconds < 10 ? '0' : '') + seconds;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { AuthResult } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthenticatedResult } from './auth-result';\nimport { AuthStateResult } from './auth-state';\n\nconst DEFAULT_AUTHRESULT = { isAuthenticated: false, allConfigsAuthenticated: [] };\n\n@Injectable()\nexport class AuthStateService {\n  private authenticatedInternal$ = new BehaviorSubject<AuthenticatedResult>(DEFAULT_AUTHRESULT);\n\n  get authenticated$(): Observable<AuthenticatedResult> {\n    return this.authenticatedInternal$.asObservable().pipe(distinctUntilChanged());\n  }\n\n  constructor(\n    private storagePersistenceService: StoragePersistenceService,\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private tokenValidationService: TokenValidationService\n  ) {}\n\n  setAuthenticatedAndFireEvent(): void {\n    const result = this.composeAuthenticatedResult();\n    this.authenticatedInternal$.next(result);\n  }\n\n  setUnauthenticatedAndFireEvent(configIdToReset: string): void {\n    this.storagePersistenceService.resetAuthStateInStorage(configIdToReset);\n\n    const result = this.composeUnAuthenticatedResult();\n    this.authenticatedInternal$.next(result);\n  }\n\n  updateAndPublishAuthState(authenticationResult: AuthStateResult): void {\n    this.publicEventsService.fireEvent<AuthStateResult>(EventTypes.NewAuthenticationResult, authenticationResult);\n  }\n\n  setAuthorizationData(accessToken: string, authResult: AuthResult, configId: string): void {\n    this.loggerService.logDebug(configId, `storing the accessToken '${accessToken}'`);\n\n    this.storagePersistenceService.write('authzData', accessToken, configId);\n    this.persistAccessTokenExpirationTime(authResult, configId);\n    this.setAuthenticatedAndFireEvent();\n  }\n\n  getAccessToken(configId: string): string {\n    if (!this.isAuthenticated(configId)) {\n      return null;\n    }\n\n    const token = this.storagePersistenceService.getAccessToken(configId);\n\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getIdToken(configId: string): string {\n    if (!this.isAuthenticated(configId)) {\n      return null;\n    }\n\n    const token = this.storagePersistenceService.getIdToken(configId);\n\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getRefreshToken(configId: string): string {\n    if (!this.isAuthenticated(configId)) {\n      return null;\n    }\n\n    const token = this.storagePersistenceService.getRefreshToken(configId);\n\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getAuthenticationResult(configId?: string): any {\n    if (!this.isAuthenticated(configId)) {\n      return null;\n    }\n\n    return this.storagePersistenceService.getAuthenticationResult(configId);\n  }\n\n  areAuthStorageTokensValid(configId: string): boolean {\n    if (!this.isAuthenticated(configId)) {\n      return false;\n    }\n\n    if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configId)) {\n      this.loggerService.logDebug(configId, 'persisted idToken is expired');\n\n      return false;\n    }\n\n    if (this.hasAccessTokenExpiredIfExpiryExists(configId)) {\n      this.loggerService.logDebug(configId, 'persisted accessToken is expired');\n\n      return false;\n    }\n\n    this.loggerService.logDebug(configId, 'persisted idToken and accessToken are valid');\n\n    return true;\n  }\n\n  hasIdTokenExpiredAndRenewCheckIsEnabled(configId: string): boolean {\n    const { renewTimeBeforeTokenExpiresInSeconds, enableIdTokenExpiredValidationInRenew } =\n      this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!enableIdTokenExpiredValidationInRenew) {\n      return false;\n    }\n    const tokenToCheck = this.storagePersistenceService.getIdToken(configId);\n\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, configId, renewTimeBeforeTokenExpiresInSeconds);\n\n    if (idTokenExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n    }\n\n    return idTokenExpired;\n  }\n\n  hasAccessTokenExpiredIfExpiryExists(configId: string): boolean {\n    const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);\n    const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at', configId);\n    const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n      accessTokenExpiresIn,\n      configId,\n      renewTimeBeforeTokenExpiresInSeconds\n    );\n\n    const hasExpired = !accessTokenHasNotExpired;\n\n    if (hasExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n    }\n\n    return hasExpired;\n  }\n\n  isAuthenticated(configId: string): boolean {\n    return !!this.storagePersistenceService.getAccessToken(configId) && !!this.storagePersistenceService.getIdToken(configId);\n  }\n\n  private decodeURIComponentSafely(token: string): string {\n    if (token) {\n      return decodeURIComponent(token);\n    } else {\n      return '';\n    }\n  }\n\n  private persistAccessTokenExpirationTime(authResult: any, configId: string): void {\n    if (authResult?.expires_in) {\n      const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;\n      this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime, configId);\n    }\n  }\n\n  private composeAuthenticatedResult(): AuthenticatedResult {\n    if (!this.configurationProvider.hasManyConfigs()) {\n      const { configId } = this.configurationProvider.getOpenIDConfiguration();\n\n      return { isAuthenticated: true, allConfigsAuthenticated: [{ configId, isAuthenticated: true }] };\n    }\n\n    return this.checkAllConfigsIfTheyAreAuthenticated();\n  }\n\n  private composeUnAuthenticatedResult(): AuthenticatedResult {\n    if (!this.configurationProvider.hasManyConfigs()) {\n      const { configId } = this.configurationProvider.getOpenIDConfiguration();\n\n      return { isAuthenticated: false, allConfigsAuthenticated: [{ configId, isAuthenticated: false }] };\n    }\n\n    return this.checkAllConfigsIfTheyAreAuthenticated();\n  }\n\n  private checkAllConfigsIfTheyAreAuthenticated(): AuthenticatedResult {\n    const configs = this.configurationProvider.getAllConfigurations();\n\n    const allConfigsAuthenticated = configs.map(({ configId }) => ({\n      configId,\n      isAuthenticated: this.isAuthenticated(configId),\n    }));\n\n    const isAuthenticated = allConfigsAuthenticated.every((x) => !!x.isAuthenticated);\n\n    return { allConfigsAuthenticated, isAuthenticated };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\n\nconst STORAGE_KEY = 'redirect';\n\n@Injectable()\nexport class AutoLoginService {\n  constructor(private readonly storageService: StoragePersistenceService, private readonly router: Router) {}\n\n  checkSavedRedirectRouteAndNavigate(configId: string): void {\n    const savedRouteForRedirect = this.getStoredRedirectRoute(configId);\n\n    if (savedRouteForRedirect) {\n      this.deleteStoredRedirectRoute(configId);\n      this.router.navigateByUrl(savedRouteForRedirect);\n    }\n  }\n\n  /**\n   * Saves the redirect URL to storage.\n   *\n   * @param url The redirect URL to save.\n   */\n  saveRedirectRoute(configId: string, url: string): void {\n    this.storageService.write(STORAGE_KEY, url, configId);\n  }\n\n  /**\n   * Gets the stored redirect URL from storage.\n   */\n  private getStoredRedirectRoute(configId: string): string {\n    return this.storageService.read(STORAGE_KEY, configId);\n  }\n\n  /**\n   * Removes the redirect URL from storage.\n   */\n  private deleteStoredRedirectRoute(configId: string): void {\n    this.storageService.remove(STORAGE_KEY, configId);\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  createRandom(requiredLength: number, configId: string): string {\n    if (requiredLength <= 0) {\n      return '';\n    }\n\n    if (requiredLength > 0 && requiredLength < 7) {\n      this.loggerService.logWarning(configId, `RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n      requiredLength = 10;\n    }\n\n    const length = requiredLength - 6;\n    const arr = new Uint8Array(Math.floor((length || length) / 2));\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(arr);\n    }\n\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\n  }\n\n  private toHex(dec): string {\n    return ('0' + dec.toString(16)).substr(-2);\n  }\n\n  private randomString(length): string {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    const values = new Uint32Array(length);\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(values);\n      for (let i = 0; i < length; i++) {\n        result += characters[values[i] % characters.length];\n      }\n    }\n\n    return result;\n  }\n\n  private getCrypto(): any {\n    // support for IE,  (window.crypto || window.msCrypto)\n    return this.doc.defaultView.crypto || (this.doc.defaultView as any).msCrypto;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n  constructor(\n    private storagePersistenceService: StoragePersistenceService,\n    private randomService: RandomService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService\n  ) {}\n\n  createNonce(configId: string): string {\n    const nonce = this.randomService.createRandom(40, configId);\n    this.loggerService.logDebug(configId, 'Nonce created. nonce:' + nonce);\n    this.setNonce(nonce, configId);\n\n    return nonce;\n  }\n\n  setNonce(nonce: string, configId: string): void {\n    this.storagePersistenceService.write('authNonce', nonce, configId);\n  }\n\n  getAuthStateControl(configId: string): any {\n    return this.storagePersistenceService.read('authStateControl', configId);\n  }\n\n  setAuthStateControl(authStateControl: string, configId: string): void {\n    this.storagePersistenceService.write('authStateControl', authStateControl, configId);\n  }\n\n  getExistingOrCreateAuthStateControl(configId: string): any {\n    let state = this.storagePersistenceService.read('authStateControl', configId);\n    if (!state) {\n      state = this.randomService.createRandom(40, configId);\n      this.storagePersistenceService.write('authStateControl', state, configId);\n    }\n\n    return state;\n  }\n\n  setSessionState(sessionState: any, configId: string): void {\n    this.storagePersistenceService.write('session_state', sessionState, configId);\n  }\n\n  resetStorageFlowData(configId: string): void {\n    this.storagePersistenceService.resetStorageFlowData(configId);\n  }\n\n  getCodeVerifier(configId: string): any {\n    return this.storagePersistenceService.read('codeVerifier', configId);\n  }\n\n  createCodeVerifier(configId: string): string {\n    const codeVerifier = this.randomService.createRandom(67, configId);\n    this.storagePersistenceService.write('codeVerifier', codeVerifier, configId);\n\n    return codeVerifier;\n  }\n\n  isSilentRenewRunning(configId: string): boolean {\n    const storageObject = this.getSilentRenewRunningStorageEntry(configId);\n\n    if (!storageObject) {\n      return false;\n    }\n\n    const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);\n    const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\n    const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);\n    const currentDateUtc = Date.parse(new Date().toISOString());\n    const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);\n    const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\n\n    if (isProbablyStuck) {\n      this.loggerService.logDebug(configId, 'silent renew process is probably stuck, state will be reset.', configId);\n      this.resetSilentRenewRunning(configId);\n\n      return false;\n    }\n\n    return storageObject.state === 'running';\n  }\n\n  setSilentRenewRunning(configId: string): void {\n    const storageObject = {\n      state: 'running',\n      dateOfLaunchedProcessUtc: new Date().toISOString(),\n    };\n\n    this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configId);\n  }\n\n  resetSilentRenewRunning(configId: string): void {\n    this.storagePersistenceService.write('storageSilentRenewRunning', '', configId);\n  }\n\n  private getSilentRenewRunningStorageEntry(configId: string): any {\n    const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configId);\n\n    if (!storageEntry) {\n      return null;\n    }\n\n    return JSON.parse(storageEntry);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\n\n@Injectable()\nexport class FlowHelper {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  isCurrentFlowCodeFlow(configId: string): boolean {\n    return this.currentFlowIs('code', configId);\n  }\n\n  isCurrentFlowAnyImplicitFlow(configId: string): boolean {\n    return this.isCurrentFlowImplicitFlowWithAccessToken(configId) || this.isCurrentFlowImplicitFlowWithoutAccessToken(configId);\n  }\n\n  isCurrentFlowCodeFlowWithRefreshTokens(configId: string): boolean {\n    const { useRefreshToken } = this.configurationProvider.getOpenIDConfiguration(configId);\n    if (this.isCurrentFlowCodeFlow(configId) && useRefreshToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isCurrentFlowImplicitFlowWithAccessToken(configId: string): boolean {\n    return this.currentFlowIs('id_token token', configId);\n  }\n\n  currentFlowIs(flowTypes: string[] | string, configId: string): boolean {\n    const { responseType } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (Array.isArray(flowTypes)) {\n      return flowTypes.some((x) => responseType === x);\n    }\n\n    return responseType === flowTypes;\n  }\n\n  private isCurrentFlowImplicitFlowWithoutAccessToken(configId: string): boolean {\n    return this.currentFlowIs('id_token', configId);\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { FlowsDataService } from '../../flows/flows-data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { JsrsAsignReducedService } from '../../validation/jsrsasign-reduced.service';\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\nimport { UriEncoder } from './uri-encoder';\n\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\nconst AUTH0_ENDPOINT = 'auth0.com';\n\n@Injectable()\nexport class UrlService {\n  constructor(\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly flowHelper: FlowHelper,\n    private storagePersistenceService: StoragePersistenceService,\n    private jsrsAsignReducedService: JsrsAsignReducedService\n  ) {}\n\n  getUrlParameter(urlToCheck: any, name: any): string {\n    if (!urlToCheck) {\n      return '';\n    }\n\n    if (!name) {\n      return '';\n    }\n\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    const results = regex.exec(urlToCheck);\n\n    return results === null ? '' : decodeURIComponent(results[1]);\n  }\n\n  isCallbackFromSts(currentUrl: string): boolean {\n    return CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(currentUrl, x));\n  }\n\n  getRefreshSessionSilentRenewUrl(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {\n      return this.createUrlCodeFlowWithSilentRenew(configId, customParams);\n    }\n\n    return this.createUrlImplicitFlowWithSilentRenew(configId, customParams) || '';\n  }\n\n  getAuthorizeParUrl(requestUri: string, configId: string): string {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');\n\n      return null;\n    }\n\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(configId, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);\n\n      return null;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!clientId) {\n      this.loggerService.logError(configId, `getAuthorizeParUrl could not add clientId because it was: `, clientId);\n\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    const existingParams = urlParts[1];\n    let params = this.createHttpParams(existingParams);\n\n    params = params.set('request_uri', requestUri);\n    params = params.append('client_id', clientId);\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  getAuthorizeUrl(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {\n      return this.createUrlCodeFlowAuthorize(configId, customParams);\n    }\n\n    return this.createUrlImplicitFlowAuthorize(configId, customParams) || '';\n  }\n\n  createEndSessionUrl(idTokenHint: string, configId: string, customParamsEndSession?: { [p: string]: string | number | boolean }): string {\n    // Auth0 needs a special logout url\n    // See https://auth0.com/docs/api/authentication#logout\n\n    if (this.isAuth0Endpoint(configId)) {\n      return this.composeAuth0Endpoint(configId);\n    }\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\n\n    if (!endSessionEndpoint) {\n      return null;\n    }\n\n    const urlParts = endSessionEndpoint.split('?');\n    const authorizationEndSessionUrl = urlParts[0];\n    const existingParams = urlParts[1];\n    let params = this.createHttpParams(existingParams);\n\n    params = params.set('id_token_hint', idTokenHint);\n\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl(configId);\n\n    if (postLogoutRedirectUri) {\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\n    }\n\n    if (customParamsEndSession) {\n      params = this.appendCustomParams({ ...customParamsEndSession }, params);\n    }\n\n    return `${authorizationEndSessionUrl}?${params}`;\n  }\n\n  createRevocationEndpointBodyAccessToken(token: any, configId: string): string {\n    const clientId = this.getClientId(configId);\n\n    if (!clientId) {\n      return null;\n    }\n\n    let params = this.createHttpParams();\n    params = params.set('client_id', clientId);\n    params = params.set('token', token);\n    params = params.set('token_type_hint', 'access_token');\n\n    return params.toString();\n  }\n\n  createRevocationEndpointBodyRefreshToken(token: any, configId: string): string {\n    const clientId = this.getClientId(configId);\n\n    if (!clientId) {\n      return null;\n    }\n\n    let params = this.createHttpParams();\n    params = params.set('client_id', clientId);\n    params = params.set('token', token);\n    params = params.set('token_type_hint', 'refresh_token');\n\n    return params.toString();\n  }\n\n  getRevocationEndpointUrl(configId: string): string {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\n\n    if (!revocationEndpoint) {\n      return null;\n    }\n\n    const urlParts = revocationEndpoint.split('?');\n\n    const revocationEndpointUrl = urlParts[0];\n\n    return revocationEndpointUrl;\n  }\n\n  createBodyForCodeFlowCodeRequest(code: string, configId: string, customTokenParams?: { [p: string]: string | number | boolean }): string {\n    const codeVerifier = this.flowsDataService.getCodeVerifier(configId);\n    if (!codeVerifier) {\n      this.loggerService.logError(configId, `CodeVerifier is not set `, codeVerifier);\n\n      return null;\n    }\n\n    const clientId = this.getClientId(configId);\n\n    if (!clientId) {\n      return null;\n    }\n\n    let params = this.createHttpParams();\n    params = params.set('grant_type', 'authorization_code');\n    params = params.set('client_id', clientId);\n    params = params.set('code_verifier', codeVerifier);\n    params = params.set('code', code);\n\n    if (customTokenParams) {\n      params = this.appendCustomParams({ ...customTokenParams }, params);\n    }\n\n    const silentRenewUrl = this.getSilentRenewUrl(configId);\n\n    if (this.flowsDataService.isSilentRenewRunning(configId) && silentRenewUrl) {\n      params = params.set('redirect_uri', silentRenewUrl);\n\n      return params.toString();\n    }\n\n    const redirectUrl = this.getRedirectUrl(configId);\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    params = params.set('redirect_uri', redirectUrl);\n\n    return params.toString();\n  }\n\n  createBodyForCodeFlowRefreshTokensRequest(\n    refreshToken: string,\n    configId: string,\n    customParamsRefresh?: { [key: string]: string | number | boolean }\n  ): string {\n    const clientId = this.getClientId(configId);\n\n    if (!clientId) {\n      return null;\n    }\n\n    let params = this.createHttpParams();\n    params = params.set('grant_type', 'refresh_token');\n    params = params.set('client_id', clientId);\n    params = params.set('refresh_token', refreshToken);\n\n    if (customParamsRefresh) {\n      params = this.appendCustomParams({ ...customParamsRefresh }, params);\n    }\n\n    return params.toString();\n  }\n\n  createBodyForParCodeFlowRequest(configId: string, customParamsRequest?: { [key: string]: string | number | boolean }): string {\n    const redirectUrl = this.getRedirectUrl(configId);\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    const nonce = this.flowsDataService.createNonce(configId);\n    this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configId);\n    const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);\n\n    const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    let params = this.createHttpParams('');\n    params = params.set('client_id', clientId);\n    params = params.append('redirect_uri', redirectUrl);\n    params = params.append('response_type', responseType);\n    params = params.append('scope', scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n    params = params.append('code_challenge', codeChallenge);\n    params = params.append('code_challenge_method', 'S256');\n\n    if (hdParam) {\n      params = params.append('hd', hdParam);\n    }\n\n    if (customParamsAuthRequest) {\n      params = this.appendCustomParams({ ...customParamsAuthRequest }, params);\n    }\n\n    if (customParamsRequest) {\n      params = this.appendCustomParams({ ...customParamsRequest }, params);\n    }\n\n    return params.toString();\n  }\n\n  private createAuthorizeUrl(\n    codeChallenge: string,\n    redirectUrl: string,\n    nonce: string,\n    state: string,\n    configId: string,\n    prompt?: string,\n    customRequestParams?: { [key: string]: string | number | boolean }\n  ): string {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(configId, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);\n\n      return null;\n    }\n\n    const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!clientId) {\n      this.loggerService.logError(configId, `createAuthorizeUrl could not add clientId because it was: `, clientId);\n\n      return null;\n    }\n\n    if (!responseType) {\n      this.loggerService.logError(configId, `createAuthorizeUrl could not add responseType because it was: `, responseType);\n\n      return null;\n    }\n\n    if (!scope) {\n      this.loggerService.logError(configId, `createAuthorizeUrl could not add scope because it was: `, scope);\n\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    const existingParams = urlParts[1];\n    let params = this.createHttpParams(existingParams);\n\n    params = params.set('client_id', clientId);\n    params = params.append('redirect_uri', redirectUrl);\n    params = params.append('response_type', responseType);\n    params = params.append('scope', scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n\n    if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {\n      params = params.append('code_challenge', codeChallenge);\n      params = params.append('code_challenge_method', 'S256');\n    }\n\n    const mergedParams = { ...customParamsAuthRequest, ...customRequestParams };\n\n    if (Object.keys(mergedParams).length > 0) {\n      params = this.appendCustomParams({ ...mergedParams }, params);\n    }\n\n    if (prompt) {\n      params = this.overWriteParam(params, 'prompt', prompt);\n    }\n\n    if (hdParam) {\n      params = params.append('hd', hdParam);\n    }\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  private createUrlImplicitFlowWithSilentRenew(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    const nonce = this.flowsDataService.createNonce(configId);\n\n    const silentRenewUrl = this.getSilentRenewUrl(configId);\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    this.loggerService.logDebug(configId, 'RefreshSession created. adding myautostate: ', state);\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, configId, 'none', customParams);\n    }\n\n    this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');\n\n    return null;\n  }\n\n  private createUrlCodeFlowWithSilentRenew(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    const nonce = this.flowsDataService.createNonce(configId);\n\n    this.loggerService.logDebug(configId, 'RefreshSession created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configId);\n    const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);\n\n    const silentRenewUrl = this.getSilentRenewUrl(configId);\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, configId, 'none', customParams);\n    }\n\n    this.loggerService.logWarning(configId, 'authWellKnownEndpoints is undefined');\n\n    return null;\n  }\n\n  private createUrlImplicitFlowAuthorize(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    const nonce = this.flowsDataService.createNonce(configId);\n    this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl(configId);\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', redirectUrl, nonce, state, configId, null, customParams);\n    }\n\n    this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');\n\n    return null;\n  }\n\n  private createUrlCodeFlowAuthorize(configId: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    const nonce = this.flowsDataService.createNonce(configId);\n    this.loggerService.logDebug(configId, 'Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl(configId);\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configId);\n    const codeChallenge = this.jsrsAsignReducedService.generateCodeChallenge(codeVerifier);\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, configId, null, customParams);\n    }\n\n    this.loggerService.logError(configId, 'authWellKnownEndpoints is undefined');\n\n    return null;\n  }\n\n  private getRedirectUrl(configId: string): string {\n    const { redirectUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!redirectUrl) {\n      this.loggerService.logError(configId, `could not get redirectUrl, was: `, redirectUrl);\n\n      null;\n    }\n\n    return redirectUrl;\n  }\n\n  private getSilentRenewUrl(configId: string): string {\n    const { silentRenewUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!silentRenewUrl) {\n      this.loggerService.logError(configId, `could not get silentRenewUrl, was: `, silentRenewUrl);\n\n      return null;\n    }\n\n    return silentRenewUrl;\n  }\n\n  private getPostLogoutRedirectUrl(configId: string): string {\n    const { postLogoutRedirectUri } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!postLogoutRedirectUri) {\n      this.loggerService.logError(configId, `could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\n\n      return null;\n    }\n\n    return postLogoutRedirectUri;\n  }\n\n  private getClientId(configId: string): string {\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!clientId) {\n      this.loggerService.logError(configId, `could not get clientId, was: `, clientId);\n\n      return null;\n    }\n\n    return clientId;\n  }\n\n  private appendCustomParams(customParams: { [key: string]: string | number | boolean }, params: HttpParams): HttpParams {\n    for (const [key, value] of Object.entries({ ...customParams })) {\n      params = params.append(key, value.toString());\n    }\n\n    return params;\n  }\n\n  private overWriteParam(params: HttpParams, key: string, value: string | number | boolean): HttpParams {\n    return params.set(key, value);\n  }\n\n  private createHttpParams(existingParams?: string): HttpParams {\n    existingParams = existingParams ?? '';\n\n    const params = new HttpParams({\n      fromString: existingParams,\n      encoder: new UriEncoder(),\n    });\n\n    return params;\n  }\n\n  private isAuth0Endpoint(configId: string): boolean {\n    const { authority } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!authority) {\n      return false;\n    }\n\n    return authority.endsWith(AUTH0_ENDPOINT);\n  }\n\n  private composeAuth0Endpoint(configId: string): string {\n    // format: https://YOUR_DOMAIN/v2/logout?client_id=YOUR_CLIENT_ID&returnTo=LOGOUT_URL\n    const { authority, clientId } = this.configurationProvider.getOpenIDConfiguration(configId);\n    const postLogoutRedirectUrl = this.getPostLogoutRedirectUrl(configId);\n\n    return `${authority}/v2/logout?client_id=${clientId}&returnTo=${postLogoutRedirectUrl}`;\n  }\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class CodeFlowCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly tokenValidationService: TokenValidationService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly storagePersistenceService: StoragePersistenceService,\n    private readonly dataService: DataService\n  ) {}\n\n  // STEP 1 Code Flow\n  codeFlowCallback(urlToCheck: string, configId: string): Observable<CallbackContext> {\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n    const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state');\n\n    if (!state) {\n      this.loggerService.logDebug(configId, 'no state in url');\n\n      return throwError('no state in url');\n    }\n\n    if (!code) {\n      this.loggerService.logDebug(configId, 'no code in url');\n\n      return throwError('no code in url');\n    }\n\n    this.loggerService.logDebug(configId, 'running validation for callback', urlToCheck);\n\n    const initialCallbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: false,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(initialCallbackContext);\n  }\n\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n  codeFlowCodeRequest(callbackContext: CallbackContext, configId: string): Observable<CallbackContext> {\n    const authStateControl = this.flowsDataService.getAuthStateControl(configId);\n\n    const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(callbackContext.state, authStateControl, configId);\n\n    if (!isStateCorrect) {\n      return throwError('codeFlowCodeRequest incorrect state');\n    }\n\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const config = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(\n      callbackContext.code,\n      configId,\n      config?.customParamsCodeRequest\n    );\n\n    return this.dataService.post(tokenEndpoint, bodyForCodeFlow, configId, headers).pipe(\n      switchMap((response) => {\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n        authResult.session_state = callbackContext.sessionState;\n\n        callbackContext.authResult = authResult;\n\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error, configId)),\n      catchError((error) => {\n        const { authority } = this.configurationProvider.getOpenIDConfiguration(configId);\n        const errorMessage = `OidcService code request ${authority}`;\n        this.loggerService.logError(configId, errorMessage, error);\n\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>, configId: string): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { authority, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\n          this.loggerService.logWarning(configId, errorMessage, error);\n\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, retry, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { OpenIdConfiguration } from '../config/openid-configuration';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\nimport { ConfigUserDataResult, UserDataResult } from './userdata-result';\n\nconst DEFAULT_USERRESULT = { userData: null, allUserData: [] };\n@Injectable()\nexport class UserService {\n  private userDataInternal$ = new BehaviorSubject<UserDataResult>(DEFAULT_USERRESULT);\n\n  get userData$(): Observable<UserDataResult> {\n    return this.userDataInternal$.asObservable();\n  }\n\n  constructor(\n    private oidcDataService: DataService,\n    private storagePersistenceService: StoragePersistenceService,\n    private eventService: PublicEventsService,\n    private loggerService: LoggerService,\n    private tokenHelperService: TokenHelperService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  getAndPersistUserDataInStore(configId: string, isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n    idToken = idToken || this.storagePersistenceService.getIdToken(configId);\n    decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false, configId);\n\n    const existingUserDataFromStorage = this.getUserDataFromStore(configId);\n    const haveUserData = !!existingUserDataFromStorage;\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configId);\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configId);\n\n    const accessToken = this.storagePersistenceService.getAccessToken(configId);\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n      this.loggerService.logDebug(configId, `authCallback idToken flow with accessToken ${accessToken}`);\n\n      this.setUserDataToStore(decodedIdToken, configId);\n\n      return of(decodedIdToken);\n    }\n\n    const { renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\n      return this.getUserDataOidcFlowAndSave(decodedIdToken.sub, configId).pipe(\n        switchMap((userData) => {\n          this.loggerService.logDebug(configId, 'Received user data: ', userData);\n          if (!!userData) {\n            this.loggerService.logDebug(configId, 'accessToken: ', accessToken);\n\n            return of(userData);\n          } else {\n            return throwError('Received no user data, request failed');\n          }\n        })\n      );\n    }\n\n    return of(existingUserDataFromStorage);\n  }\n\n  getUserDataFromStore(configId: string): any {\n    return this.storagePersistenceService.read('userData', configId) || null;\n  }\n\n  publishUserDataIfExists(configId: string): void {\n    const userData = this.getUserDataFromStore(configId);\n\n    if (userData) {\n      this.fireUserDataEvent(configId, userData);\n    }\n  }\n\n  setUserDataToStore(userData: any, configId: string): void {\n    this.storagePersistenceService.write('userData', userData, configId);\n    this.fireUserDataEvent(configId, userData);\n  }\n\n  resetUserDataInStore(configId: string): void {\n    this.storagePersistenceService.remove('userData', configId);\n    this.fireUserDataEvent(configId, null);\n  }\n\n  private getUserDataOidcFlowAndSave(idTokenSub: any, configId: string): Observable<any> {\n    return this.getIdentityUserData(configId).pipe(\n      map((data: any) => {\n        if (this.validateUserDataSubIdToken(idTokenSub, data?.sub)) {\n          this.setUserDataToStore(data, configId);\n\n          return data;\n        } else {\n          // something went wrong, user data sub does not match that from id_token\n          this.loggerService.logWarning(configId, `User data sub does not match sub in id_token, resetting`);\n          this.resetUserDataInStore(configId);\n\n          return null;\n        }\n      })\n    );\n  }\n\n  private getIdentityUserData(configId: string): Observable<any> {\n    const token = this.storagePersistenceService.getAccessToken(configId);\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning(configId, 'init check session: authWellKnownEndpoints is undefined');\n\n      return throwError('authWellKnownEndpoints is undefined');\n    }\n\n    const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;\n\n    if (!userInfoEndpoint) {\n      this.loggerService.logError(\n        configId,\n        'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n      );\n\n      return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n    }\n\n    return this.oidcDataService.get(userInfoEndpoint, configId, token).pipe(retry(2));\n  }\n\n  private validateUserDataSubIdToken(idTokenSub: any, userDataSub: any): boolean {\n    if (!idTokenSub) {\n      return false;\n    }\n\n    if (!userDataSub) {\n      return false;\n    }\n\n    if ((idTokenSub as string) !== (userDataSub as string)) {\n      this.loggerService.logDebug('validateUserDataSubIdToken failed', idTokenSub, userDataSub);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  private fireUserDataEvent(configId: string, passedUserData: any): void {\n    const userData = this.composeSingleOrMultipleUserDataObject(configId, passedUserData);\n\n    this.userDataInternal$.next(userData);\n\n    this.eventService.fireEvent(EventTypes.UserDataChanged, { configId, userData: passedUserData });\n  }\n\n  private composeSingleOrMultipleUserDataObject(configId: string, passedUserData: any): UserDataResult {\n    const hasManyConfigs = this.configurationProvider.hasManyConfigs();\n\n    if (!hasManyConfigs) {\n      return this.composeSingleUserDataResult(configId, passedUserData);\n    }\n\n    const configs = this.configurationProvider.getAllConfigurations();\n\n    const allUserData: ConfigUserDataResult[] = configs.map((config) => {\n      if (this.currentConfigIsToUpdate(configId, config)) {\n        return { configId: config.configId, userData: passedUserData };\n      }\n\n      const alreadySavedUserData = this.storagePersistenceService.read('userData', config.configId) || null;\n\n      return { configId: config.configId, userData: alreadySavedUserData };\n    });\n\n    return {\n      userData: null,\n      allUserData,\n    };\n  }\n\n  private composeSingleUserDataResult(configId: string, userData: any): UserDataResult {\n    return {\n      userData,\n      allUserData: [{ configId, userData }],\n    };\n  }\n\n  private currentConfigIsToUpdate(configId: string, config: OpenIdConfiguration): boolean {\n    return config.configId === configId;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { UserService } from '../user-data/user.service';\nimport { FlowsDataService } from './flows-data.service';\n\n@Injectable()\nexport class ResetAuthDataService {\n  constructor(\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService\n  ) {}\n\n  resetAuthorizationData(configId: string): void {\n    this.userService.resetUserDataInStore(configId);\n    this.flowsDataService.resetStorageFlowData(configId);\n    this.authStateService.setUnauthenticatedAndFireEvent(configId);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LoggerService } from '../../logging/logger.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class ImplicitFlowCallbackHandlerService {\n  constructor(\n    private readonly resetAuthDataService: ResetAuthDataService,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 1 Code Flow\n  // STEP 1 Implicit Flow\n  implicitFlowCallback(configId: string, hash?: string): Observable<CallbackContext> {\n    const isRenewProcessData = this.flowsDataService.isSilentRenewRunning(configId);\n\n    this.loggerService.logDebug(configId, 'BEGIN callback, no auth data');\n    if (!isRenewProcessData) {\n      this.resetAuthDataService.resetAuthorizationData(configId);\n    }\n\n    hash = hash || this.doc.location.hash.substr(1);\n\n    const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n      const parts = item.split('=');\n      resultData[parts.shift() as string] = parts.join('=');\n\n      return resultData;\n    }, {});\n\n    const callbackContext = {\n      code: null,\n      refreshToken: null,\n      state: null,\n      sessionState: null,\n      authResult,\n      isRenewProcess: isRenewProcessData,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(callbackContext);\n  }\n}\n","/* eslint-disable no-shadow */\nexport enum ValidationResult {\n  NotSet = 'NotSet',\n  StatesDoNotMatch = 'StatesDoNotMatch',\n  SignatureFailed = 'SignatureFailed',\n  IncorrectNonce = 'IncorrectNonce',\n  RequiredPropertyMissing = 'RequiredPropertyMissing',\n  MaxOffsetExpired = 'MaxOffsetExpired',\n  IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n  NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n  IncorrectAud = 'IncorrectAud',\n  IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n  IncorrectAzp = 'IncorrectAzp',\n  TokenExpired = 'TokenExpired',\n  IncorrectAtHash = 'IncorrectAtHash',\n  Ok = 'Ok',\n  LoginRequired = 'LoginRequired',\n  SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { JwtKeys } from '../validation/jwtkeys';\n\n@Injectable()\nexport class SigninKeyDataService {\n  constructor(\n    private storagePersistenceService: StoragePersistenceService,\n    private loggerService: LoggerService,\n    private dataService: DataService\n  ) {}\n\n  getSigningKeys(configId: string): Observable<JwtKeys> {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\n    if (!jwksUri) {\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\n      this.loggerService.logWarning(configId, error);\n\n      return throwError(error);\n    }\n\n    this.loggerService.logDebug(configId, 'Getting signinkeys from ', jwksUri);\n\n    return this.dataService.get<JwtKeys>(jwksUri, configId).pipe(\n      retry(2),\n      catchError((e) => this.handleErrorGetSigningKeys(e, configId))\n    );\n  }\n\n  private handleErrorGetSigningKeys(errorResponse: HttpResponse<any> | any, configId: string): Observable<never> {\n    let errMsg = '';\n    if (errorResponse instanceof HttpResponse) {\n      const body = errorResponse.body || {};\n      const err = JSON.stringify(body);\n      const { status, statusText } = errorResponse;\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\n    } else {\n      const { message } = errorResponse;\n      errMsg = !!message ? message : `${errorResponse}`;\n    }\n    this.loggerService.logError(configId, errMsg);\n\n    return throwError(errMsg);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { AuthStateService } from '../../auth-state/auth-state.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { JwtKeys } from '../../validation/jwtkeys';\nimport { ValidationResult } from '../../validation/validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\nimport { SigninKeyDataService } from '../signin-key-data.service';\n\nconst JWT_KEYS = 'jwtKeys';\n\n@Injectable()\nexport class HistoryJwtKeysCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly signInKeyDataService: SigninKeyDataService,\n    private readonly storagePersistenceService: StoragePersistenceService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\n  callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext, configId: string): Observable<CallbackContext> {\n    this.storagePersistenceService.write('authnResult', callbackContext.authResult, configId);\n\n    if (this.historyCleanUpTurnedOn(configId) && !callbackContext.isRenewProcess) {\n      this.resetBrowserHistory();\n    } else {\n      this.loggerService.logDebug(configId, 'history clean up inactive');\n    }\n\n    if (callbackContext.authResult.error) {\n      const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;\n      this.loggerService.logDebug(configId, errorMessage);\n      this.resetAuthDataService.resetAuthorizationData(configId);\n      this.flowsDataService.setNonce('', configId);\n      this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug(\n      configId,\n      `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.\n      AuthCallback created, begin token validation`\n    );\n\n    return this.signInKeyDataService.getSigningKeys(configId).pipe(\n      tap((jwtKeys: JwtKeys) => this.storeSigningKeys(jwtKeys, configId)),\n      catchError((err) => {\n        // fallback: try to load jwtKeys from storage\n        const storedJwtKeys = this.readSigningKeys(configId);\n        if (!!storedJwtKeys) {\n          this.loggerService.logWarning(configId, `Failed to retrieve signing keys, fallback to stored keys`);\n\n          return of(storedJwtKeys);\n        }\n\n        return throwError(err);\n      }),\n      switchMap((jwtKeys) => {\n        if (jwtKeys) {\n          callbackContext.jwtKeys = jwtKeys;\n\n          return of(callbackContext);\n        }\n\n        const errorMessage = `Failed to retrieve signing key`;\n        this.loggerService.logWarning(configId, errorMessage);\n\n        return throwError(errorMessage);\n      }),\n      catchError((err) => {\n        const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n        this.loggerService.logWarning(configId, errorMessage);\n\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleResultErrorFromCallback(result: any, isRenewProcess: boolean): void {\n    let validationResult = ValidationResult.SecureTokenServerError;\n\n    if ((result.error as string) === 'login_required') {\n      validationResult = ValidationResult.LoginRequired;\n    }\n\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult,\n      isRenewProcess,\n    });\n  }\n\n  private historyCleanUpTurnedOn(configId: string): boolean {\n    const { historyCleanupOff } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return !historyCleanupOff;\n  }\n\n  private resetBrowserHistory(): void {\n    window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n  }\n\n  private storeSigningKeys(jwtKeys: JwtKeys, configId: string): void {\n    this.storagePersistenceService.write(JWT_KEYS, jwtKeys, configId);\n  }\n\n  private readSigningKeys(configId: string): any {\n    return this.storagePersistenceService.read(JWT_KEYS, configId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../../auth-state/auth-state.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../user-data/user.service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class UserCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 5 userData\n  callbackUser(callbackContext: CallbackContext, configId: string): Observable<CallbackContext> {\n    const { isRenewProcess, validationResult, authResult, refreshToken } = callbackContext;\n    const { autoUserInfo, renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!autoUserInfo) {\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\n        // userData is set to the id_token decoded, auto get user data set to false\n        if (validationResult.decodedIdToken) {\n          this.userService.setUserDataToStore(validationResult.decodedIdToken, configId);\n        }\n      }\n\n      if (!isRenewProcess && !refreshToken) {\n        this.flowsDataService.setSessionState(authResult.session_state, configId);\n      }\n\n      this.publishAuthState(validationResult, isRenewProcess);\n\n      return of(callbackContext);\n    }\n\n    return this.userService\n      .getAndPersistUserDataInStore(configId, isRenewProcess, validationResult.idToken, validationResult.decodedIdToken)\n      .pipe(\n        switchMap((userData) => {\n          if (!!userData) {\n            if (!refreshToken) {\n              this.flowsDataService.setSessionState(authResult.session_state, configId);\n            }\n\n            this.publishAuthState(validationResult, isRenewProcess);\n\n            return of(callbackContext);\n          } else {\n            this.resetAuthDataService.resetAuthorizationData(configId);\n            this.publishUnauthenticatedState(validationResult, isRenewProcess);\n            const errorMessage = `Called for userData but they were ${userData}`;\n            this.loggerService.logWarning(configId, errorMessage);\n\n            return throwError(errorMessage);\n          }\n        }),\n        catchError((err) => {\n          const errorMessage = `Failed to retrieve user info with error:  ${err}`;\n          this.loggerService.logWarning(configId, errorMessage);\n\n          return throwError(errorMessage);\n        })\n      );\n  }\n\n  private publishAuthState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: true,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n\n  private publishUnauthenticatedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n  constructor(\n    public accessToken = '',\n    public idToken = '',\n    public authResponseIsValid = false,\n    public decodedIdToken: any = {},\n    public state: ValidationResult = ValidationResult.NotSet\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n  isStringEqualOrNonOrderedArrayEqual(value1: string | any[], value2: string | any[]): boolean {\n    if (this.isNullOrUndefined(value1)) {\n      return false;\n    }\n\n    if (this.isNullOrUndefined(value2)) {\n      return false;\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      return false;\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysHaveEqualContent(value1 as any[], value2 as any[]);\n    }\n\n    return false;\n  }\n\n  areEqual(value1: string | any[] | any | null | undefined, value2: string | any[] | any | null | undefined): boolean {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysStrictEqual(value1 as any[], value2 as any[]);\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreObjects(value1, value2)) {\n      return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\n        return value1[0] === value2;\n      }\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\n        return value2[0] === value1;\n      }\n    }\n\n    return false;\n  }\n\n  private oneValueIsStringAndTheOtherIsArray(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n  }\n\n  private bothValuesAreObjects(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\n  }\n\n  private bothValuesAreStrings(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return this.valueIsString(value1) && this.valueIsString(value2);\n  }\n\n  private bothValuesAreArrays(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return Array.isArray(value1) && Array.isArray(value2);\n  }\n\n  private valueIsString(value: any): boolean {\n    return typeof value === 'string' || value instanceof String;\n  }\n\n  private valueIsObject(value: any): boolean {\n    return typeof value === 'object';\n  }\n\n  private arraysStrictEqual(arr1: Array<string>, arr2: Array<string>): boolean {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = arr1.length; i--; ) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private arraysHaveEqualContent(arr1: Array<string>, arr2: Array<string>): boolean {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.some((v) => arr2.includes(v));\n  }\n\n  private isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { EqualityService } from '../utils/equality/equality.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n  constructor(\n    private storagePersistenceService: StoragePersistenceService,\n    private tokenValidationService: TokenValidationService,\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private equalityService: EqualityService,\n    private flowHelper: FlowHelper\n  ) {}\n\n  getValidatedStateResult(callbackContext: CallbackContext, configId: string): StateValidationResult {\n    if (!callbackContext) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    if (callbackContext.authResult.error) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    return this.validateState(callbackContext, configId);\n  }\n\n  validateState(callbackContext: any, configId: string): StateValidationResult {\n    const toReturn = new StateValidationResult();\n    const authStateControl = this.storagePersistenceService.read('authStateControl', configId);\n\n    if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl, configId)) {\n      this.loggerService.logWarning(configId, 'authCallback incorrect state');\n      toReturn.state = ValidationResult.StatesDoNotMatch;\n      this.handleUnsuccessfulValidation(configId);\n\n      return toReturn;\n    }\n\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configId);\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configId);\n\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n      toReturn.accessToken = callbackContext.authResult.access_token;\n    }\n\n    if (callbackContext.authResult.id_token) {\n      const { clientId, issValidationOff, maxIdTokenIatOffsetAllowedInSeconds, disableIatOffsetValidation, ignoreNonceAfterRefresh } =\n        this.configurationProvider.getOpenIDConfiguration(configId);\n\n      toReturn.idToken = callbackContext.authResult.id_token;\n\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false, configId);\n\n      if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys, configId)) {\n        this.loggerService.logDebug(configId, 'authCallback Signature validation failed id_token');\n        toReturn.state = ValidationResult.SignatureFailed;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      const authNonce = this.storagePersistenceService.read('authNonce', configId);\n\n      if (!this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh, configId)) {\n        this.loggerService.logWarning(configId, 'authCallback incorrect nonce, did you call the checkAuth() method multiple times?');\n        toReturn.state = ValidationResult.IncorrectNonce;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken, configId)) {\n        this.loggerService.logDebug(configId, 'authCallback Validation, one of the REQUIRED properties missing from id_token');\n        toReturn.state = ValidationResult.RequiredPropertyMissing;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (\n        !this.tokenValidationService.validateIdTokenIatMaxOffset(\n          toReturn.decodedIdToken,\n          maxIdTokenIatOffsetAllowedInSeconds,\n          disableIatOffsetValidation,\n          configId\n        )\n      ) {\n        this.loggerService.logWarning(\n          configId,\n          'authCallback Validation, iat rejected id_token was issued too far away from the current time'\n        );\n        toReturn.state = ValidationResult.MaxOffsetExpired;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n      if (authWellKnownEndPoints) {\n        if (issValidationOff) {\n          this.loggerService.logDebug(configId, 'iss validation is turned off, this is not recommended!');\n        } else if (\n          !issValidationOff &&\n          !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer, configId)\n        ) {\n          this.loggerService.logWarning(configId, 'authCallback incorrect iss does not match authWellKnownEndpoints issuer');\n          toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n          this.handleUnsuccessfulValidation(configId);\n\n          return toReturn;\n        }\n      } else {\n        this.loggerService.logWarning(configId, 'authWellKnownEndpoints is undefined');\n        toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId, configId)) {\n        this.loggerService.logWarning(configId, 'authCallback incorrect aud');\n        toReturn.state = ValidationResult.IncorrectAud;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n        this.loggerService.logWarning(configId, 'authCallback missing azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {\n        this.loggerService.logWarning(configId, 'authCallback incorrect azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken, configId)) {\n        this.loggerService.logWarning(configId, 'authCallback pre, post id_token claims do not match in refresh');\n        toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken, configId)) {\n        this.loggerService.logWarning(configId, 'authCallback id token expired');\n        toReturn.state = ValidationResult.TokenExpired;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n    } else {\n      this.loggerService.logDebug(configId, 'No id_token found, skipping id_token validation');\n    }\n\n    // flow id_token\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n      toReturn.authResponseIsValid = true;\n      toReturn.state = ValidationResult.Ok;\n      this.handleSuccessfulValidation(configId);\n      this.handleUnsuccessfulValidation(configId);\n\n      return toReturn;\n    }\n\n    // only do check if id_token returned, no always the case when using refresh tokens\n    if (callbackContext.authResult.id_token) {\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false, configId);\n\n      // The at_hash is optional for the code flow\n      if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n        this.loggerService.logDebug(configId, 'Code Flow active, and no at_hash in the id_token, skipping check!');\n      } else if (\n        !this.tokenValidationService.validateIdTokenAtHash(\n          toReturn.accessToken,\n          toReturn.decodedIdToken.at_hash,\n          idTokenHeader.alg, // 'RSA256'\n          configId\n        ) ||\n        !toReturn.accessToken\n      ) {\n        this.loggerService.logWarning(configId, 'authCallback incorrect at_hash');\n        toReturn.state = ValidationResult.IncorrectAtHash;\n        this.handleUnsuccessfulValidation(configId);\n\n        return toReturn;\n      }\n    }\n\n    toReturn.authResponseIsValid = true;\n    toReturn.state = ValidationResult.Ok;\n    this.handleSuccessfulValidation(configId);\n\n    return toReturn;\n  }\n\n  private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any, configId: string): boolean {\n    const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } = this.configurationProvider.getOpenIDConfiguration(configId);\n    if (!useRefreshToken) {\n      return true;\n    }\n\n    if (!callbackContext.existingIdToken) {\n      return true;\n    }\n\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false, configId);\n\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n    // except that it might not contain an id_token.\n\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.iss !== newIdToken.iss) {\n      this.loggerService.logDebug(configId, `iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n\n      return false;\n    }\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n    if (decodedIdToken.azp !== newIdToken.azp) {\n      this.loggerService.logDebug(configId, `azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n\n      return false;\n    }\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.sub !== newIdToken.sub) {\n      this.loggerService.logDebug(configId, `sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n\n      return false;\n    }\n\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {\n      this.loggerService.logDebug(configId, `aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);\n\n      return false;\n    }\n\n    if (disableRefreshIdTokenAuthTimeValidation) {\n      return true;\n    }\n\n    // its iat Claim MUST represent the time that the new ID Token is issued,\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n    // - not the time that the new ID token is issued,\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n      this.loggerService.logDebug(configId, `auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  private handleSuccessfulValidation(configId: string): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration(configId);\n    this.storagePersistenceService.write('authNonce', null, configId);\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistenceService.write('authStateControl', '', configId);\n    }\n    this.loggerService.logDebug(configId, 'authCallback token(s) validated, continue');\n  }\n\n  private handleUnsuccessfulValidation(configId: string): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration(configId);\n    this.storagePersistenceService.write('authNonce', null, configId);\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistenceService.write('authStateControl', '', configId);\n    }\n    this.loggerService.logDebug(configId, 'authCallback token(s) invalid');\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../auth-state/auth-state.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { StateValidationService } from '../../validation/state-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class StateValidationCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly stateValidationService: StateValidationService,\n    private readonly authStateService: AuthStateService,\n    private readonly resetAuthDataService: ResetAuthDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 4 All flows\n\n  callbackStateValidation(callbackContext: CallbackContext, configId: string): Observable<CallbackContext> {\n    const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext, configId);\n    callbackContext.validationResult = validationResult;\n\n    if (validationResult.authResponseIsValid) {\n      this.authStateService.setAuthorizationData(validationResult.accessToken, callbackContext.authResult, configId);\n\n      return of(callbackContext);\n    } else {\n      const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.doc.location.hash}`;\n      this.loggerService.logWarning(configId, errorMessage);\n      this.resetAuthDataService.resetAuthorizationData(configId);\n      this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n\n      return throwError(errorMessage);\n    }\n  }\n\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../auth-state/auth-state.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class RefreshSessionCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService\n  ) {}\n\n  // STEP 1 Refresh session\n  refreshSessionWithRefreshTokens(configId: string): Observable<CallbackContext> {\n    const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl(configId);\n    this.loggerService.logDebug(configId, 'RefreshSession created. Adding myautostate: ' + stateData);\n    const refreshToken = this.authStateService.getRefreshToken(configId);\n    const idToken = this.authStateService.getIdToken(configId);\n\n    if (refreshToken) {\n      const callbackContext = {\n        code: null,\n        refreshToken,\n        state: stateData,\n        sessionState: null,\n        authResult: null,\n        isRenewProcess: true,\n        jwtKeys: null,\n        validationResult: null,\n        existingIdToken: idToken,\n      };\n\n      this.loggerService.logDebug(configId, 'found refresh code, obtaining new credentials with refresh code');\n      // Nonce is not used with refresh tokens; but Key cloak may send it anyway\n      this.flowsDataService.setNonce(TokenValidationService.refreshTokenNoncePlaceholder, configId);\n\n      return of(callbackContext);\n    } else {\n      const errorMessage = 'no refresh token found, please login';\n      this.loggerService.logError(configId, errorMessage);\n\n      return throwError(errorMessage);\n    }\n  }\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { CallbackContext } from '../callback-context';\n\n@Injectable()\nexport class RefreshTokenCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly dataService: DataService,\n    private readonly storagePersistenceService: StoragePersistenceService\n  ) {}\n\n  // STEP 2 Refresh Token\n  refreshTokensRequestTokens(\n    callbackContext: CallbackContext,\n    configId: string,\n    customParamsRefresh?: { [key: string]: string | number | boolean }\n  ): Observable<CallbackContext> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken, configId, customParamsRefresh);\n\n    return this.dataService.post(tokenEndpoint, data, configId, headers).pipe(\n      switchMap((response: any) => {\n        this.loggerService.logDebug(configId, 'token refresh response: ', response);\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n\n        callbackContext.authResult = authResult;\n\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error, configId)),\n      catchError((error) => {\n        const { authority } = this.configurationProvider.getOpenIDConfiguration(configId);\n        const errorMessage = `OidcService code request ${authority}`;\n        this.loggerService.logError(configId, errorMessage, error);\n\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>, configId: string): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { authority, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\n          this.loggerService.logWarning(configId, errorMessage, error);\n\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\nimport { CallbackContext } from './callback-context';\nimport { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';\n\n@Injectable()\nexport class FlowsService {\n  constructor(\n    private readonly codeFlowCallbackHandlerService: CodeFlowCallbackHandlerService,\n    private readonly implicitFlowCallbackHandlerService: ImplicitFlowCallbackHandlerService,\n    private readonly historyJwtKeysCallbackHandlerService: HistoryJwtKeysCallbackHandlerService,\n    private readonly userHandlerService: UserCallbackHandlerService,\n    private readonly stateValidationCallbackHandlerService: StateValidationCallbackHandlerService,\n    private readonly refreshSessionCallbackHandlerService: RefreshSessionCallbackHandlerService,\n    private readonly refreshTokenCallbackHandlerService: RefreshTokenCallbackHandlerService\n  ) {}\n\n  processCodeFlowCallback(urlToCheck: string, configId: string): Observable<CallbackContext> {\n    return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck, configId).pipe(\n      concatMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext, configId)),\n      concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, configId)),\n      concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, configId)),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, configId))\n    );\n  }\n\n  processSilentRenewCodeFlowCallback(firstContext: CallbackContext, configId: string): Observable<CallbackContext> {\n    return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext, configId).pipe(\n      concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, configId)),\n      concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, configId)),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, configId))\n    );\n  }\n\n  processImplicitFlowCallback(configId: string, hash?: string): Observable<CallbackContext> {\n    return this.implicitFlowCallbackHandlerService.implicitFlowCallback(configId, hash).pipe(\n      concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, configId)),\n      concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, configId)),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, configId))\n    );\n  }\n\n  processRefreshToken(configId: string, customParamsRefresh?: { [key: string]: string | number | boolean }): Observable<CallbackContext> {\n    return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens(configId).pipe(\n      concatMap((callbackContext) =>\n        this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, configId, customParamsRefresh)\n      ),\n      concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, configId)),\n      concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, configId)),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, configId))\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class IntervalService {\n  runTokenValidationRunning: Subscription = null;\n\n  constructor(private zone: NgZone) {}\n\n  stopPeriodicTokenCheck(): void {\n    if (this.runTokenValidationRunning) {\n      this.runTokenValidationRunning.unsubscribe();\n      this.runTokenValidationRunning = null;\n    }\n  }\n\n  startPeriodicTokenCheck(repeatAfterSeconds: number): Observable<unknown> {\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\n\n    return new Observable((subscriber) => {\n      let intervalId;\n      this.zone.runOutsideAngular(() => {\n        intervalId = setInterval(() => this.zone.run(() => subscriber.next()), millisecondsDelayBetweenTokenCheck);\n      });\n\n      return (): void => {\n        clearInterval(intervalId);\n      };\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervalService } from './interval.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ImplicitFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router,\n    private flowsDataService: FlowsDataService,\n    private intervalService: IntervalService\n  ) {}\n\n  authenticatedImplicitFlowCallback(configId: string, hash?: string): Observable<CallbackContext> {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(configId);\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } =\n      this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return this.flowsService.processImplicitFlowCallback(configId, hash).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigateByUrl(postLoginRoute);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning(configId);\n        this.intervalService.stopPeriodicTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigateByUrl(unauthorizedRoute);\n        }\n\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n    if (this.isIFrameElement(iFrameOnParent)) {\n      return iFrameOnParent;\n    }\n\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n    if (this.isIFrameElement(iFrameOnSelf)) {\n      return iFrameOnSelf;\n    }\n\n    return null;\n  }\n\n  addIFrameToWindowBody(identifier: string, configId: string): HTMLIFrameElement {\n    const sessionIframe = this.doc.createElement('iframe');\n    sessionIframe.id = identifier;\n    sessionIframe.title = identifier;\n    this.loggerService.logDebug(configId, sessionIframe);\n    sessionIframe.style.display = 'none';\n    this.doc.body.appendChild(sessionIframe);\n\n    return sessionIframe;\n  }\n\n  private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n    try {\n      const iFrameElement = this.doc.defaultView.parent.document.getElementById(identifier);\n      if (this.isIFrameElement(iFrameElement)) {\n        return iFrameElement;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n    const iFrameElement = this.doc.getElementById(identifier);\n    if (this.isIFrameElement(iFrameElement)) {\n      return iFrameElement;\n    }\n\n    return null;\n  }\n\n  private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n    return !!element && element instanceof HTMLIFrameElement;\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n  private checkSessionReceived = false;\n  private scheduledHeartBeatRunning: any;\n  private lastIFrameRefresh = 0;\n  private outstandingMessages = 0;\n  private heartBeatInterval = 3000;\n  private iframeRefreshInterval = 60000;\n  private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n  get checkSessionChanged$(): Observable<boolean> {\n    return this.checkSessionChangedInternal$.asObservable();\n  }\n\n  constructor(\n    private storagePersistenceService: StoragePersistenceService,\n    private loggerService: LoggerService,\n    private iFrameService: IFrameService,\n    private eventService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private zone: NgZone\n  ) {}\n\n  isCheckSessionConfigured(configId: string): boolean {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return startCheckSession;\n  }\n\n  start(configId: string): void {\n    if (!!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration(configId);\n    this.pollServerSession(clientId, configId);\n  }\n\n  stop(): void {\n    if (!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    this.clearScheduledHeartBeat();\n    this.checkSessionReceived = false;\n  }\n\n  serverStateChanged(configId: string): boolean {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return startCheckSession && this.checkSessionReceived;\n  }\n\n  getExistingIframe(): HTMLIFrameElement {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n  }\n\n  private init(configId: string): Observable<any> {\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n      return of(undefined);\n    }\n\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning(configId, 'CheckSession - init check session: authWellKnownEndpoints is undefined. Returning.');\n\n      return of();\n    }\n\n    const existingIframe = this.getOrCreateIframe(configId);\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\n\n    if (checkSessionIframe) {\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\n    } else {\n      this.loggerService.logWarning(configId, 'CheckSession - init check session: checkSessionIframe is not configured to run');\n    }\n\n    return new Observable((observer) => {\n      existingIframe.onload = (): void => {\n        this.lastIFrameRefresh = Date.now();\n        observer.next();\n        observer.complete();\n      };\n    });\n  }\n\n  private pollServerSession(clientId: string, configId: string): void {\n    this.outstandingMessages = 0;\n    const pollServerSessionRecur = (): void => {\n      this.init(configId)\n        .pipe(take(1))\n        .subscribe(() => {\n          const existingIframe = this.getExistingIframe();\n          if (existingIframe && clientId) {\n            this.loggerService.logDebug(configId, `CheckSession - clientId : '${clientId}' - existingIframe: '${existingIframe}'`);\n            const sessionState = this.storagePersistenceService.read('session_state', configId);\n            const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n            if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\n              const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;\n              this.outstandingMessages++;\n              existingIframe.contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);\n            } else {\n              this.loggerService.logDebug(\n                configId,\n                `CheckSession - session_state is '${sessionState}' - AuthWellKnownEndPoints is '${JSON.stringify(\n                  authWellKnownEndPoints,\n                  null,\n                  2\n                )}'`\n              );\n              this.checkSessionChangedInternal$.next(true);\n            }\n          } else {\n            this.loggerService.logWarning(\n              configId,\n              `CheckSession - OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist:\n               clientId : '${clientId}' - existingIframe: '${existingIframe}'`\n            );\n          }\n\n          // after sending three messages with no response, fail.\n          if (this.outstandingMessages > 3) {\n            this.loggerService.logError(\n              configId,\n              `CheckSession - OidcSecurityCheckSession not receiving check session response messages.\n                            Outstanding messages: '${this.outstandingMessages}'. Server unreachable?`\n            );\n          }\n\n          this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval);\n          });\n        });\n    };\n\n    pollServerSessionRecur();\n  }\n\n  private clearScheduledHeartBeat(): void {\n    clearTimeout(this.scheduledHeartBeatRunning);\n    this.scheduledHeartBeatRunning = null;\n  }\n\n  private messageHandler(configId: string, e: any): void {\n    const existingIFrame = this.getExistingIframe();\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);\n\n    this.outstandingMessages = 0;\n\n    if (existingIFrame && startsWith && e.source === existingIFrame.contentWindow) {\n      if (e.data === 'error') {\n        this.loggerService.logWarning(configId, 'CheckSession - error from check session messageHandler');\n      } else if (e.data === 'changed') {\n        this.loggerService.logDebug(configId, `CheckSession - ${e} from check session messageHandler`);\n        this.checkSessionReceived = true;\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.checkSessionChangedInternal$.next(true);\n      } else {\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.loggerService.logDebug(configId, `CheckSession - ${e.data} from check session messageHandler`);\n      }\n    }\n  }\n\n  private bindMessageEventToIframe(configId: string): void {\n    const iframeMessageEvent = this.messageHandler.bind(this, configId);\n    window.addEventListener('message', iframeMessageEvent, false);\n  }\n\n  private getOrCreateIframe(configId: string): HTMLIFrameElement {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      const frame = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER, configId);\n      this.bindMessageEventToIframe(configId);\n\n      return frame;\n    }\n\n    return existingIframe;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable()\nexport class CurrentUrlService {\n  constructor(@Inject(DOCUMENT) private doc: any) {}\n\n  getStateParamFromCurrentUrl(): string {\n    const currentUrl = this.getCurrentUrl();\n    const parsedUrl = new URL(currentUrl);\n    const urlParams = new URLSearchParams(parsedUrl.search);\n    const stateFromUrl = urlParams.get('state');\n\n    return stateFromUrl;\n  }\n\n  currentUrlHasStateParam(): boolean {\n    return !!this.getStateParamFromCurrentUrl();\n  }\n\n  getCurrentUrl(): string {\n    return this.doc.defaultView.location.toString();\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\nimport { IntervalService } from '../callback/interval.service';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n  private refreshSessionWithIFrameCompletedInternal$ = new Subject<CallbackContext>();\n\n  get refreshSessionWithIFrameCompleted$(): Observable<CallbackContext> {\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\n  }\n\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private iFrameService: IFrameService,\n    private flowsService: FlowsService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsDataService: FlowsDataService,\n    private authStateService: AuthStateService,\n    private loggerService: LoggerService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private intervalService: IntervalService\n  ) {}\n\n  getOrCreateIframe(configId: string): HTMLIFrameElement {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER, configId);\n    }\n\n    return existingIframe;\n  }\n\n  isSilentRenewConfigured(configId: string): boolean {\n    const { useRefreshToken, silentRenew } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return !useRefreshToken && silentRenew;\n  }\n\n  codeFlowCallbackSilentRenewIframe(urlParts: any, configId: string): Observable<CallbackContext> {\n    const params = new HttpParams({\n      fromString: urlParts[1],\n    });\n\n    const error = params.get('error');\n\n    if (error) {\n      this.authStateService.updateAndPublishAuthState({\n        isAuthenticated: false,\n        validationResult: ValidationResult.LoginRequired,\n        isRenewProcess: true,\n      });\n      this.resetAuthDataService.resetAuthorizationData(configId);\n      this.flowsDataService.setNonce('', configId);\n      this.intervalService.stopPeriodicTokenCheck();\n\n      return throwError(error);\n    }\n\n    const code = params.get('code');\n    const state = params.get('state');\n    const sessionState = params.get('session_state');\n\n    const callbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: true,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext, configId).pipe(\n      catchError((errorFromFlow) => {\n        this.intervalService.stopPeriodicTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData(configId);\n\n        return throwError(errorFromFlow);\n      })\n    );\n  }\n\n  silentRenewEventHandler(e: CustomEvent, configId: string): void {\n    this.loggerService.logDebug(configId, 'silentRenewEventHandler');\n    if (!e.detail) {\n      return;\n    }\n\n    let callback$ = of(null);\n\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configId);\n\n    if (isCodeFlow) {\n      const urlParts = e.detail.toString().split('?');\n      callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts, configId);\n    } else {\n      callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(configId, e.detail);\n    }\n\n    callback$.subscribe(\n      (callbackContext) => {\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\n        this.flowsDataService.resetSilentRenewRunning(configId);\n      },\n      (err: any) => {\n        this.loggerService.logError(configId, 'Error: ' + err);\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\n        this.flowsDataService.resetSilentRenewRunning(configId);\n      }\n    );\n  }\n\n  private getExistingIframe(): HTMLIFrameElement {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervalService } from './interval.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CodeFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private flowsDataService: FlowsDataService,\n    private intervalService: IntervalService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router\n  ) {}\n\n  authenticatedCallbackWithCode(urlToCheck: string, configId: string): Observable<CallbackContext> {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(configId);\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } =\n      this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return this.flowsService.processCodeFlowCallback(urlToCheck, configId).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigateByUrl(postLoginRoute);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning(configId);\n        this.intervalService.stopPeriodicTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigateByUrl(unauthorizedRoute);\n        }\n\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { CodeFlowCallbackService } from './code-flow-callback.service';\nimport { ImplicitFlowCallbackService } from './implicit-flow-callback.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CallbackService {\n  private stsCallbackInternal$ = new Subject();\n\n  get stsCallback$(): Observable<unknown> {\n    return this.stsCallbackInternal$.asObservable();\n  }\n\n  constructor(\n    private urlService: UrlService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private codeFlowCallbackService: CodeFlowCallbackService\n  ) {}\n\n  isCallback(currentUrl: string): boolean {\n    return this.urlService.isCallbackFromSts(currentUrl);\n  }\n\n  handleCallbackAndFireEvents(currentCallbackUrl: string, configId: string): Observable<CallbackContext> {\n    let callback$: Observable<any>;\n\n    if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {\n      callback$ = this.codeFlowCallbackService.authenticatedCallbackWithCode(currentCallbackUrl, configId);\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow(configId)) {\n      callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(configId);\n    }\n\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, retry } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\n\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n\n@Injectable()\nexport class AuthWellKnownDataService {\n  constructor(private readonly http: DataService) {}\n\n  getWellKnownEndPointsFromUrl(authWellknownEndpoint: string, configId: string): Observable<AuthWellKnownEndpoints> {\n    return this.getWellKnownDocument(authWellknownEndpoint, configId).pipe(\n      map(\n        (wellKnownEndpoints) =>\n          ({\n            issuer: wellKnownEndpoints.issuer,\n            jwksUri: wellKnownEndpoints.jwks_uri,\n            authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n            tokenEndpoint: wellKnownEndpoints.token_endpoint,\n            userInfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n            endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n            checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n            revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n            introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n            parEndpoint: wellKnownEndpoints.pushed_authorization_request_endpoint,\n          } as AuthWellKnownEndpoints)\n      )\n    );\n  }\n\n  private getWellKnownDocument(wellKnownEndpoint: string, configId: string): Observable<any> {\n    let url = wellKnownEndpoint;\n\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\n    }\n\n    return this.http.get<any>(url, configId).pipe(retry(2));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { EventTypes } from '../../public-events/event-types';\nimport { PublicEventsService } from '../../public-events/public-events.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { AuthWellKnownDataService } from './auth-well-known-data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\n\n@Injectable()\nexport class AuthWellKnownService {\n  constructor(\n    private publicEventsService: PublicEventsService,\n    private dataService: AuthWellKnownDataService,\n    private storagePersistenceService: StoragePersistenceService\n  ) {}\n\n  getAuthWellKnownEndPoints(authWellknownEndpointUrl: string, configId: string): Observable<AuthWellKnownEndpoints> {\n    const alreadySavedWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n    if (!!alreadySavedWellKnownEndpoints) {\n      return of(alreadySavedWellKnownEndpoints);\n    }\n\n    return this.getWellKnownEndPointsFromUrl(authWellknownEndpointUrl, configId).pipe(\n      tap((mappedWellKnownEndpoints) => this.storeWellKnownEndpoints(configId, mappedWellKnownEndpoints)),\n      catchError((error) => {\n        this.publicEventsService.fireEvent(EventTypes.ConfigLoadingFailed, null);\n\n        return throwError(error);\n      })\n    );\n  }\n\n  storeWellKnownEndpoints(configId: string, mappedWellKnownEndpoints: AuthWellKnownEndpoints): void {\n    this.storagePersistenceService.write('authWellKnownEndPoints', mappedWellKnownEndpoints, configId);\n  }\n\n  private getWellKnownEndPointsFromUrl(authWellknownEndpointUrl: string, configId: string): Observable<AuthWellKnownEndpoints> {\n    return this.dataService.getWellKnownEndPointsFromUrl(authWellknownEndpointUrl, configId);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoggerService } from '../logging/logger.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { SilentRenewService } from './silent-renew.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionIframeService {\n  private renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: any,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private silentRenewService: SilentRenewService,\n    rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  refreshSessionWithIframe(configId: string, customParams?: { [key: string]: string | number | boolean }): Observable<boolean> {\n    this.loggerService.logDebug(configId, 'BEGIN refresh session Authorize Iframe renew');\n    const url = this.urlService.getRefreshSessionSilentRenewUrl(configId, customParams);\n\n    return this.sendAuthorizeRequestUsingSilentRenew(url, configId);\n  }\n\n  private sendAuthorizeRequestUsingSilentRenew(url: string, configId: string): Observable<boolean> {\n    const sessionIframe = this.silentRenewService.getOrCreateIframe(configId);\n    this.initSilentRenewRequest(configId);\n    this.loggerService.logDebug(configId, 'sendAuthorizeRequestUsingSilentRenew for URL:' + url);\n\n    return new Observable((observer) => {\n      const onLoadHandler = (): void => {\n        sessionIframe.removeEventListener('load', onLoadHandler);\n        this.loggerService.logDebug(configId, 'removed event listener from IFrame');\n        observer.next(true);\n        observer.complete();\n      };\n      sessionIframe.addEventListener('load', onLoadHandler);\n      sessionIframe.contentWindow.location.replace(url);\n    });\n  }\n\n  private initSilentRenewRequest(configId: string): void {\n    const instanceId = Math.random();\n\n    const initDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-init', (e: CustomEvent) => {\n      if (e.detail !== instanceId) {\n        initDestroyHandler();\n        renewDestroyHandler();\n      }\n    });\n    const renewDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-message', (e) =>\n      this.silentRenewService.silentRenewEventHandler(e, configId)\n    );\n\n    this.doc.defaultView.dispatchEvent(\n      new CustomEvent('oidc-silent-renew-init', {\n        detail: instanceId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { IntervalService } from './interval.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionRefreshTokenService {\n  constructor(\n    private loggerService: LoggerService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsService: FlowsService,\n    private intervalService: IntervalService\n  ) {}\n\n  refreshSessionWithRefreshTokens(\n    configId: string,\n    customParamsRefresh?: { [key: string]: string | number | boolean }\n  ): Observable<CallbackContext> {\n    this.loggerService.logDebug(configId, 'BEGIN refresh session Authorize');\n\n    return this.flowsService.processRefreshToken(configId, customParamsRefresh).pipe(\n      catchError((error) => {\n        this.intervalService.stopPeriodicTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData(configId);\n\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of, throwError, TimeoutError, timer } from 'rxjs';\nimport { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { AuthWellKnownService } from '../config/auth-well-known/auth-well-known.service';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { SilentRenewService } from '../iframe/silent-renew.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { LoginResponse } from '../login/login-response';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { UserService } from '../user-data/user.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\nexport const MAX_RETRY_ATTEMPTS = 3;\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionService {\n  constructor(\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private silentRenewService: SilentRenewService,\n    private authStateService: AuthStateService,\n    private authWellKnownService: AuthWellKnownService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private storagePersistenceService: StoragePersistenceService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\n    private userService: UserService\n  ) {}\n\n  userForceRefreshSession(configId: string, extraCustomParams?: { [key: string]: string | number | boolean }): Observable<LoginResponse> {\n    this.persistCustomParams(extraCustomParams, configId);\n\n    return this.forceRefreshSession(configId, extraCustomParams);\n  }\n\n  forceRefreshSession(configId: string, extraCustomParams?: { [key: string]: string | number | boolean }): Observable<LoginResponse> {\n    const { customParamsRefreshTokenRequest } = this.configurationProvider.getOpenIDConfiguration();\n\n    const mergedParams = { ...customParamsRefreshTokenRequest, ...extraCustomParams };\n\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {\n      return this.startRefreshSession(configId, mergedParams).pipe(\n        map(() => {\n          const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);\n          if (isAuthenticated) {\n            return {\n              idToken: this.authStateService.getIdToken(configId),\n              accessToken: this.authStateService.getAccessToken(configId),\n              userData: this.userService.getUserDataFromStore(configId),\n              isAuthenticated,\n              configId,\n            } as LoginResponse;\n          }\n\n          return null;\n        })\n      );\n    }\n\n    const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration(configId);\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\n\n    return forkJoin([\n      this.startRefreshSession(configId, extraCustomParams),\n      this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),\n    ]).pipe(\n      timeout(timeOutTime),\n      retryWhen(this.timeoutRetryStrategy.bind(this)),\n      map(([_, callbackContext]) => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);\n        if (isAuthenticated) {\n          return {\n            idToken: callbackContext?.authResult?.id_token,\n            accessToken: callbackContext?.authResult?.access_token,\n            userData: this.userService.getUserDataFromStore(configId),\n            isAuthenticated,\n            configId,\n          };\n        }\n\n        return null;\n      })\n    );\n  }\n\n  private persistCustomParams(extraCustomParams: { [key: string]: string | number | boolean }, configId: string): void {\n    const { useRefreshToken } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (extraCustomParams) {\n      if (useRefreshToken) {\n        this.storagePersistenceService.write('storageCustomParamsRefresh', extraCustomParams, configId);\n      } else {\n        this.storagePersistenceService.write('storageCustomParamsAuthRequest', extraCustomParams, configId);\n      }\n    }\n  }\n\n  private startRefreshSession(\n    configId: string,\n    extraCustomParams?: { [key: string]: string | number | boolean }\n  ): Observable<boolean | CallbackContext | null> {\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(configId);\n    this.loggerService.logDebug(configId, `Checking: silentRenewRunning: ${isSilentRenewRunning}`);\n    const shouldBeExecuted = !isSilentRenewRunning;\n\n    if (!shouldBeExecuted) {\n      return of(null);\n    }\n\n    const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId) || {};\n\n    if (!authWellknownEndpointUrl) {\n      this.loggerService.logError(configId, 'no authWellKnownEndpoint given!');\n\n      return of(null);\n    }\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId).pipe(\n      switchMap(() => {\n        this.flowsDataService.setSilentRenewRunning(configId);\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {\n          // Refresh Session using Refresh tokens\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(configId, extraCustomParams);\n        }\n\n        return this.refreshSessionIframeService.refreshSessionWithIframe(configId, extraCustomParams);\n      })\n    );\n  }\n\n  private timeoutRetryStrategy(errorAttempts: Observable<any>, configId: string): Observable<number> {\n    return errorAttempts.pipe(\n      mergeMap((error, index) => {\n        const scalingDuration = 1000;\n        const currentAttempt = index + 1;\n\n        if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {\n          return throwError(error);\n        }\n\n        this.loggerService.logDebug(configId, `forceRefreshSession timeout. Attempt #${currentAttempt}`);\n\n        this.flowsDataService.resetSilentRenewRunning(configId);\n\n        return timer(currentAttempt * scalingDuration);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { OpenIdConfiguration } from '../config/openid-configuration';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { UserService } from '../user-data/user.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { IntervalService } from './interval.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PeriodicallyTokenCheckService {\n  constructor(\n    private resetAuthDataService: ResetAuthDataService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private userService: UserService,\n    private authStateService: AuthStateService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\n    private intervalService: IntervalService,\n    private storagePersistenceService: StoragePersistenceService,\n    private publicEventsService: PublicEventsService\n  ) {}\n\n  startTokenValidationPeriodically(): void {\n    const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled();\n    if (configsWithSilentRenewEnabled.length <= 0) {\n      return;\n    }\n\n    const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);\n\n    if (!!this.intervalService.runTokenValidationRunning) {\n      return;\n    }\n\n    // START PERIODICALLY CHECK ONCE AND CHECK EACH CONFIG WHICH HAS IT ENABLED\n    const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(refreshTimeInSeconds).pipe(\n      switchMap(() => {\n        const objectWithConfigIdsAndRefreshEvent = {};\n        configsWithSilentRenewEnabled.forEach(({ configId }) => {\n          objectWithConfigIdsAndRefreshEvent[configId] = this.getRefreshEvent(configId);\n        });\n\n        return forkJoin(objectWithConfigIdsAndRefreshEvent);\n      })\n    );\n\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$.subscribe((objectWithConfigIds) => {\n      for (const [key, _] of Object.entries(objectWithConfigIds)) {\n        this.loggerService.logDebug(key, 'silent renew, periodic check finished!');\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(key)) {\n          this.flowsDataService.resetSilentRenewRunning(key);\n        }\n      }\n    });\n  }\n\n  private getRefreshEvent(configId: string): Observable<any> {\n    const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(configId);\n\n    if (!shouldStartRefreshEvent) {\n      return of(null);\n    }\n\n    const refreshEvent$ = this.createRefreshEventForConfig(configId);\n\n    this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);\n\n    const refreshEventWithErrorHandler$ = refreshEvent$.pipe(\n      catchError((error) => {\n        this.loggerService.logError(configId, 'silent renew failed!', error);\n        this.flowsDataService.resetSilentRenewRunning(configId);\n\n        return throwError(error);\n      })\n    );\n\n    return refreshEventWithErrorHandler$;\n  }\n\n  private getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled: OpenIdConfiguration[]): number {\n    const result = configsWithSilentRenewEnabled.reduce((prev, curr) =>\n      prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr\n    );\n\n    return result.tokenRefreshInSeconds;\n  }\n\n  private getConfigsWithSilentRenewEnabled(): OpenIdConfiguration[] {\n    return this.configurationProvider.getAllConfigurations().filter((x) => x.silentRenew);\n  }\n\n  private createRefreshEventForConfig(configId: string): Observable<any> {\n    this.loggerService.logDebug(configId, 'starting silent renew...');\n\n    const config = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!config?.silentRenew) {\n      this.resetAuthDataService.resetAuthorizationData(configId);\n\n      return of(null);\n    }\n\n    this.flowsDataService.setSilentRenewRunning(configId);\n\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(configId)) {\n      // Retrieve Dynamically Set Custom Params for refresh body\n      const customParamsRefresh: { [key: string]: string | number | boolean } =\n        this.storagePersistenceService.read('storageCustomParamsRefresh', configId) || {};\n\n      const { customParamsRefreshTokenRequest } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n      const mergedParams = { ...customParamsRefreshTokenRequest, ...customParamsRefresh };\n\n      // Refresh Session using Refresh tokens\n      return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(configId, mergedParams);\n    }\n\n    // Retrieve Dynamically Set Custom Params\n    const customParams: { [key: string]: string | number | boolean } = this.storagePersistenceService.read(\n      'storageCustomParamsAuthRequest',\n      configId\n    );\n\n    return this.refreshSessionIframeService.refreshSessionWithIframe(configId, customParams);\n  }\n\n  private shouldStartPeriodicallyCheckForConfig(configId: string): boolean {\n    const idToken = this.authStateService.getIdToken(configId);\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(configId);\n    const userDataFromStore = this.userService.getUserDataFromStore(configId);\n\n    this.loggerService.logDebug(\n      configId,\n      `Checking: silentRenewRunning: ${isSilentRenewRunning} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`\n    );\n\n    const shouldBeExecuted = !!userDataFromStore && !isSilentRenewRunning && !!idToken;\n\n    if (!shouldBeExecuted) {\n      return false;\n    }\n\n    const idTokenStillValid = this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(configId);\n    const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(configId);\n\n    if (!idTokenStillValid && !accessTokenHasExpired) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { PopupOptions } from './popup-options';\nimport { PopupResult } from './popup-result';\n\n@Injectable({ providedIn: 'root' })\nexport class PopUpService {\n  private STORAGE_IDENTIFIER = 'popupauth';\n  private popUp: Window;\n  private handle: number;\n  private resultInternal$ = new Subject<PopupResult>();\n\n  get result$(): Observable<PopupResult> {\n    return this.resultInternal$.asObservable();\n  }\n\n  isCurrentlyInPopup(): boolean {\n    if (this.canAccessSessionStorage()) {\n      const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);\n\n      return !!window.opener && window.opener !== window && !!popup;\n    }\n\n    return false;\n  }\n\n  openPopUp(url: string, popupOptions?: PopupOptions): void {\n    const optionsToPass = this.getOptions(popupOptions);\n    this.popUp = window.open(url, '_blank', optionsToPass);\n    this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');\n\n    const listener = (event: MessageEvent): void => {\n      if (!event?.data || typeof event.data !== 'string') {\n        return;\n      }\n\n      this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });\n\n      this.cleanUp(listener);\n    };\n\n    window.addEventListener('message', listener, false);\n\n    this.handle = window.setInterval(() => {\n      if (this.popUp.closed) {\n        this.resultInternal$.next({ userClosed: true });\n\n        this.cleanUp(listener);\n      }\n    }, 200);\n  }\n\n  sendMessageToMainWindow(url: string): void {\n    if (window.opener) {\n      this.sendMessage(url, window.location.href);\n    }\n  }\n\n  private cleanUp(listener: any): void {\n    window.removeEventListener('message', listener, false);\n\n    window.clearInterval(this.handle);\n\n    if (this.popUp) {\n      this.popUp.sessionStorage?.removeItem(this.STORAGE_IDENTIFIER);\n      this.popUp.close();\n      this.popUp = null;\n    }\n  }\n\n  private sendMessage(url: string, href: string): void {\n    window.opener.postMessage(url, href);\n  }\n\n  private getOptions(popupOptions?: PopupOptions): string {\n    const popupDefaultOptions: PopupOptions = { width: 500, height: 500, left: 50, top: 50 };\n\n    const options: PopupOptions = { ...popupDefaultOptions, ...(popupOptions || {}) };\n    const left: number = window.screenLeft + (window.outerWidth - options.width) / 2;\n    const top: number = window.screenTop + (window.outerHeight - options.height) / 2;\n    options.left = left;\n    options.top = top;\n\n    return Object.entries(options)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join(',');\n  }\n\n  private canAccessSessionStorage(): boolean {\n    return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { AuthStateService } from './auth-state/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login.service';\nimport { CallbackService } from './callback/callback.service';\nimport { PeriodicallyTokenCheckService } from './callback/periodically-token-check.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { OpenIdConfiguration } from './config/openid-configuration';\nimport { ConfigurationProvider } from './config/provider/config.provider';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LoginResponse } from './login/login-response';\nimport { PopUpService } from './login/popup/popup.service';\nimport { StoragePersistenceService } from './storage/storage-persistence.service';\nimport { UserService } from './user-data/user.service';\nimport { CurrentUrlService } from './utils/url/current-url.service';\n\n@Injectable()\nexport class CheckAuthService {\n  constructor(\n    private checkSessionService: CheckSessionService,\n    private currentUrlService: CurrentUrlService,\n    private silentRenewService: SilentRenewService,\n    private userService: UserService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private callbackService: CallbackService,\n    private refreshSessionService: RefreshSessionService,\n    private periodicallyTokenCheckService: PeriodicallyTokenCheckService,\n    private popupService: PopUpService,\n    private autoLoginService: AutoLoginService,\n    private storagePersistenceService: StoragePersistenceService\n  ) {}\n\n  checkAuth(passedConfigId?: string, url?: string): Observable<LoginResponse> {\n    if (this.currentUrlService.currentUrlHasStateParam()) {\n      const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();\n      const config = this.getConfigurationWithUrlState(stateParamFromUrl);\n\n      if (!config) {\n        return throwError(`could not find matching config for state ${stateParamFromUrl}`);\n      }\n\n      return this.checkAuthWithConfig(config, url);\n    }\n\n    if (!!passedConfigId) {\n      const config = this.configurationProvider.getOpenIDConfiguration(passedConfigId);\n\n      return this.checkAuthWithConfig(config, url);\n    }\n\n    const onlyExistingConfig = this.configurationProvider.getOpenIDConfiguration();\n\n    return this.checkAuthWithConfig(onlyExistingConfig, url);\n  }\n\n  checkAuthMultiple(passedConfigId?: string, url?: string): Observable<LoginResponse[]> {\n    if (this.currentUrlService.currentUrlHasStateParam()) {\n      const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();\n      const config = this.getConfigurationWithUrlState(stateParamFromUrl);\n\n      if (!config) {\n        return throwError(`could not find matching config for state ${stateParamFromUrl}`);\n      }\n\n      return this.composeMultipleLoginResults(config, url);\n    }\n\n    if (!!passedConfigId) {\n      const config = this.configurationProvider.getOpenIDConfiguration(passedConfigId);\n\n      if (!config) {\n        return throwError(`could not find matching config for id ${passedConfigId}`);\n      }\n\n      return this.composeMultipleLoginResults(config, url);\n    }\n\n    const allConfigs = this.configurationProvider.getAllConfigurations();\n    const allChecks$ = allConfigs.map((x) => this.checkAuthWithConfig(x, url));\n\n    return forkJoin(allChecks$);\n  }\n\n  checkAuthIncludingServer(configId: string): Observable<LoginResponse> {\n    const config = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    return this.checkAuthWithConfig(config).pipe(\n      switchMap((loginResponse) => {\n        const { isAuthenticated } = loginResponse;\n\n        if (isAuthenticated) {\n          return of(loginResponse);\n        }\n\n        return this.refreshSessionService.forceRefreshSession(configId).pipe(\n          tap((loginResponseAfterRefreshSession) => {\n            if (loginResponseAfterRefreshSession?.isAuthenticated) {\n              this.startCheckSessionAndValidation(configId);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private checkAuthWithConfig(config: OpenIdConfiguration, url?: string): Observable<LoginResponse> {\n    const { configId, authority } = config;\n\n    if (!this.configurationProvider.hasAsLeastOneConfig()) {\n      const errorMessage = 'Please provide at least one configuration before setting up the module';\n      this.loggerService.logError(configId, errorMessage);\n\n      return of({ isAuthenticated: false, errorMessage, userData: null, idToken: null, accessToken: null, configId });\n    }\n\n    const currentUrl = url || this.currentUrlService.getCurrentUrl();\n\n    this.loggerService.logDebug(configId, `Working with config '${configId}' using ${authority}`);\n\n    if (this.popupService.isCurrentlyInPopup()) {\n      this.popupService.sendMessageToMainWindow(currentUrl);\n\n      return of(null);\n    }\n\n    const isCallback = this.callbackService.isCallback(currentUrl);\n\n    this.loggerService.logDebug(configId, 'currentUrl to check auth with: ', currentUrl);\n\n    const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl, configId) : of(null);\n\n    return callback$.pipe(\n      map(() => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);\n        if (isAuthenticated) {\n          this.startCheckSessionAndValidation(configId);\n\n          if (!isCallback) {\n            this.authStateService.setAuthenticatedAndFireEvent();\n            this.userService.publishUserDataIfExists(configId);\n          }\n        }\n\n        this.loggerService.logDebug(configId, 'checkAuth completed - firing events now. isAuthenticated: ' + isAuthenticated);\n\n        return {\n          isAuthenticated,\n          userData: this.userService.getUserDataFromStore(configId),\n          accessToken: this.authStateService.getAccessToken(configId),\n          idToken: this.authStateService.getIdToken(configId),\n          configId,\n        };\n      }),\n      tap(({ isAuthenticated }) => {\n        if (isAuthenticated) {\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(configId);\n        }\n      }),\n      catchError((errorMessage) => {\n        this.loggerService.logError(configId, errorMessage);\n\n        return of({ isAuthenticated: false, errorMessage, userData: null, idToken: null, accessToken: null, configId });\n      })\n    );\n  }\n\n  private startCheckSessionAndValidation(configId: string): void {\n    if (this.checkSessionService.isCheckSessionConfigured(configId)) {\n      this.checkSessionService.start(configId);\n    }\n\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically();\n\n    if (this.silentRenewService.isSilentRenewConfigured(configId)) {\n      this.silentRenewService.getOrCreateIframe(configId);\n    }\n  }\n\n  private getConfigurationWithUrlState(stateFromUrl: string): OpenIdConfiguration {\n    const allConfigs = this.configurationProvider.getAllConfigurations();\n\n    for (const config of allConfigs) {\n      const storedState = this.storagePersistenceService.read('authStateControl', config.configId);\n\n      if (storedState === stateFromUrl) {\n        return config;\n      }\n    }\n\n    return null;\n  }\n\n  private composeMultipleLoginResults(activeConfig: OpenIdConfiguration, url?: string): Observable<LoginResponse[]> {\n    const allOtherConfigs = this.configurationProvider.getAllConfigurations().filter((x) => x.configId !== activeConfig.configId);\n\n    const currentConfigResult = this.checkAuthWithConfig(activeConfig, url);\n\n    const allOtherConfigResults = allOtherConfigs.map((config) => {\n      const { redirectUrl } = config;\n\n      return this.checkAuthWithConfig(config, redirectUrl);\n    });\n\n    return forkJoin([currentConfigResult, ...allOtherConfigResults]);\n  }\n}\n","import { LogLevel } from '../logging/log-level';\nimport { OpenIdConfiguration } from './openid-configuration';\n\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\n  authority: 'https://please_set',\n  authWellknownEndpointUrl: '',\n  authWellknownEndpoints: null,\n  redirectUrl: 'https://please_set',\n  clientId: 'please_set',\n  responseType: 'code',\n  scope: 'openid email profile',\n  hdParam: '',\n  postLogoutRedirectUri: 'https://please_set',\n  startCheckSession: false,\n  silentRenew: false,\n  silentRenewUrl: 'https://please_set',\n  silentRenewTimeoutInSeconds: 20,\n  renewTimeBeforeTokenExpiresInSeconds: 0,\n  useRefreshToken: false,\n  usePushedAuthorisationRequests: false,\n  ignoreNonceAfterRefresh: false,\n  postLoginRoute: '/',\n  forbiddenRoute: '/forbidden',\n  unauthorizedRoute: '/unauthorized',\n  autoUserInfo: true,\n  autoCleanStateAfterAuthentication: true,\n  triggerAuthorizationResultEvent: false,\n  logLevel: LogLevel.Warn,\n  issValidationOff: false,\n  historyCleanupOff: false,\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\n  disableIatOffsetValidation: false,\n  storage: null,\n  customParamsAuthRequest: {},\n  customParamsRefreshTokenRequest: {},\n  customParamsEndSessionRequest: {},\n  customParamsCodeRequest: {},\n  eagerLoadAuthWellKnownEndpoints: true,\n  disableRefreshIdTokenAuthTimeValidation: false,\n  enableIdTokenExpiredValidationInRenew: true,\n  tokenRefreshInSeconds: 4,\n  refreshTokenRetryInSeconds: 3,\n  ngswBypass: false,\n};\n","import { OpenIdConfiguration } from '../openid-configuration';\n\nexport interface Rule {\n  validate(passedConfig: OpenIdConfiguration): RuleValidationResult;\n}\n\nexport interface RuleValidationResult {\n  result: boolean;\n  messages: string[];\n  level: Level;\n}\n\nexport const POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null,\n};\n\nexport type Level = 'warning' | 'error';\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureAuthority = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.authority) {\n    return {\n      result: false,\n      messages: ['The authority URL MUST be provided in the configuration! '],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureClientId = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.clientId) {\n    return {\n      result: false,\n      messages: ['The clientId is required and missing from your config!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nconst createIdentifierToCheck = (passedConfig: OpenIdConfiguration): string => {\n  if (!passedConfig) {\n    return null;\n  }\n\n  const { authority, clientId, scope } = passedConfig;\n\n  return `${authority}${clientId}${scope}`;\n};\n\nconst arrayHasDuplicates = (array: string[]): boolean => new Set(array).size !== array.length;\n\nexport const ensureNoDuplicatedConfigsRule = (passedConfigs: OpenIdConfiguration[]): RuleValidationResult => {\n  const allIdentifiers = passedConfigs.map((x) => createIdentifierToCheck(x));\n\n  const someAreNull = allIdentifiers.some((x) => x === null);\n\n  if (someAreNull) {\n    return {\n      result: false,\n      messages: [`Please make sure you add an object with a 'config' property: ....({ config }) instead of ...(config)`],\n      level: 'error',\n    };\n  }\n\n  const hasDuplicates = arrayHasDuplicates(allIdentifiers);\n\n  if (hasDuplicates) {\n    return {\n      result: false,\n      messages: ['You added multiple configs with the same authority, clientId and scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureRedirectRule = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.redirectUrl) {\n    return {\n      result: false,\n      messages: ['The redirectURL is required and missing from your config'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureSilentRenewUrlWhenNoRefreshTokenUsed = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const usesSilentRenew = passedConfig.silentRenew;\n  const usesRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\n\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\n    return {\n      result: false,\n      messages: ['Please provide a silent renew URL if using renew and not refresh tokens'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const useOfflineScopeWithSilentRenew = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const hasRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenew = passedConfig.silentRenew;\n  const scope = passedConfig.scope || '';\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\n\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\n    return {\n      result: false,\n      messages: ['When using silent renew and refresh tokens please set the `offline_access` scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { ensureAuthority } from './ensure-authority.rule';\nimport { ensureClientId } from './ensure-clientId.rule';\nimport { ensureNoDuplicatedConfigsRule } from './ensure-no-duplicated-configs.rule';\nimport { ensureRedirectRule } from './ensure-redirect-url.rule';\nimport { ensureSilentRenewUrlWhenNoRefreshTokenUsed } from './ensure-silentRenewUrl-with-no-refreshtokens.rule';\nimport { useOfflineScopeWithSilentRenew } from './use-offline-scope-with-silent-renew.rule';\n\nexport const allRules = [\n  ensureAuthority,\n  useOfflineScopeWithSilentRenew,\n  ensureRedirectRule,\n  ensureClientId,\n  ensureSilentRenewUrlWhenNoRefreshTokenUsed,\n];\n\nexport const allMultipleConfigRules = [ensureNoDuplicatedConfigsRule];\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\nimport { OpenIdConfiguration } from '../openid-configuration';\nimport { Level, RuleValidationResult } from './rule';\nimport { allRules } from './rules';\nimport { allMultipleConfigRules } from './rules/index';\n\n@Injectable()\nexport class ConfigValidationService {\n  constructor(private loggerService: LoggerService) {}\n\n  validateConfigs(passedConfigs: OpenIdConfiguration[]): boolean {\n    return this.validateConfigsInternal(passedConfigs, allMultipleConfigRules);\n  }\n\n  validateConfig(passedConfig: OpenIdConfiguration): boolean {\n    return this.validateConfigInternal(passedConfig, allRules);\n  }\n\n  private validateConfigsInternal(passedConfigs: OpenIdConfiguration[], allRulesToUse: any[]): boolean {\n    const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));\n\n    let overallErrorCount = 0;\n    passedConfigs.forEach((passedConfig) => {\n      const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig?.configId);\n      overallErrorCount += errorCount;\n    });\n\n    return overallErrorCount === 0;\n  }\n\n  private validateConfigInternal(passedConfig: OpenIdConfiguration, allRulesToUse: any[]): boolean {\n    const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));\n\n    const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig.configId);\n\n    return errorCount === 0;\n  }\n\n  private processValidationResultsAndGetErrorCount(allValidationResults: RuleValidationResult[], configId: string): number {\n    const allMessages = allValidationResults.filter((x) => x.messages.length > 0);\n\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\n    allErrorMessages.forEach((message) => this.loggerService.logError(configId, message));\n    allWarnings.forEach((message) => this.loggerService.logWarning(configId, message));\n\n    return allErrorMessages.length;\n  }\n\n  private getAllMessagesOfType(type: Level, results: RuleValidationResult[]): string[] {\n    const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);\n\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n  get isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\n@Injectable()\nexport class DefaultSessionStorageService implements AbstractSecurityStorage {\n  public read(key: string): any {\n    return sessionStorage.getItem(key);\n  }\n\n  public write(key: string, value: any): void {\n    sessionStorage.setItem(key, value);\n  }\n\n  public remove(key: string): void {\n    sessionStorage.removeItem(key);\n  }\n\n  public clear(): void {\n    sessionStorage.clear();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\nimport { DefaultSessionStorageService } from './../storage/default-sessionstorage.service';\nimport { AuthWellKnownService } from './auth-well-known/auth-well-known.service';\nimport { DEFAULT_CONFIG } from './default-config';\nimport { OpenIdConfiguration } from './openid-configuration';\nimport { ConfigurationProvider } from './provider/config.provider';\nimport { ConfigValidationService } from './validation/config-validation.service';\n\n@Injectable()\nexport class OidcConfigService {\n  constructor(\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private storagePersistenceService: StoragePersistenceService,\n    private configValidationService: ConfigValidationService,\n    private platformProvider: PlatformProvider,\n    private defaultSessionStorageService: DefaultSessionStorageService\n  ) {}\n\n  withConfigs(passedConfigs: OpenIdConfiguration[]): Promise<OpenIdConfiguration[]> {\n    if (!this.configValidationService.validateConfigs(passedConfigs)) {\n      return Promise.resolve(null);\n    }\n\n    this.createUniqueIds(passedConfigs);\n    const allHandleConfigPromises = passedConfigs.map((x) => this.handleConfig(x));\n\n    return Promise.all(allHandleConfigPromises);\n  }\n\n  private createUniqueIds(passedConfigs: OpenIdConfiguration[]): void {\n    passedConfigs.forEach((config, index) => {\n      if (!config.configId) {\n        config.configId = `${index}-${config.clientId}`;\n      }\n    });\n  }\n\n  private handleConfig(passedConfig: OpenIdConfiguration): Promise<OpenIdConfiguration> {\n    return new Promise((resolve, reject) => {\n      if (!this.configValidationService.validateConfig(passedConfig)) {\n        this.loggerService.logError(passedConfig.configId, 'Validation of config rejected with errors. Config is NOT set.');\n        resolve(null);\n\n        return;\n      }\n\n      if (!passedConfig.authWellknownEndpointUrl) {\n        passedConfig.authWellknownEndpointUrl = passedConfig.authority;\n      }\n\n      const usedConfig = this.prepareConfig(passedConfig);\n      this.configurationProvider.setConfig(usedConfig);\n\n      const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', usedConfig.configId);\n      if (!!alreadyExistingAuthWellKnownEndpoints) {\n        usedConfig.authWellknownEndpoints = alreadyExistingAuthWellKnownEndpoints;\n        this.publicEventsService.fireEvent<OpenIdConfiguration>(EventTypes.ConfigLoaded, usedConfig);\n\n        resolve(usedConfig);\n\n        return;\n      }\n\n      const passedAuthWellKnownEndpoints = usedConfig.authWellknownEndpoints;\n\n      if (!!passedAuthWellKnownEndpoints) {\n        this.authWellKnownService.storeWellKnownEndpoints(usedConfig.configId, passedAuthWellKnownEndpoints);\n        usedConfig.authWellknownEndpoints = passedAuthWellKnownEndpoints;\n        this.publicEventsService.fireEvent<OpenIdConfiguration>(EventTypes.ConfigLoaded, usedConfig);\n\n        resolve(usedConfig);\n\n        return;\n      }\n\n      if (usedConfig.eagerLoadAuthWellKnownEndpoints) {\n        this.authWellKnownService\n          .getAuthWellKnownEndPoints(usedConfig.authWellknownEndpointUrl, usedConfig.configId)\n          .pipe(\n            catchError((error) => {\n              this.loggerService.logError(usedConfig.configId, 'Getting auth well known endpoints failed on start', error);\n\n              return throwError(error);\n            }),\n            tap((wellknownEndPoints) => {\n              usedConfig.authWellknownEndpoints = wellknownEndPoints;\n              this.publicEventsService.fireEvent<OpenIdConfiguration>(EventTypes.ConfigLoaded, usedConfig);\n            })\n          )\n          .subscribe(\n            () => resolve(usedConfig),\n\n            () => reject()\n          );\n      } else {\n        this.publicEventsService.fireEvent<OpenIdConfiguration>(EventTypes.ConfigLoaded, usedConfig);\n        resolve(usedConfig);\n      }\n    });\n  }\n\n  private prepareConfig(configuration: OpenIdConfiguration): OpenIdConfiguration {\n    const openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\n    this.setSpecialCases(openIdConfigurationInternal);\n    this.setStorage(openIdConfigurationInternal);\n\n    return openIdConfigurationInternal;\n  }\n\n  private setSpecialCases(currentConfig: OpenIdConfiguration): void {\n    if (!this.platformProvider.isBrowser) {\n      currentConfig.startCheckSession = false;\n      currentConfig.silentRenew = false;\n      currentConfig.useRefreshToken = false;\n      currentConfig.usePushedAuthorisationRequests = false;\n    }\n  }\n\n  private setStorage(currentConfig: OpenIdConfiguration): void {\n    if (currentConfig.storage) {\n      return;\n    }\n\n    if (this.hasBrowserStorage()) {\n      currentConfig.storage = this.defaultSessionStorageService;\n    } else {\n      currentConfig.storage = null;\n    }\n  }\n\n  private hasBrowserStorage(): boolean {\n    return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';\n  }\n}\n","import { Provider } from '@angular/core';\nimport { OpenIdConfiguration } from '../openid-configuration';\n\nexport class OpenIdConfigLoader {\n  loader?: Provider;\n}\n\nexport abstract class StsConfigLoader {\n  abstract loadConfigs(): Promise<OpenIdConfiguration>[];\n}\n\nexport class StsConfigStaticLoader implements StsConfigLoader {\n  constructor(private passedConfigs: OpenIdConfiguration | OpenIdConfiguration[]) {}\n\n  loadConfigs(): Promise<OpenIdConfiguration>[] {\n    if (Array.isArray(this.passedConfigs)) {\n      const allInstantStaticPromises = this.passedConfigs.map((x) => new Promise((resolve, _) => resolve(x)));\n\n      return allInstantStaticPromises;\n    }\n\n    const singleStaticPromise = new Promise((resolve, _) => resolve(this.passedConfigs));\n\n    return [singleStaticPromise];\n  }\n}\n\nexport class StsConfigHttpLoader implements StsConfigLoader {\n  constructor(private configs$: Promise<OpenIdConfiguration> | Promise<OpenIdConfiguration>[]) {}\n\n  loadConfigs(): Promise<OpenIdConfiguration>[] {\n    return Array.isArray(this.configs$) ? this.configs$ : [this.configs$];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\n\n@Injectable()\nexport class ClosestMatchingRouteService {\n  constructor(private configProvider: ConfigurationProvider) {}\n\n  getConfigIdForClosestMatchingRoute(route: string): ClosestMatchingRouteResult {\n    const allConfiguredRoutes = this.getAllConfiguredRoutes();\n\n    for (const routesWithConfig of allConfiguredRoutes) {\n      const allRoutesForConfig = routesWithConfig.routes;\n\n      for (const configuredRoute of allRoutesForConfig) {\n        if (route.startsWith(configuredRoute)) {\n          return {\n            matchingRoute: configuredRoute,\n            matchingConfigId: routesWithConfig.configId,\n          };\n        }\n      }\n    }\n\n    return {\n      matchingRoute: null,\n      matchingConfigId: null,\n    };\n  }\n\n  private getAllConfiguredRoutes(): ConfiguredRoutesWithConfig[] {\n    const allConfigurations = this.configProvider.getAllConfigurations();\n\n    return allConfigurations.map((x) => ({ routes: x.secureRoutes, configId: x.configId }));\n  }\n}\n\nexport interface ConfiguredRoutesWithConfig {\n  routes: string[];\n  configId: string;\n}\n\nexport interface ClosestMatchingRouteResult {\n  matchingRoute: string;\n  matchingConfigId: string;\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\nimport { FlowHelper } from '../../utils/flowHelper/flow-helper.service';\n\n@Injectable()\nexport class ResponseTypeValidationService {\n  constructor(private loggerService: LoggerService, private flowHelper: FlowHelper) {}\n\n  hasConfigValidResponseType(configId: string): boolean {\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow(configId)) {\n      return true;\n    }\n\n    if (this.flowHelper.isCurrentFlowCodeFlow(configId)) {\n      return true;\n    }\n\n    this.loggerService.logWarning(configId, 'module configured incorrectly, invalid response_type. Check the responseType in the config');\n\n    return false;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class RedirectService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\n\n  redirectTo(url): void {\n    this.doc.location.href = url;\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { ParResponse } from './par-response';\n\n@Injectable()\nexport class ParService {\n  constructor(\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private dataService: DataService,\n    private storagePersistenceService: StoragePersistenceService\n  ) {}\n\n  postParRequest(configId: string, customParams?: { [key: string]: string | number | boolean }): Observable<ParResponse> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configId);\n\n    if (!authWellknownEndpoints) {\n      return throwError('Could not read PAR endpoint because authWellKnownEndPoints are not given');\n    }\n\n    const parEndpoint = authWellknownEndpoints.parEndpoint;\n    if (!parEndpoint) {\n      return throwError('Could not read PAR endpoint from authWellKnownEndpoints');\n    }\n\n    const data = this.urlService.createBodyForParCodeFlowRequest(configId, customParams);\n\n    return this.dataService.post(parEndpoint, data, configId, headers).pipe(\n      retry(2),\n      map((response: any) => {\n        this.loggerService.logDebug(configId, 'par response: ', response);\n\n        return {\n          expiresIn: response.expires_in,\n          requestUri: response.request_uri,\n        };\n      }),\n      catchError((error) => {\n        const errorMessage = `There was an error on ParService postParRequest`;\n        this.loggerService.logError(configId, errorMessage, error);\n\n        return throwError(errorMessage);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AuthOptions } from '../../auth-options';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopupResultReceivedUrl } from '../popup/popup-result';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\nimport { ParResponse } from './par-response';\nimport { ParService } from './par.service';\n\n@Injectable()\nexport class ParLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService,\n    private parService: ParService\n  ) {}\n\n  loginPar(configId: string, authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configId)) {\n      this.loggerService.logError(configId, 'Invalid response type!');\n\n      return;\n    }\n\n    const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!authWellknownEndpointUrl) {\n      this.loggerService.logError(configId, 'no authWellknownEndpoint given!');\n\n      return;\n    }\n\n    this.loggerService.logDebug(configId, 'BEGIN Authorize OIDC Flow, no auth data');\n\n    const { urlHandler, customParams } = authOptions || {};\n\n    this.authWellKnownService\n      .getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId)\n      .pipe(switchMap(() => this.parService.postParRequest(configId, customParams)))\n      .subscribe((response) => {\n        this.loggerService.logDebug(configId, 'par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri, configId);\n\n        this.loggerService.logDebug(configId, 'par request url: ', url);\n\n        if (!url) {\n          this.loggerService.logError(configId, `Could not create URL with param ${response.requestUri}: '${url}'`);\n\n          return;\n        }\n\n        if (urlHandler) {\n          urlHandler(url);\n        } else {\n          this.redirectService.redirectTo(url);\n        }\n      });\n  }\n\n  loginWithPopUpPar(configId: string, authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configId)) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(configId, errorMessage);\n\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!authWellknownEndpointUrl) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(configId, errorMessage);\n\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug(configId, 'BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    const { customParams } = authOptions || {};\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId).pipe(\n      switchMap(() => this.parService.postParRequest(configId, customParams)),\n      switchMap((response: ParResponse) => {\n        this.loggerService.logDebug(configId, 'par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri, configId);\n\n        this.loggerService.logDebug(configId, 'par request url: ', url);\n\n        if (!url) {\n          const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;\n          this.loggerService.logError(configId, errorMessage);\n\n          return throwError(errorMessage);\n        }\n\n        this.popupService.openPopUp(url, popupOptions);\n\n        return this.popupService.result$.pipe(\n          take(1),\n          switchMap((result: PopupResultReceivedUrl) => {\n            const { userClosed, receivedUrl } = result;\n\n            if (userClosed) {\n              return of({\n                isAuthenticated: false,\n                errorMessage: 'User closed popup',\n                userData: null,\n                idToken: null,\n                accessToken: null,\n                configId,\n              });\n            }\n\n            return this.checkAuthService.checkAuth(configId, receivedUrl);\n          })\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AuthOptions } from '../../auth-options';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\nimport { PopupResultReceivedUrl } from './popup-result';\n\n@Injectable()\nexport class PopUpLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService\n  ) {}\n\n  loginWithPopUpStandard(configId: string, authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configId)) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(configId, errorMessage);\n\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!authWellknownEndpointUrl) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(configId, errorMessage);\n\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug(configId, 'BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId).pipe(\n      switchMap(() => {\n        const { customParams } = authOptions || {};\n\n        const authUrl = this.urlService.getAuthorizeUrl(configId, customParams);\n\n        this.popupService.openPopUp(authUrl, popupOptions);\n\n        return this.popupService.result$.pipe(\n          take(1),\n          switchMap((result: PopupResultReceivedUrl) => {\n            const { userClosed, receivedUrl } = result;\n\n            if (userClosed) {\n              return of({\n                isAuthenticated: false,\n                errorMessage: 'User closed popup',\n                userData: null,\n                idToken: null,\n                accessToken: null,\n                configId,\n              });\n            }\n\n            return this.checkAuthService.checkAuth(configId, receivedUrl);\n          })\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthOptions } from '../../auth-options';\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/provider/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\n\n@Injectable()\nexport class StandardLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService\n  ) {}\n\n  loginStandard(configId: string, authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configId)) {\n      this.loggerService.logError(configId, 'Invalid response type!');\n\n      return;\n    }\n\n    const { authWellknownEndpointUrl } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (!authWellknownEndpointUrl) {\n      this.loggerService.logError(configId, 'no authWellknownEndpoint given!');\n\n      return;\n    }\n\n    this.loggerService.logDebug(configId, 'BEGIN Authorize OIDC Flow, no auth data');\n\n    this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpointUrl, configId).subscribe(() => {\n      const { urlHandler, customParams } = authOptions || {};\n\n      const url = this.urlService.getAuthorizeUrl(configId, customParams);\n\n      if (!url) {\n        this.loggerService.logError(configId, 'Could not create URL', url);\n\n        return;\n      }\n\n      if (urlHandler) {\n        urlHandler(url);\n      } else {\n        this.redirectService.redirectTo(url);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthOptions } from '../auth-options';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { LoginResponse } from './login-response';\nimport { ParLoginService } from './par/par-login.service';\nimport { PopUpLoginService } from './popup/popup-login.service';\nimport { PopupOptions } from './popup/popup-options';\nimport { StandardLoginService } from './standard/standard-login.service';\n\n@Injectable()\nexport class LoginService {\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private parLoginService: ParLoginService,\n    private popUpLoginService: PopUpLoginService,\n    private standardLoginService: StandardLoginService,\n    private storagePersistenceService: StoragePersistenceService\n  ) {}\n\n  login(configId: string, authOptions?: AuthOptions): void {\n    if (authOptions?.customParams) {\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configId);\n    }\n\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginPar(configId, authOptions);\n    } else {\n      return this.standardLoginService.loginStandard(configId, authOptions);\n    }\n  }\n\n  loginWithPopUp(configId: string, authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (authOptions?.customParams) {\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configId);\n    }\n\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration(configId);\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginWithPopUpPar(configId, authOptions, popupOptions);\n    } else {\n      return this.popUpLoginService.loginWithPopUpStandard(configId, authOptions, popupOptions);\n    }\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, retry, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthOptions } from '../auth-options';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n  constructor(\n    private dataService: DataService,\n    private storagePersistenceService: StoragePersistenceService,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private checkSessionService: CheckSessionService,\n    private resetAuthDataService: ResetAuthDataService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  // Logs out on the server and the local client.\n  // If the server state has changed, check session, then only a local logout.\n  logoff(configId: string, authOptions?: AuthOptions): void {\n    const { urlHandler, customParams } = authOptions || {};\n\n    this.loggerService.logDebug(configId, 'logoff, remove auth ');\n\n    const endSessionUrl = this.getEndSessionUrl(configId, customParams);\n\n    this.resetAuthDataService.resetAuthorizationData(configId);\n\n    if (!endSessionUrl) {\n      this.loggerService.logDebug(configId, 'only local login cleaned up, no end_session_endpoint');\n\n      return;\n    }\n\n    if (this.checkSessionService.serverStateChanged(configId)) {\n      this.loggerService.logDebug(configId, 'only local login cleaned up, server session has changed');\n    } else if (urlHandler) {\n      urlHandler(endSessionUrl);\n    } else {\n      this.redirectService.redirectTo(endSessionUrl);\n    }\n  }\n\n  logoffLocal(configId: string): void {\n    this.resetAuthDataService.resetAuthorizationData(configId);\n    this.checkSessionService.stop();\n  }\n\n  logoffLocalMultiple(): void {\n    const allConfigs = this.configurationProvider.getAllConfigurations();\n\n    allConfigs.forEach(({ configId }) => this.logoffLocal(configId));\n  }\n\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(configId: string, authOptions?: AuthOptions): Observable<any> {\n    const { revocationEndpoint } = this.storagePersistenceService.read('authWellKnownEndPoints', configId) || {};\n\n    if (!revocationEndpoint) {\n      this.loggerService.logDebug(configId, 'revocation endpoint not supported');\n      this.logoff(configId, authOptions);\n    }\n\n    if (this.storagePersistenceService.getRefreshToken(configId)) {\n      return this.revokeRefreshToken(configId).pipe(\n        switchMap((result) => this.revokeAccessToken(configId, result)),\n        catchError((error) => {\n          const errorMessage = `revoke token failed`;\n          this.loggerService.logError(configId, errorMessage, error);\n\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(configId, authOptions))\n      );\n    } else {\n      return this.revokeAccessToken(configId).pipe(\n        catchError((error) => {\n          const errorMessage = `revoke accessToken failed`;\n          this.loggerService.logError(configId, errorMessage, error);\n\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(configId, authOptions))\n      );\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. If no token is provided, then the token from\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\n  // manage your own tokens. The is a public API.\n  revokeAccessToken(configId: string, accessToken?: any): Observable<any> {\n    const accessTok = accessToken || this.storagePersistenceService.getAccessToken(configId);\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok, configId);\n\n    return this.sendRevokeRequest(configId, body);\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(configId: string, refreshToken?: any): Observable<any> {\n    const refreshTok = refreshToken || this.storagePersistenceService.getRefreshToken(configId);\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok, configId);\n\n    return this.sendRevokeRequest(configId, body);\n  }\n\n  getEndSessionUrl(configId: string, customParams?: { [p: string]: string | number | boolean }): string | null {\n    const idToken = this.storagePersistenceService.getIdToken(configId);\n    const { customParamsEndSessionRequest } = this.configurationProvider.getOpenIDConfiguration();\n\n    const mergedParams = { ...customParamsEndSessionRequest, ...customParams };\n\n    return this.urlService.createEndSessionUrl(idToken, configId, mergedParams);\n  }\n\n  private sendRevokeRequest(configId: string, body: string): Observable<any> {\n    const url = this.urlService.getRevocationEndpointUrl(configId);\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.dataService.post(url, body, configId, headers).pipe(\n      retry(2),\n      switchMap((response: any) => {\n        this.loggerService.logDebug(configId, 'revocation endpoint post response: ', response);\n\n        return of(response);\n      }),\n      catchError((error) => {\n        const errorMessage = `Revocation request failed`;\n        this.loggerService.logError(configId, errorMessage, error);\n\n        return throwError(errorMessage);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthOptions } from './auth-options';\nimport { AuthenticatedResult } from './auth-state/auth-result';\nimport { AuthStateService } from './auth-state/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { OpenIdConfiguration } from './config/openid-configuration';\nimport { ConfigurationProvider } from './config/provider/config.provider';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { LoginResponse } from './login/login-response';\nimport { LoginService } from './login/login.service';\nimport { PopupOptions } from './login/popup/popup-options';\nimport { LogoffRevocationService } from './logoff-revoke/logoff-revocation.service';\nimport { UserService } from './user-data/user.service';\nimport { UserDataResult } from './user-data/userdata-result';\nimport { TokenHelperService } from './utils/tokenHelper/token-helper.service';\nimport { UrlService } from './utils/url/url.service';\n\n@Injectable()\nexport class OidcSecurityService {\n  /**\n   * Provides information about the user after they have logged in.\n   *\n   * @returns Returns an object containing either the user data directly (single config) or\n   * the user data per config in case you are running with multiple configs\n   */\n  get userData$(): Observable<UserDataResult> {\n    return this.userService.userData$;\n  }\n\n  /**\n   * Emits each time an authorization event occurs.\n   *\n   * @returns Returns an object containing if you are authenticated or not.\n   * Single Config: true if config is authenticated, false if not.\n   * Multiple Configs: true is all configs are authenticated, false if only one of them is not\n   *\n   * The `allConfigsAuthenticated` property contains the auth information _per config_.\n   */\n  get isAuthenticated$(): Observable<AuthenticatedResult> {\n    return this.authStateService.authenticated$;\n  }\n\n  /**\n   * Emits each time the server sends a CheckSession event and the value changed. This property will always return\n   * true.\n   */\n  get checkSessionChanged$(): Observable<boolean> {\n    return this.checkSessionService.checkSessionChanged$;\n  }\n\n  /**\n   * Emits on a Security Token Service callback. The observable will never contain a value.\n   */\n  get stsCallback$(): Observable<any> {\n    return this.callbackService.stsCallback$;\n  }\n\n  constructor(\n    private checkSessionService: CheckSessionService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private tokenHelperService: TokenHelperService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private flowsDataService: FlowsDataService,\n    private callbackService: CallbackService,\n    private logoffRevocationService: LogoffRevocationService,\n    private loginService: LoginService,\n    private refreshSessionService: RefreshSessionService,\n    private urlService: UrlService\n  ) {}\n\n  /**\n   * Returns the currently active OpenID configurations.\n   *\n   * @returns an array of OpenIdConfigurations.\n   */\n  getConfigurations(): OpenIdConfiguration[] {\n    return this.configurationProvider.getAllConfigurations();\n  }\n\n  /**\n   * Returns a single active OpenIdConfiguration.\n   *\n   * @param configId The configId to identify the config. If not passed, the first one is being returned\n   */\n  getConfiguration(configId?: string): OpenIdConfiguration {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration().configId;\n\n    return this.configurationProvider.getOpenIDConfiguration(configId);\n  }\n\n  /**\n   * Returns the userData for a configuration\n   *\n   * @param configId The configId to identify the config. If not passed, the first one is being used\n   */\n  getUserData(configId?: string): any {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration().configId;\n\n    return this.userService.getUserDataFromStore(configId);\n  }\n\n  /**\n   * Starts the complete setup flow for one configuration. Calling will start the entire authentication flow, and the returned observable\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\n   * an error message in case an error happened\n   *\n   * @param url The URL to perform the authorization on the behalf of.\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, the first configs will be taken\n   *\n   * @returns An object `LoginResponse` containing all information about the login\n   */\n  checkAuth(url?: string, configId?: string): Observable<LoginResponse> {\n    return this.checkAuthService.checkAuth(configId, url);\n  }\n\n  /**\n   * Starts the complete setup flow for multiple configurations.\n   * Calling will start the entire authentication flow, and the returned observable\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\n   * an error message in case an error happened in an array for each config which was provided\n   *\n   * @param url The URL to perform the authorization on the behalf of.\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, all of the current\n   * configured ones will be used to check.\n   *\n   * @returns An array of `LoginResponse` objects containing all information about the logins\n   */\n  checkAuthMultiple(url?: string, configId?: string): Observable<LoginResponse[]> {\n    return this.checkAuthService.checkAuthMultiple(configId, url);\n  }\n\n  /**\n   * Provides information about the current authenticated state\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns A boolean whether the config is authenticated or not.\n   */\n  isAuthenticated(configId?: string): boolean {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.authStateService.isAuthenticated(configId);\n  }\n\n  /**\n   * Checks the server for an authenticated session using the iframe silent renew if not locally authenticated.\n   */\n  checkAuthIncludingServer(configId?: string): Observable<LoginResponse> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.checkAuthService.checkAuthIncludingServer(configId);\n  }\n\n  /**\n   * Returns the access token for the login scenario.\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns A string with the access token.\n   */\n  getAccessToken(configId?: string): string {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.authStateService.getAccessToken(configId);\n  }\n\n  /**\n   * Returns the ID token for the sign-in.\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns A string with the id token.\n   */\n  getIdToken(configId?: string): string {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.authStateService.getIdToken(configId);\n  }\n\n  /**\n   * Returns the refresh token, if present, for the sign-in.\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns A string with the refresh token.\n   */\n  getRefreshToken(configId?: string): string {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.authStateService.getRefreshToken(configId);\n  }\n\n  /**\n   * Returns the authentication result, if present, for the sign-in.\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns A object with the authentication result\n   */\n  getAuthenticationResult(configId?: string): any {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.authStateService.getAuthenticationResult(configId);\n  }\n\n  /**\n   * Returns the payload from the ID token.\n   *\n   * @param encode Set to true if the payload is base64 encoded\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns The payload from the id token.\n   */\n  getPayloadFromIdToken(encode = false, configId?: string): any {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n    const token = this.authStateService.getIdToken(configId);\n\n    return this.tokenHelperService.getPayloadFromToken(token, encode, configId);\n  }\n\n  /**\n   * Sets a custom state for the authorize request.\n   *\n   * @param state The state to set.\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   */\n  setState(state: string, configId?: string): void {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    this.flowsDataService.setAuthStateControl(state, configId);\n  }\n\n  /**\n   * Gets the state value used for the authorize request.\n   *\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\n   *\n   * @returns The state value used for the authorize request.\n   */\n  getState(configId?: string): string {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.flowsDataService.getAuthStateControl(configId);\n  }\n\n  /**\n   * Redirects the user to the Security Token Service to begin the authentication process.\n   *\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   * @param authOptions The custom options for the the authentication request.\n   */\n  authorize(configId?: string, authOptions?: AuthOptions): void {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    this.loginService.login(configId, authOptions);\n  }\n\n  /**\n   * Opens the Security Token Service in a new window to begin the authentication process.\n   *\n   * @param authOptions The custom options for the authentication request.\n   * @param popupOptions The configuration for the popup window.\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns An `Observable<LoginResponse>` containing all information about the login\n   */\n  authorizeWithPopUp(authOptions?: AuthOptions, popupOptions?: PopupOptions, configId?: string): Observable<LoginResponse> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.loginService.loginWithPopUp(configId, authOptions, popupOptions);\n  }\n\n  /**\n   * Manually refreshes the session.\n   *\n   * @param customParams Custom parameters to pass to the refresh request.\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns An `Observable<LoginResponse>` containing all information about the login\n   */\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }, configId?: string): Observable<LoginResponse> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.refreshSessionService.userForceRefreshSession(configId, customParams);\n  }\n\n  /**\n   * Revokes the refresh token (if present) and the access token on the server and then performs the logoff operation.\n   * The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n   * only the access token is revoked. Then the logout run.\n   *\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   * @param authOptions The custom options for the request.\n   *\n   * @returns An observable when the action is finished\n   */\n  logoffAndRevokeTokens(configId?: string, authOptions?: AuthOptions): Observable<any> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.logoffAndRevokeTokens(configId, authOptions);\n  }\n\n  /**\n   * Logs out on the server and the local client. If the server state has changed, confirmed via check session,\n   * then only a local logout is performed.\n   *\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   * @param authOptions with custom parameters and/or an custom url handler\n   */\n  logoff(configId?: string, authOptions?: AuthOptions): void {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.logoff(configId, authOptions);\n  }\n\n  /**\n   * Logs the user out of the application without logging them out of the server.\n   * Use this method if you have _one_ config enabled.\n   *\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   */\n  logoffLocal(configId?: string): void {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.logoffLocal(configId);\n  }\n\n  /**\n   * Logs the user out of the application for all configs without logging them out of the server.\n   * Use this method if you have _multiple_ configs enabled.\n   */\n  logoffLocalMultiple(): void {\n    return this.logoffRevocationService.logoffLocalMultiple();\n  }\n\n  /**\n   * Revokes an access token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\n   * https://tools.ietf.org/html/rfc7009\n   *\n   * @param accessToken The access token to revoke.\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns An observable when the action is finished\n   */\n  revokeAccessToken(accessToken?: any, configId?: string): Observable<any> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.revokeAccessToken(configId, accessToken);\n  }\n\n  /**\n   * Revokes a refresh token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\n   * https://tools.ietf.org/html/rfc7009\n   *\n   * @param refreshToken The access token to revoke.\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns An observable when the action is finished\n   */\n  revokeRefreshToken(refreshToken?: any, configId?: string): Observable<any> {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.revokeRefreshToken(configId, refreshToken);\n  }\n\n  /**\n   * Creates the end session URL which can be used to implement an alternate server logout.\n   *\n   * @param customParams\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns A string with the end session url or null\n   */\n  getEndSessionUrl(customParams?: { [p: string]: string | number | boolean }, configId?: string): string | null {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.logoffRevocationService.getEndSessionUrl(configId, customParams);\n  }\n\n  /**\n   * Creates the authorize URL based on your flow\n   *\n   * @param customParams\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\n   *\n   * @returns A string with the authorize URL or null\n   */\n  getAuthorizeUrl(customParams?: { [p: string]: string | number | boolean }, configId?: string): string | null {\n    configId = configId ?? this.configurationProvider.getOpenIDConfiguration(configId).configId;\n\n    return this.urlService.getAuthorizeUrl(configId, customParams);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { APP_INITIALIZER, InjectionToken, ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './auth-state/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login.service';\nimport { ImplicitFlowCallbackService } from './callback/implicit-flow-callback.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { AuthWellKnownDataService } from './config/auth-well-known/auth-well-known-data.service';\nimport { AuthWellKnownService } from './config/auth-well-known/auth-well-known.service';\nimport { OidcConfigService } from './config/config.service';\nimport { StsConfigLoader, StsConfigStaticLoader } from './config/loader/config-loader';\nimport { OpenIdConfiguration } from './config/openid-configuration';\nimport { ConfigurationProvider } from './config/provider/config.provider';\nimport { ConfigValidationService } from './config/validation/config-validation.service';\nimport { CodeFlowCallbackHandlerService } from './flows/callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './flows/callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './flows/callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './flows/callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './flows/callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './flows/callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './flows/callback-handling/user-callback-handler.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { ResetAuthDataService } from './flows/reset-auth-data.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { ClosestMatchingRouteService } from './interceptor/closest-matching-route.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LoginService } from './login/login.service';\nimport { ParLoginService } from './login/par/par-login.service';\nimport { ParService } from './login/par/par.service';\nimport { PopUpLoginService } from './login/popup/popup-login.service';\nimport { ResponseTypeValidationService } from './login/response-type-validation/response-type-validation.service';\nimport { StandardLoginService } from './login/standard/standard-login.service';\nimport { LogoffRevocationService } from './logoff-revoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { DefaultSessionStorageService } from './storage/default-sessionstorage.service';\nimport { StoragePersistenceService } from './storage/storage-persistence.service';\nimport { UserService } from './user-data/user.service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/token-helper.service';\nimport { CurrentUrlService } from './utils/url/current-url.service';\nimport { UrlService } from './utils/url/url.service';\nimport { JsrsAsignReducedService } from './validation/jsrsasign-reduced.service';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\nexport interface PassedInitialConfig {\n  config?: OpenIdConfiguration | OpenIdConfiguration[];\n  loader?: Provider;\n  storage?: any;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createStaticLoader(passedConfig: PassedInitialConfig) {\n  return new StsConfigStaticLoader(passedConfig.config);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function configurationProviderFactory(oidcConfigService: OidcConfigService, loader: StsConfigLoader) {\n  const allLoadPromises = Promise.all(loader.loadConfigs());\n  const fn: () => Promise<OpenIdConfiguration[]> = () => allLoadPromises.then((configs) => oidcConfigService.withConfigs(configs));\n\n  return fn;\n}\n\nexport const PASSED_CONFIG = new InjectionToken<PassedInitialConfig>('PASSED_CONFIG');\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [],\n  exports: [],\n})\nexport class AuthModule {\n  static forRoot(passedConfig: PassedInitialConfig): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        // Make the PASSED_CONFIG available through injection\n        { provide: PASSED_CONFIG, useValue: passedConfig },\n\n        // Create the loader: Either the one getting passed or a static one\n        passedConfig?.loader || { provide: StsConfigLoader, useFactory: createStaticLoader, deps: [PASSED_CONFIG] },\n\n        // Load the config when the app starts\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          deps: [OidcConfigService, StsConfigLoader, PASSED_CONFIG],\n          useFactory: configurationProviderFactory,\n        },\n        OidcConfigService,\n        PublicEventsService,\n        FlowHelper,\n        ConfigurationProvider,\n        OidcSecurityService,\n        TokenValidationService,\n        PlatformProvider,\n        CheckSessionService,\n        FlowsDataService,\n        FlowsService,\n        SilentRenewService,\n        LogoffRevocationService,\n        UserService,\n        RandomService,\n        HttpBaseService,\n        UrlService,\n        AuthStateService,\n        SigninKeyDataService,\n        StoragePersistenceService,\n        TokenHelperService,\n        LoggerService,\n        IFrameService,\n        EqualityService,\n        LoginService,\n        ParService,\n        AuthWellKnownDataService,\n        AuthWellKnownService,\n        DataService,\n        StateValidationService,\n        ConfigValidationService,\n        CheckAuthService,\n        ResetAuthDataService,\n        ImplicitFlowCallbackService,\n        HistoryJwtKeysCallbackHandlerService,\n        ResponseTypeValidationService,\n        UserCallbackHandlerService,\n        StateValidationCallbackHandlerService,\n        RefreshSessionCallbackHandlerService,\n        RefreshTokenCallbackHandlerService,\n        CodeFlowCallbackHandlerService,\n        ImplicitFlowCallbackHandlerService,\n        ParLoginService,\n        PopUpLoginService,\n        StandardLoginService,\n        AutoLoginService,\n        JsrsAsignReducedService,\n        CurrentUrlService,\n        ClosestMatchingRouteService,\n        DefaultSessionStorageService,\n        BrowserStorageService,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CheckAuthService } from '../check-auth.service';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoginService } from '../login/login.service';\nimport { AutoLoginService } from './auto-login.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AutoLoginAllRoutesGuard implements CanActivate, CanActivateChild, CanLoad {\n  constructor(\n    private autoLoginService: AutoLoginService,\n    private checkAuthService: CheckAuthService,\n    private loginService: LoginService,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> {\n    const routeToRedirect = segments.join('/');\n\n    return this.checkAuth(routeToRedirect);\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.checkAuth(state.url);\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.checkAuth(state.url);\n  }\n\n  private checkAuth(url: string): Observable<boolean> {\n    const configId = this.getId();\n\n    return this.checkAuthService.checkAuth().pipe(\n      take(1),\n      map(({ isAuthenticated }) => {\n        if (isAuthenticated) {\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(configId);\n        }\n\n        if (!isAuthenticated) {\n          this.autoLoginService.saveRedirectRoute(configId, url);\n          this.loginService.login(configId);\n        }\n\n        return isAuthenticated;\n      })\n    );\n  }\n\n  private getId(): string {\n    return this.configurationProvider.getOpenIDConfiguration().configId;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoginService } from '../login/login.service';\nimport { AutoLoginService } from './auto-login.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AutoLoginPartialRoutesGuard implements CanActivate, CanActivateChild, CanLoad {\n  constructor(\n    private autoLoginService: AutoLoginService,\n    private authStateService: AuthStateService,\n    private loginService: LoginService,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): boolean {\n    const routeToRedirect = segments.join('/');\n\n    return this.checkAuth(routeToRedirect);\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.checkAuth(state.url);\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.checkAuth(state.url);\n  }\n\n  private checkAuth(url: string): boolean {\n    const configId = this.getId();\n\n    const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configId);\n\n    if (isAuthenticated) {\n      this.autoLoginService.checkSavedRedirectRouteAndNavigate(configId);\n    }\n\n    if (!isAuthenticated) {\n      this.autoLoginService.saveRedirectRoute(configId, url);\n      this.loginService.login(configId);\n    }\n\n    return isAuthenticated;\n  }\n\n  private getId(): string {\n    return this.configurationProvider.getOpenIDConfiguration().configId;\n  }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { ConfigurationProvider } from '../config/provider/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { ClosestMatchingRouteService } from './closest-matching-route.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private authStateService: AuthStateService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService,\n    private closestMatchingRouteService: ClosestMatchingRouteService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!this.configurationProvider.hasAsLeastOneConfig()) {\n      return next.handle(req);\n    }\n\n    const allConfigurations = this.configurationProvider.getAllConfigurations();\n    const allRoutesConfigured = allConfigurations.map((x) => x.secureRoutes || []);\n    const allRoutesConfiguredFlat = [].concat.apply([], allRoutesConfigured);\n\n    if (allRoutesConfiguredFlat.length === 0) {\n      const { configId } = allConfigurations[0];\n      this.loggerService.logDebug(configId, `No routes to check configured`);\n\n      return next.handle(req);\n    }\n\n    const { matchingConfigId, matchingRoute } = this.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(req.url);\n\n    if (!matchingConfigId) {\n      const { configId } = allConfigurations[0];\n      this.loggerService.logDebug(configId, `Did not find any configured route for route ${req.url}`);\n\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(matchingConfigId, `'${req.url}' matches configured route '${matchingRoute}'`);\n\n    const token = this.authStateService.getAccessToken(matchingConfigId);\n\n    if (!token) {\n      this.loggerService.logDebug(matchingConfigId, `Wanted to add token to ${req.url} but found no token: '${token}'`);\n\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(matchingConfigId, `'${req.url}' matches configured route '${matchingRoute}', adding token`);\n    req = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer ' + token),\n    });\n\n    return next.handle(req);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n  /**\n   * This method must contain the logic to read the storage.\n   *\n   * @return The value of the given key\n   */\n  public abstract read(key: string): any;\n\n  /**\n   * This method must contain the logic to write the storage.\n   *\n   * @param key The key to write a value for\n   * @param value The value for the given key\n   */\n  public abstract write(key: string, value: any): void;\n\n  /**\n   * This method must contain the logic to remove an item from the storage.\n   *\n   * @param key The value for the key to be removed\n   */\n  public abstract remove(key: string): void;\n\n  /**\n   * This method must contain the logic to remove all items from the storage.\n   */\n  public abstract clear(): void;\n}\n","// Public classes.\n\nexport * from './auth-options';\nexport * from './auth-state/auth-result';\nexport * from './auth-state/auth-state';\nexport * from './auth.module';\nexport * from './auto-login/auto-login-all-routes.guard';\nexport * from './auto-login/auto-login-partial-routes.guard';\nexport * from './config/auth-well-known/auth-well-known-endpoints';\nexport * from './config/config.service';\nexport * from './config/loader/config-loader';\nexport * from './config/openid-configuration';\nexport * from './interceptor/auth.interceptor';\nexport * from './logging/log-level';\nexport * from './logging/logger.service';\nexport * from './login/login-response';\nexport * from './login/popup/popup-options';\nexport * from './login/popup/popup.service';\nexport * from './oidc.security.service';\nexport * from './public-events/event-types';\nexport * from './public-events/notification';\nexport * from './public-events/public-events.service';\nexport * from './storage/abstract-security-storage';\nexport * from './user-data/userdata-result';\nexport * from './utils/tokenHelper/token-helper.service';\nexport * from './validation/jwtkeys';\nexport * from './validation/state-validation-result';\nexport * from './validation/token-validation.service';\nexport * from './validation/validation-result';\n","/*\n * Public API Surface of angular-auth-oidc-client\n */\n\nexport * from './lib/angular-auth-oidc-client';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;MAKa,eAAe;IAC1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KAAI;IAExC,GAAG,CAAI,GAAW,EAAE,MAA+B;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,CAAI,GAAW,EAAE,IAAS,EAAE,MAA+B;QAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAI,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;KAC7C;;4GATU,eAAe;gHAAf,eAAe;2FAAf,eAAe;kBAD3B,UAAU;;;MCAE,qBAAqB;IADlC;QAEU,oBAAe,GAAwC,EAAE,CAAC;KA4BnE;IA1BC,mBAAmB;QACjB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KACrD;IAED,cAAc;QACZ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KACrD;IAED,SAAS,CAAC,WAAgC;QACxC,MAAM,EAAE,QAAQ,EAAE,GAAG,WAAW,CAAC;QACjC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;KAC9C;IAED,sBAAsB,CAAC,QAAiB;QACtC,IAAI,CAAC,CAAC,QAAQ,EAAE;YACd,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;SAC/C;QAED,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAE5E,OAAO,KAAK,IAAI,IAAI,CAAC;KACtB;IAED,oBAAoB;QAClB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC5C;;kHA5BU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU;;;ACGX,MAAM,iBAAiB,GAAG,aAAa,CAAC;MAG3B,WAAW;IACtB,YAAoB,UAA2B,EAAmB,qBAA4C;QAA1F,eAAU,GAAV,UAAU,CAAiB;QAAmB,0BAAqB,GAArB,qBAAqB,CAAuB;KAAI;IAElH,GAAG,CAAI,GAAW,EAAE,QAAgB,EAAE,KAAc;QAClD,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,GAAG,EAAE;YACjC,OAAO;YACP,MAAM;SACP,CAAC,CAAC;KACJ;IAED,IAAI,CAAI,GAAW,EAAE,IAAS,EAAE,QAAgB,EAAE,aAA2B;QAC3E,MAAM,OAAO,GAAG,aAAa,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAI,GAAG,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;KAChE;IAEO,cAAc,CAAC,KAAc;QACnC,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAChC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAEpD,IAAI,CAAC,CAAC,KAAK,EAAE;YACX,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/E;QAED,OAAO,OAAO,CAAC;KAChB;IAEO,aAAa,CAAC,QAAgB;QACpC,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC9B,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEnF,IAAI,UAAU,EAAE;YACd,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;SAC5C;QAED,OAAO,MAAM,CAAC;KACf;;wGAxCU,WAAW;4GAAX,WAAW;2FAAX,WAAW;kBADvB,UAAU;;;ACRX;IACY;AAAZ,WAAY,UAAU;;;;IAIpB,2DAAY,CAAA;IACZ,yEAAmB,CAAA;IACnB,2EAAoB,CAAA;IACpB,iEAAe,CAAA;IACf,iFAAuB,CAAA;IACvB,2DAAY,CAAA;IACZ,+DAAc,CAAA;IACd,uEAAkB,CAAA;AACpB,CAAC,EAZW,UAAU,KAAV,UAAU;;ACDtB;IACY;AAAZ,WAAY,QAAQ;IAClB,uCAAI,CAAA;IACJ,yCAAK,CAAA;IACL,uCAAI,CAAA;IACJ,yCAAK,CAAA;AACP,CAAC,EALW,QAAQ,KAAR,QAAQ;;MCIP,aAAa;IACxB,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;KAAI;IAEpE,QAAQ,CAAC,QAAgB,EAAE,OAAY,EAAE,GAAG,IAAW;QACrD,IAAI,CAAC,CAAC,QAAQ,EAAE;YACd,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SACrD;aAAM;YACL,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SAC9C;KACF;IAED,UAAU,CAAC,QAAgB,EAAE,OAAY,EAAE,GAAG,IAAW;QACvD,IAAI,CAAC,CAAC,QAAQ,EAAE;YACd,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SACvD;aAAM;YACL,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SAChD;KACF;IAED,QAAQ,CAAC,QAAgB,EAAE,OAAY,EAAE,GAAG,IAAW;QACrD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACjC,OAAO;SACR;QAED,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;YACrC,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE;YACvE,OAAO;SACR;QAED,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,WAAW,QAAQ,MAAM,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAC1D;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,WAAW,QAAQ,MAAM,OAAO,EAAE,CAAC,CAAC;SACjD;KACF;IAEO,uBAAuB,CAAC,OAAY,EAAE,GAAG,IAAW;QAC1D,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,IAAI,CAAC,YAAY,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAC9C;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC,CAAC;SACrC;KACF;IAEO,oBAAoB,CAAC,QAAgB,EAAE,OAAY,EAAE,GAAG,IAAW;QACzE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACjC,OAAO;SACR;QAED,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;YACrC,OAAO;SACR;QAED,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtE,OAAO;SACR;QAED,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,IAAI,CAAC,UAAU,QAAQ,MAAM,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAC1D;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,UAAU,QAAQ,MAAM,OAAO,EAAE,CAAC,CAAC;SACjD;KACF;IAEO,kBAAkB,CAAC,QAAgB,EAAE,OAAY,EAAE,GAAG,IAAW;QACvE,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;YACrC,OAAO;SACR;QAED,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAC5D;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,WAAW,QAAQ,MAAM,OAAO,EAAE,CAAC,CAAC;SACnD;KACF;IAEO,qBAAqB,CAAC,OAAY,EAAE,GAAG,IAAW;QACxD,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3B,OAAO,CAAC,KAAK,CAAC,aAAa,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;SAChD;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,aAAa,OAAO,EAAE,CAAC,CAAC;SACvC;KACF;IAEO,mCAAmC,CAAC,QAAgB,EAAE,iBAA2B;QACvF,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEvF,OAAO,QAAQ,IAAI,iBAAiB,CAAC;KACtC;IAEO,aAAa,CAAC,QAAgB;QACpC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEvF,IAAI,QAAQ,KAAK,IAAI,EAAE;YACrB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAEO,kBAAkB,CAAC,QAAgB;QACzC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEvF,OAAO,QAAQ,KAAK,QAAQ,CAAC,IAAI,CAAC;KACnC;;0GA/GU,aAAa;8GAAb,aAAa;2FAAb,aAAa;kBADzB,UAAU;;;MCEE,qBAAqB;IAChC,YAAoB,cAAqC,EAAU,aAA4B;QAA3E,mBAAc,GAAd,cAAc,CAAuB;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEnG,IAAI,CAAC,GAAW,EAAE,QAAgB;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mBAAmB,GAAG,6BAA6B,CAAC,CAAC;YAE3F,OAAO,IAAI,CAAC;SACb;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE1C,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8BAA8B,QAAQ,yBAAyB,CAAC,CAAC;YAEvG,OAAO,IAAI,CAAC;SACb;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KACjC;IAED,KAAK,CAAC,KAAU,EAAE,QAAgB;QAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oBAAoB,KAAK,yBAAyB,CAAC,CAAC;YAE1F,OAAO,KAAK,CAAC;SACd;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oBAAoB,KAAK,yBAAyB,CAAC,CAAC;YAE1F,OAAO,KAAK,CAAC;SACd;QAED,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC;QAEtB,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAE/C,OAAO,IAAI,CAAC;KACb;IAED,MAAM,CAAC,GAAW,EAAE,QAAgB;QAClC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,GAAG,yBAAyB,CAAC,CAAC;YAEzF,OAAO,KAAK,CAAC;SACd;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oBAAoB,GAAG,yBAAyB,CAAC,CAAC;YAExF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC;KACb;;IAGD,KAAK,CAAC,QAAgB;QACpB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+CAA+C,CAAC,CAAC;YAEvF,OAAO,KAAK,CAAC;SACd;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+CAA+C,CAAC,CAAC;YAEvF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,CAAC,KAAK,EAAE,CAAC;QAEhB,OAAO,IAAI,CAAC;KACb;IAEO,UAAU,CAAC,QAAgB;QACjC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE/E,OAAO,OAAO,CAAC;KAChB;IAEO,UAAU;QAChB,OAAO,OAAO,OAAO,KAAK,WAAW,CAAC;KACvC;;kHA/FU,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU;;;MCiBE,yBAAyB;IACpC,YAA6B,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;KAAI;IAE7E,IAAI,CAAC,GAAgB,EAAE,QAAgB;QACrC,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE1E,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;KAC1B;IAED,KAAK,CAAC,GAAgB,EAAE,KAAU,EAAE,QAAgB;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE1E,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC1D;IAED,MAAM,CAAC,GAAgB,EAAE,QAAgB;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE1E,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;QAEzB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC1D;IAED,KAAK,CAAC,QAAgB;QACpB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC5C;IAED,oBAAoB,CAAC,QAAgB;QACnC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,gCAAgC,EAAE,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;KACxD;IAED,uBAAuB,CAAC,QAAgB;QACtC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;KACtC;IAED,cAAc,CAAC,QAAgB;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;KACzC;IAED,UAAU,CAAC,QAAgB;;QACzB,OAAO,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,0CAAE,QAAQ,CAAC;KACrD;IAED,eAAe,CAAC,QAAgB;;QAC9B,OAAO,MAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,0CAAE,aAAa,CAAC;KAC1D;IAED,uBAAuB,CAAC,QAAgB;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;KAC3C;;sHA1DU,yBAAyB;0HAAzB,yBAAyB;2FAAzB,yBAAyB;kBADrC,UAAU;;;MCfE,mBAAmB;IADhC;QAEU,WAAM,GAAG,IAAI,aAAa,CAA8B,CAAC,CAAC,CAAC;KAkBpE;;;;;;;IAVC,SAAS,CAAI,IAAgB,EAAE,KAAS;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;KACnC;;;;IAKD,iBAAiB;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;KACnC;;gHAlBU,mBAAmB;oHAAnB,mBAAmB;2FAAnB,mBAAmB;kBAD/B,UAAU;;;ACFX,MAAM,cAAc,GAAG,CAAC,CAAC;MAEZ,kBAAkB;IAC7B,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;KAAI;IAE7D,sBAAsB,CAAC,WAAgB;QACrC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;SAC3C;QAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;KACb;IAED,kBAAkB,CAAC,KAAU,EAAE,OAAgB,EAAE,QAAgB;QAC/D,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC;SACX;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,mBAAmB,CAAC,KAAU,EAAE,OAAgB,EAAE,QAAgB;QAChE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC;SACX;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,qBAAqB,CAAC,KAAU,EAAE,OAAgB,EAAE,QAAgB;QAClE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC;SACX;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KAC/C;IAEO,cAAc,CAAC,KAAa,EAAE,KAAa,EAAE,OAAgB;QACnE,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAE1D,IAAI,OAAO,EAAE;YACX,OAAO,WAAW,CAAC;SACpB;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAEjD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC3B;IAEO,eAAe,CAAC,GAAW;QACjC,IAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAEvD,QAAQ,MAAM,CAAC,MAAM,GAAG,CAAC;YACvB,KAAK,CAAC;gBACJ,MAAM;YACR,KAAK,CAAC;gBACJ,MAAM,IAAI,IAAI,CAAC;gBACf,MAAM;YACR,KAAK,CAAC;gBACJ,MAAM,IAAI,GAAG,CAAC;gBACd,MAAM;YACR;gBACE,MAAM,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC5C;QAED,MAAM,OAAO,GAAG,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEvH,IAAI;;YAEF,OAAO,kBAAkB,CACvB,OAAO;iBACJ,KAAK,CAAC,EAAE,CAAC;iBACT,GAAG,CAAC,CAAC,CAAS,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzE,IAAI,CAAC,EAAE,CAAC,CACZ,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,OAAO,CAAC;SAChB;KACF;IAEO,YAAY,CAAC,KAAa,EAAE,QAAgB;QAClD,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,KAAK,gCAAgC,CAAC,CAAC;YAEvF,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAE,KAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,KAAK,qCAAqC,CAAC,CAAC;YAE5F,OAAO,KAAK,CAAC;SACd;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,KAAK,CAAC,MAAM,KAAK,cAAc,EAAE;YACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,KAAK,gDAAgD,cAAc,GAAG,CAAC,OAAO,CAAC,CAAC;YAEhI,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAEO,kBAAkB,CAAC,KAAa,EAAE,KAAa;QACrD,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;KAChC;;+GA3GU,kBAAkB;mHAAlB,kBAAkB;2FAAlB,kBAAkB;kBAD9B,UAAU;;;MCAE,uBAAuB;IAClC,qBAAqB,CAAC,YAAiB;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACjE,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAEjC,OAAO,QAAQ,CAAC;KACjB;IAED,cAAc,CAAC,WAAgB,EAAE,GAAW;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrD,MAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;QAEzC,OAAO,QAAQ,CAAC;KACjB;;oHAdU,uBAAuB;wHAAvB,uBAAuB;2FAAvB,uBAAuB;kBADnC,UAAU;;;ACGX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;MAGa,sBAAsB;IAIjC,YACU,kBAAsC,EACtC,aAA4B,EAC5B,uBAAgD;QAFhD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QAC5B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAL1D,kBAAa,GAAa,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KAM1H;;;IAIJ,iBAAiB,CAAC,KAAa,EAAE,QAAgB,EAAE,aAAsB;QACvE,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEpF,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;KAC7E;;;IAID,4BAA4B,CAAC,cAAsB,EAAE,QAAgB,EAAE,aAAsB;QAC3F,MAAM,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAC3F,aAAa,GAAG,aAAa,IAAI,CAAC,CAAC;QAEnC,IAAI,CAAC,mBAAmB,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,OAAO,EAAE,CAAC;QAC3D,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC;QAC1F,MAAM,eAAe,GAAG,oBAAoB,GAAG,aAAa,CAAC;QAE7D,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,wBAAwB,CAAC,eAAe,mBAAmB,IAAI,CAAC,yBAAyB,CACvF,oBAAoB,GAAG,aAAa,CACrC,MAAM,IAAI,IAAI,CAAC,oBAAoB,CAAC,CAAC,kBAAkB,EAAE,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,kBAAkB,EAAE,EAAE,CAC/G,CAAC;;QAGF,OAAO,eAAe,CAAC;KACxB;IAED,6BAA6B,CAAC,oBAA0B,EAAE,QAAgB,EAAE,aAAsB;;QAEhG,IAAI,CAAC,oBAAoB,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,aAAa,GAAG,aAAa,IAAI,CAAC,CAAC;QACnC,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAClE,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC;QAC1F,MAAM,eAAe,GAAG,0BAA0B,GAAG,aAAa,CAAC;QAEnE,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,4BAA4B,CAAC,eAAe,mBAAmB,IAAI,CAAC,yBAAyB,CAC3F,0BAA0B,GAAG,aAAa,CAC3C,MAAM,IAAI,IAAI,CAAC,0BAA0B,CAAC,CAAC,kBAAkB,EAAE,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,kBAAkB,EAAE,EAAE,CACrH,CAAC;;QAGF,OAAO,eAAe,CAAC;KACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BD,uBAAuB,CAAC,WAAgB,EAAE,QAAgB;QACxD,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,kDAAkD,CAAC,CAAC;SAC7F;QAED,OAAO,SAAS,CAAC;KAClB;;;IAID,2BAA2B,CACzB,WAAgB,EAChB,yBAAiC,EACjC,0BAAmC,EACnC,QAAgB;QAEhB,IAAI,0BAA0B,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SACd;QAED,MAAM,kBAAkB,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAClD,yBAAyB,GAAG,yBAAyB,IAAI,CAAC,CAAC;QAE3D,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QACpD,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAC/D,MAAM,8BAA8B,GAAG,yBAAyB,GAAG,IAAI,CAAC;QAExE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oCAAoC,IAAI,MAAM,8BAA8B,EAAE,CAAC,CAAC;QAEtH,IAAI,IAAI,GAAG,CAAC,EAAE;YACZ,OAAO,IAAI,GAAG,8BAA8B,CAAC;SAC9C;QAED,OAAO,CAAC,IAAI,GAAG,8BAA8B,CAAC;KAC/C;;;;;;;IASD,oBAAoB,CAAC,WAAgB,EAAE,UAAe,EAAE,uBAAgC,EAAE,QAAgB;QACxG,MAAM,kBAAkB,GACtB,CAAC,WAAW,CAAC,KAAK,KAAK,SAAS,IAAI,uBAAuB,KAAK,UAAU,KAAK,sBAAsB,CAAC,4BAA4B,CAAC;QACrI,IAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC,KAAK,KAAK,UAAU,EAAE;YAC3D,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,qDAAqD,GAAG,WAAW,CAAC,KAAK,GAAG,eAAe,GAAG,UAAU,CACzG,CAAC;YAEF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;;IAID,kBAAkB,CAAC,WAAgB,EAAE,4BAAiC,EAAE,QAAgB;QACtF,IAAK,WAAW,CAAC,GAAc,KAAM,4BAAuC,EAAE;YAC5E,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,iDAAiD;gBAC/C,WAAW,CAAC,GAAG;gBACf,iCAAiC;gBACjC,4BAA4B,CAC/B,CAAC;YAEF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;;;;IAMD,kBAAkB,CAAC,WAAgB,EAAE,GAAQ,EAAE,QAAgB;QAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YAClC,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAE7C,IAAI,CAAC,MAAM,EAAE;gBACX,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,uDAAuD,GAAG,WAAW,CAAC,GAAG,GAAG,aAAa,GAAG,GAAG,CAChG,CAAC;gBAEF,OAAO,KAAK,CAAC;aACd;YAED,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,WAAW,CAAC,GAAG,KAAK,GAAG,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iDAAiD,GAAG,WAAW,CAAC,GAAG,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;YAEjI,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAED,wCAAwC,CAAC,WAAgB;QACvD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YACpF,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;IAGD,uBAAuB,CAAC,WAAgB,EAAE,QAAgB;QACxD,IAAI,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,CAAA,EAAE;YACrB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,WAAW,CAAC,GAAG,KAAK,QAAQ,EAAE;YAChC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KACd;IAED,6BAA6B,CAAC,KAAU,EAAE,UAAe,EAAE,QAAgB;QACzE,IAAK,KAAgB,KAAM,UAAqB,EAAE;YAChD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+CAA+C,GAAG,KAAK,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC;YAE9H,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;;;;IAMD,wBAAwB,CAAC,OAAY,EAAE,OAAY,EAAE,QAAgB;QACnE,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAC7B,OAAO,KAAK,CAAC;SACd;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAExF,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,WAAW,KAAK,MAAM,EAAE;YAC7E,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC;YAEvE,OAAO,KAAK,CAAC;SACd;QAED,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QAC3B,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAa,CAAC,EAAE;YAC/C,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,mBAAmB,EAAE,GAAG,CAAC,CAAC;YAElE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAK,GAAc,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACrC,WAAW,GAAG,IAAI,CAAC;SACpB;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;;QAGpB,IAAI,CAAC,GAAG,EAAE;YACR,IAAI,aAAa,CAAC;;YAGlB,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAK,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAc,KAAK,WAAW,EAAE;gBAChF,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjC;iBAAM;;;;gBAIL,IAAI,oBAAoB,GAAG,CAAC,CAAC;gBAC7B,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;oBAC9B,IAAK,GAAG,CAAC,GAAc,KAAK,WAAW,IAAK,GAAG,CAAC,GAAc,KAAK,KAAK,EAAE;wBACxE,oBAAoB,EAAE,CAAC;wBACvB,aAAa,GAAG,GAAG,CAAC;qBACrB;iBACF;gBAED,IAAI,oBAAoB,GAAG,CAAC,EAAE;oBAC5B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,wEAAwE,CAAC,CAAC;oBAElH,OAAO,KAAK,CAAC;iBACd;aACF;YAED,IAAI,CAAC,aAAa,EAAE;gBAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,oEAAoE,CAAC,CAAC;gBAE9G,OAAO,KAAK,CAAC;aACd;YAED,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAE7E,IAAI,CAAC,OAAO,EAAE;gBACZ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,qDAAqD,CAAC,CAAC;aAChG;YAED,OAAO,OAAO,CAAC;SAChB;aAAM;;YAEL,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;gBAC9B,IAAK,GAAG,CAAC,GAAc,KAAM,GAAc,EAAE;oBAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACtC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzD,IAAI,CAAC,OAAO,EAAE;wBACZ,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,qDAAqD,CAAC,CAAC;qBAChG;oBAED,OAAO,OAAO,CAAC;iBAChB;aACF;SACF;QAED,OAAO,OAAO,CAAC;KAChB;;;;;;;;;;;;;;;;;;;IAsBD,qBAAqB,CAAC,WAAgB,EAAE,MAAW,EAAE,UAAkB,EAAE,QAAgB;QACvF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,GAAG,MAAM,CAAC,CAAC;;QAG3E,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC9B,GAAG,GAAG,QAAQ,CAAC;SAChB;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACrC,GAAG,GAAG,QAAQ,CAAC;SAChB;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,EAAE,GAAG,WAAW,EAAE,GAAG,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,wCAAwC,GAAG,QAAQ,CAAC,CAAC;QAC3F,IAAI,QAAQ,KAAM,MAAiB,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,EAAE,GAAG,kBAAkB,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;YACzG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,eAAe,GAAG,SAAS,CAAC,CAAC;YACnE,IAAI,SAAS,KAAM,MAAiB,EAAE;gBACpC,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;KACd;IAEO,yBAAyB,CAAC,MAAc;QAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;QAC3C,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAErD,OAAO,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,OAAO,CAAC;KAC7D;;AA9YM,mDAA4B,GAAG,kBAAkB,CAAC;mHAD9C,sBAAsB;uHAAtB,sBAAsB;2FAAtB,sBAAsB;kBADlC,UAAU;;;ACrCX,MAAM,kBAAkB,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,uBAAuB,EAAE,EAAE,EAAE,CAAC;MAGtE,gBAAgB;IAO3B,YACU,yBAAoD,EACpD,aAA4B,EAC5B,mBAAwC,EACxC,qBAA4C,EAC5C,sBAA8C;QAJ9C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,2BAAsB,GAAtB,sBAAsB,CAAwB;QAXhD,2BAAsB,GAAG,IAAI,eAAe,CAAsB,kBAAkB,CAAC,CAAC;KAY1F;IAVJ,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;KAChF;IAUD,4BAA4B;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACjD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,8BAA8B,CAAC,eAAuB;QACpD,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QAExE,MAAM,MAAM,GAAG,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACnD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,yBAAyB,CAAC,oBAAqC;QAC7D,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAkB,UAAU,CAAC,uBAAuB,EAAE,oBAAoB,CAAC,CAAC;KAC/G;IAED,oBAAoB,CAAC,WAAmB,EAAE,UAAsB,EAAE,QAAgB;QAChF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,4BAA4B,WAAW,GAAG,CAAC,CAAC;QAElF,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,4BAA4B,EAAE,CAAC;KACrC;IAED,cAAc,CAAC,QAAgB;QAC7B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEtE,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,UAAU,CAAC,QAAgB;QACzB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAElE,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,eAAe,CAAC,QAAgB;QAC9B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEvE,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,uBAAuB,CAAC,QAAiB;QACvC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;KACzE;IAED,yBAAyB,CAAC,QAAgB;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,uCAAuC,CAAC,QAAQ,CAAC,EAAE;YAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;YAEtE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,mCAAmC,CAAC,QAAQ,CAAC,EAAE;YACtD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kCAAkC,CAAC,CAAC;YAE1E,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,6CAA6C,CAAC,CAAC;QAErF,OAAO,IAAI,CAAC;KACb;IAED,uCAAuC,CAAC,QAAgB;QACtD,MAAM,EAAE,oCAAoC,EAAE,qCAAqC,EAAE,GACnF,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE9D,IAAI,CAAC,qCAAqC,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEzE,MAAM,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,YAAY,EAAE,QAAQ,EAAE,oCAAoC,CAAC,CAAC;QAEnI,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAU,UAAU,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;SACxF;QAED,OAAO,cAAc,CAAC;KACvB;IAED,mCAAmC,CAAC,QAAgB;QAClD,MAAM,EAAE,oCAAoC,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC7G,MAAM,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;QACtG,MAAM,wBAAwB,GAAG,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CACxF,oBAAoB,EACpB,QAAQ,EACR,oCAAoC,CACrC,CAAC;QAEF,MAAM,UAAU,GAAG,CAAC,wBAAwB,CAAC;QAE7C,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAU,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;SAClF;QAED,OAAO,UAAU,CAAC;KACnB;IAED,eAAe,CAAC,QAAgB;QAC9B,OAAO,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KAC3H;IAEO,wBAAwB,CAAC,KAAa;QAC5C,IAAI,KAAK,EAAE;YACT,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;SAClC;aAAM;YACL,OAAO,EAAE,CAAC;SACX;KACF;IAEO,gCAAgC,CAAC,UAAe,EAAE,QAAgB;QACxE,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,EAAE;YAC1B,MAAM,qBAAqB,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC;YAC1G,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,yBAAyB,EAAE,qBAAqB,EAAE,QAAQ,CAAC,CAAC;SAClG;KACF;IAEO,0BAA0B;QAChC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;YAChD,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;YAEzE,OAAO,EAAE,eAAe,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;SAClG;QAED,OAAO,IAAI,CAAC,qCAAqC,EAAE,CAAC;KACrD;IAEO,4BAA4B;QAClC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;YAChD,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;YAEzE,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;SACpG;QAED,OAAO,IAAI,CAAC,qCAAqC,EAAE,CAAC;KACrD;IAEO,qCAAqC;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QAElE,MAAM,uBAAuB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM;YAC7D,QAAQ;YACR,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;SAChD,CAAC,CAAC,CAAC;QAEJ,MAAM,eAAe,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QAElF,OAAO,EAAE,uBAAuB,EAAE,eAAe,EAAE,CAAC;KACrD;;6GAzLU,gBAAgB;iHAAhB,gBAAgB;2FAAhB,gBAAgB;kBAD5B,UAAU;;;ACXX,MAAM,WAAW,GAAG,UAAU,CAAC;MAGlB,gBAAgB;IAC3B,YAA6B,cAAyC,EAAmB,MAAc;QAA1E,mBAAc,GAAd,cAAc,CAA2B;QAAmB,WAAM,GAAN,MAAM,CAAQ;KAAI;IAE3G,kCAAkC,CAAC,QAAgB;QACjD,MAAM,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEpE,IAAI,qBAAqB,EAAE;YACzB,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;SAClD;KACF;;;;;;IAOD,iBAAiB,CAAC,QAAgB,EAAE,GAAW;QAC7C,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;KACvD;;;;IAKO,sBAAsB,CAAC,QAAgB;QAC7C,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;KACxD;;;;IAKO,yBAAyB,CAAC,QAAgB;QAChD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;KACnD;;6GAjCU,gBAAgB;iHAAhB,gBAAgB;2FAAhB,gBAAgB;kBAD5B,UAAU;;;MCJE,UAAU;IACrB,SAAS,CAAC,GAAW;QACnB,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAChC;IAED,WAAW,CAAC,KAAa;QACvB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAClC;IAED,SAAS,CAAC,GAAW;QACnB,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAChC;IAED,WAAW,CAAC,KAAa;QACvB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAClC;;;MCZU,aAAa;IACxB,YAA+C,GAAQ,EAAU,aAA4B;QAA9C,QAAG,GAAH,GAAG,CAAK;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEjG,YAAY,CAAC,cAAsB,EAAE,QAAgB;QACnD,IAAI,cAAc,IAAI,CAAC,EAAE;YACvB,OAAO,EAAE,CAAC;SACX;QAED,IAAI,cAAc,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;YAC5C,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,6BAA6B,cAAc,iDAAiD,CAAC,CAAC;YACtI,cAAc,GAAG,EAAE,CAAC;SACrB;QAED,MAAM,MAAM,GAAG,cAAc,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/D,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YACpB,IAAI,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;SACvC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;KACpE;IAEO,KAAK,CAAC,GAAG;QACf,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5C;IAEO,YAAY,CAAC,MAAM;QACzB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,gEAAgE,CAAC;QAEpF,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YACpB,IAAI,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/B,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;aACrD;SACF;QAED,OAAO,MAAM,CAAC;KACf;IAEO,SAAS;;QAEf,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,IAAK,IAAI,CAAC,GAAG,CAAC,WAAmB,CAAC,QAAQ,CAAC;KAC9E;;0GA5CU,aAAa,kBACJ,QAAQ;8GADjB,aAAa;2FAAb,aAAa;kBADzB,UAAU;;0BAEI,MAAM;2BAAC,QAAQ;;;MCCjB,gBAAgB;IAC3B,YACU,yBAAoD,EACpD,aAA4B,EAC5B,qBAA4C,EAC5C,aAA4B;QAH5B,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;KAClC;IAEJ,WAAW,CAAC,QAAgB;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,uBAAuB,GAAG,KAAK,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE/B,OAAO,KAAK,CAAC;KACd;IAED,QAAQ,CAAC,KAAa,EAAE,QAAgB;QACtC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;KACpE;IAED,mBAAmB,CAAC,QAAgB;QAClC,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;KAC1E;IAED,mBAAmB,CAAC,gBAAwB,EAAE,QAAgB;QAC5D,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,kBAAkB,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;KACtF;IAED,mCAAmC,CAAC,QAAgB;QAClD,IAAI,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAC9E,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YACtD,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SAC3E;QAED,OAAO,KAAK,CAAC;KACd;IAED,eAAe,CAAC,YAAiB,EAAE,QAAgB;QACjD,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,eAAe,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC/E;IAED,oBAAoB,CAAC,QAAgB;QACnC,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;KAC/D;IAED,eAAe,CAAC,QAAgB;QAC9B,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;KACtE;IAED,kBAAkB,CAAC,QAAgB;QACjC,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,cAAc,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QAE7E,OAAO,YAAY,CAAC;KACrB;IAED,oBAAoB,CAAC,QAAgB;QACnC,MAAM,aAAa,GAAG,IAAI,CAAC,iCAAiC,CAAC,QAAQ,CAAC,CAAC;QAEvE,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,EAAE,2BAA2B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACpG,MAAM,qBAAqB,GAAG,2BAA2B,GAAG,IAAI,CAAC;QACjE,MAAM,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5D,MAAM,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,wBAAwB,CAAC,CAAC;QACtF,MAAM,eAAe,GAAG,yBAAyB,GAAG,qBAAqB,CAAC;QAE1E,IAAI,eAAe,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8DAA8D,EAAE,QAAQ,CAAC,CAAC;YAChH,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAEvC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,aAAa,CAAC,KAAK,KAAK,SAAS,CAAC;KAC1C;IAED,qBAAqB,CAAC,QAAgB;QACpC,MAAM,aAAa,GAAG;YACpB,KAAK,EAAE,SAAS;YAChB,wBAAwB,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACnD,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,2BAA2B,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC5G;IAED,uBAAuB,CAAC,QAAgB;QACtC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,2BAA2B,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;KACjF;IAEO,iCAAiC,CAAC,QAAgB;QACxD,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QAEhG,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KACjC;;6GAtGU,gBAAgB;iHAAhB,gBAAgB;2FAAhB,gBAAgB;kBAD5B,UAAU;;;MCFE,UAAU;IACrB,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;KAAI;IAEpE,qBAAqB,CAAC,QAAgB;QACpC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC7C;IAED,4BAA4B,CAAC,QAAgB;QAC3C,OAAO,IAAI,CAAC,wCAAwC,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,2CAA2C,CAAC,QAAQ,CAAC,CAAC;KAC9H;IAED,sCAAsC,CAAC,QAAgB;QACrD,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACxF,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,eAAe,EAAE;YAC3D,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KACd;IAED,wCAAwC,CAAC,QAAgB;QACvD,OAAO,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;KACvD;IAED,aAAa,CAAC,SAA4B,EAAE,QAAgB;QAC1D,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAErF,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC5B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;SAClD;QAED,OAAO,YAAY,KAAK,SAAS,CAAC;KACnC;IAEO,2CAA2C,CAAC,QAAgB;QAClE,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KACjD;;uGApCU,UAAU;2GAAV,UAAU;2FAAV,UAAU;kBADtB,UAAU;;;ACOX,MAAM,wBAAwB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACxE,MAAM,cAAc,GAAG,WAAW,CAAC;MAGtB,UAAU;IACrB,YACmB,qBAA4C,EAC5C,aAA4B,EAC5B,gBAAkC,EAClC,UAAsB,EAC/B,yBAAoD,EACpD,uBAAgD;QALvC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,eAAU,GAAV,UAAU,CAAY;QAC/B,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,4BAAuB,GAAvB,uBAAuB,CAAyB;KACtD;IAEJ,eAAe,CAAC,UAAe,EAAE,IAAS;QACxC,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,EAAE,CAAC;SACX;QAED,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,EAAE,CAAC;SACX;QAED,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,GAAG,WAAW,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEvC,OAAO,OAAO,KAAK,IAAI,GAAG,EAAE,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/D;IAED,iBAAiB,CAAC,UAAkB;QAClC,OAAO,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;KACpF;IAED,+BAA+B,CAAC,QAAgB,EAAE,YAA2D;QAC3G,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,gCAAgC,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACtE;QAED,OAAO,IAAI,CAAC,oCAAoC,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC;KAChF;IAED,kBAAkB,CAAC,UAAkB,EAAE,QAAgB;QACrD,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAEvG,IAAI,CAAC,sBAAsB,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;YAE7E,OAAO,IAAI,CAAC;SACb;QAED,MAAM,qBAAqB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC;QAE3E,IAAI,CAAC,qBAAqB,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kEAAkE,qBAAqB,GAAG,CAAC,CAAC;YAElI,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjF,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,4DAA4D,EAAE,QAAQ,CAAC,CAAC;YAE9G,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAEnD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;QAC/C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAE9C,OAAO,GAAG,gBAAgB,IAAI,MAAM,EAAE,CAAC;KACxC;IAED,eAAe,CAAC,QAAgB,EAAE,YAA2D;QAC3F,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SAChE;QAED,OAAO,IAAI,CAAC,8BAA8B,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1E;IAED,mBAAmB,CAAC,WAAmB,EAAE,QAAgB,EAAE,sBAAmE;;;QAI5H,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAC5C;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,kBAAkB,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,kBAAkB,CAAC;QAEtE,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,0BAA0B,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAEnD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAElD,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAEtE,IAAI,qBAAqB,EAAE;YACzB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;SAC3E;QAED,IAAI,sBAAsB,EAAE;YAC1B,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,sBAAsB,GAAI,MAAM,CAAC,CAAC;SACzE;QAED,OAAO,GAAG,0BAA0B,IAAI,MAAM,EAAE,CAAC;KAClD;IAED,uCAAuC,CAAC,KAAU,EAAE,QAAgB;QAClE,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACpC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;QAEvD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,wCAAwC,CAAC,KAAU,EAAE,QAAgB;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACpC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAExD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,wBAAwB,CAAC,QAAgB;QACvC,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,kBAAkB,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,kBAAkB,CAAC;QAEtE,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/C,MAAM,qBAAqB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE1C,OAAO,qBAAqB,CAAC;KAC9B;IAED,gCAAgC,CAAC,IAAY,EAAE,QAAgB,EAAE,iBAA8D;QAC7H,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,EAAE,YAAY,CAAC,CAAC;YAEhF,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;QACxD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QACnD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAElC,IAAI,iBAAiB,EAAE;YACrB,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,iBAAiB,GAAI,MAAM,CAAC,CAAC;SACpE;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAExD,IAAI,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,cAAc,EAAE;YAC1E,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YAEpD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;SAC1B;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAEjD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,yCAAyC,CACvC,YAAoB,EACpB,QAAgB,EAChB,mBAAkE;QAElE,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE5C,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QACnD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QAEnD,IAAI,mBAAmB,EAAE;YACvB,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,mBAAmB,GAAI,MAAM,CAAC,CAAC;SACtE;QAED,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,+BAA+B,CAAC,QAAgB,EAAE,mBAAkE;QAClH,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,GAAG,KAAK,CAAC,CAAC;;QAGzF,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACxE,MAAM,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAEvF,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAExI,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QACtD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QACxD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAExD,IAAI,OAAO,EAAE;YACX,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACvC;QAED,IAAI,uBAAuB,EAAE;YAC3B,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,uBAAuB,GAAI,MAAM,CAAC,CAAC;SAC1E;QAED,IAAI,mBAAmB,EAAE;YACvB,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,mBAAmB,GAAI,MAAM,CAAC,CAAC;SACtE;QAED,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAEO,kBAAkB,CACxB,aAAqB,EACrB,WAAmB,EACnB,KAAa,EACb,KAAa,EACb,QAAgB,EAChB,MAAe,EACf,mBAAkE;QAElE,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,qBAAqB,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,qBAAqB,CAAC;QAE5E,IAAI,CAAC,qBAAqB,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kEAAkE,qBAAqB,GAAG,CAAC,CAAC;YAElI,OAAO,IAAI,CAAC;SACb;QAED,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,uBAAuB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAExI,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,4DAA4D,EAAE,QAAQ,CAAC,CAAC;YAE9G,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,gEAAgE,EAAE,YAAY,CAAC,CAAC;YAEtH,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yDAAyD,EAAE,KAAK,CAAC,CAAC;YAExG,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAEnD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QACtD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAEvC,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE;YACnD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;YACxD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;SACzD;QAED,MAAM,YAAY,mCAAQ,uBAAuB,GAAK,mBAAmB,CAAE,CAAC;QAE5E,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACxC,MAAM,GAAG,IAAI,CAAC,kBAAkB,mBAAM,YAAY,GAAI,MAAM,CAAC,CAAC;SAC/D;QAED,IAAI,MAAM,EAAE;YACV,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACxD;QAED,IAAI,OAAO,EAAE;YACX,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACvC;QAED,OAAO,GAAG,gBAAgB,IAAI,MAAM,EAAE,CAAC;KACxC;IAEO,oCAAoC,CAAC,QAAgB,EAAE,YAA2D;QACxH,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE1D,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAExD,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8CAA8C,EAAE,KAAK,CAAC,CAAC;QAE7F,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,sBAAsB,EAAE;YAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;SAClG;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAE7E,OAAO,IAAI,CAAC;KACb;IAEO,gCAAgC,CAAC,QAAgB,EAAE,YAA2D;QACpH,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8CAA8C,GAAG,KAAK,CAAC,CAAC;;QAG9F,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACxE,MAAM,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAEvF,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAExD,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,sBAAsB,EAAE;YAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;SAC7G;QAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAE/E,OAAO,IAAI,CAAC;KACb;IAEO,8BAA8B,CAAC,QAAgB,EAAE,YAA2D;QAClH,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,GAAG,KAAK,CAAC,CAAC;QAEzF,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,sBAAsB,EAAE;YAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAE7E,OAAO,IAAI,CAAC;KACb;IAEO,0BAA0B,CAAC,QAAgB,EAAE,YAA2D;QAC9G,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,GAAG,KAAK,CAAC,CAAC;QAEzF,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;;QAGD,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACxE,MAAM,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QAEvF,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,IAAI,sBAAsB,EAAE;YAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;SACxG;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAE7E,OAAO,IAAI,CAAC;KACb;IAEO,cAAc,CAAC,QAAgB;QACrC,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEpF,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kCAAkC,EAAE,WAAW,CAAC,CAAC;YAEvF,IAAI,CAAC;SACN;QAED,OAAO,WAAW,CAAC;KACpB;IAEO,iBAAiB,CAAC,QAAgB;QACxC,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEvF,IAAI,CAAC,cAAc,EAAE;YACnB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,EAAE,cAAc,CAAC,CAAC;YAE7F,OAAO,IAAI,CAAC;SACb;QAED,OAAO,cAAc,CAAC;KACvB;IAEO,wBAAwB,CAAC,QAAgB;QAC/C,MAAM,EAAE,qBAAqB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE9F,IAAI,CAAC,qBAAqB,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,4CAA4C,EAAE,qBAAqB,CAAC,CAAC;YAE3G,OAAO,IAAI,CAAC;SACb;QAED,OAAO,qBAAqB,CAAC;KAC9B;IAEO,WAAW,CAAC,QAAgB;QAClC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjF,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+BAA+B,EAAE,QAAQ,CAAC,CAAC;YAEjF,OAAO,IAAI,CAAC;SACb;QAED,OAAO,QAAQ,CAAC;KACjB;IAEO,kBAAkB,CAAC,YAA0D,EAAE,MAAkB;QACvG,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,mBAAM,YAAY,EAAG,EAAE;YAC9D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC/C;QAED,OAAO,MAAM,CAAC;KACf;IAEO,cAAc,CAAC,MAAkB,EAAE,GAAW,EAAE,KAAgC;QACtF,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC/B;IAEO,gBAAgB,CAAC,cAAuB;QAC9C,cAAc,GAAG,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CAAC;QAEtC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC;YAC5B,UAAU,EAAE,cAAc;YAC1B,OAAO,EAAE,IAAI,UAAU,EAAE;SAC1B,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;KACf;IAEO,eAAe,CAAC,QAAgB;QACtC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAElF,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,KAAK,CAAC;SACd;QAED,OAAO,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;KAC3C;IAEO,oBAAoB,CAAC,QAAgB;;QAE3C,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC5F,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAEtE,OAAO,GAAG,SAAS,wBAAwB,QAAQ,aAAa,qBAAqB,EAAE,CAAC;KACzF;;uGA3gBU,UAAU;2GAAV,UAAU;2FAAV,UAAU;kBADtB,UAAU;;;MCCE,8BAA8B;IACzC,YACmB,UAAsB,EACtB,aAA4B,EAC5B,sBAA8C,EAC9C,gBAAkC,EAClC,qBAA4C,EAC5C,yBAAoD,EACpD,WAAwB;QANxB,eAAU,GAAV,UAAU,CAAY;QACtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,gBAAW,GAAX,WAAW,CAAa;KACvC;;IAGJ,gBAAgB,CAAC,UAAkB,EAAE,QAAgB;QACnD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACnE,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QAElF,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YAEzD,OAAO,UAAU,CAAC,iBAAiB,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAExD,OAAO,UAAU,CAAC,gBAAgB,CAAC,CAAC;SACrC;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,EAAE,UAAU,CAAC,CAAC;QAErF,MAAM,sBAAsB,GAAG;YAC7B,IAAI;YACJ,YAAY,EAAE,IAAI;YAClB,KAAK;YACL,YAAY;YACZ,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,KAAK;YACrB,OAAO,EAAE,IAAI;YACb,gBAAgB,EAAE,IAAI;YACtB,eAAe,EAAE,IAAI;SACtB,CAAC;QAEF,OAAO,EAAE,CAAC,sBAAsB,CAAC,CAAC;KACnC;;IAGD,mBAAmB,CAAC,eAAgC,EAAE,QAAgB;QACpE,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAE7E,MAAM,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,eAAe,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAEpI,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,UAAU,CAAC,qCAAqC,CAAC,CAAC;SAC1D;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,aAAa,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,aAAa,CAAC;QAC5D,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,UAAU,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,OAAO,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAE3E,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE3E,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,gCAAgC,CACtE,eAAe,CAAC,IAAI,EACpB,QAAQ,EACR,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,uBAAuB,CAChC,CAAC;QAEF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,eAAe,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAClF,SAAS,CAAC,CAAC,QAAQ;YACjB,IAAI,UAAU,GAAQ,IAAI,MAAM,EAAE,CAAC;YACnC,UAAU,GAAG,QAAQ,CAAC;YACtB,UAAU,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;YACzC,UAAU,CAAC,aAAa,GAAG,eAAe,CAAC,YAAY,CAAC;YAExD,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;YAExC,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;SAC5B,CAAC,EACF,SAAS,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,EAC9D,UAAU,CAAC,CAAC,KAAK;YACf,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAClF,MAAM,YAAY,GAAG,4BAA4B,SAAS,EAAE,CAAC;YAC7D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACH;IAEO,kBAAkB,CAAC,MAAuB,EAAE,QAAgB;QAClE,OAAO,MAAM,CAAC,IAAI,CAChB,QAAQ,CAAC,CAAC,KAAK;;YAEb,IAAI,KAAK,IAAI,KAAK,YAAY,iBAAiB,IAAI,KAAK,CAAC,KAAK,YAAY,aAAa,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;gBACvH,MAAM,EAAE,SAAS,EAAE,0BAA0B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;gBAC9G,MAAM,YAAY,GAAG,4BAA4B,SAAS,2BAA2B,CAAC;gBACtF,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBAE7D,OAAO,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,CAAC;aACjD;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;;2HA9GU,8BAA8B;+HAA9B,8BAA8B;2FAA9B,8BAA8B;kBAD1C,UAAU;;;ACCX,MAAM,kBAAkB,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;MAElD,WAAW;IAOtB,YACU,eAA4B,EAC5B,yBAAoD,EACpD,YAAiC,EACjC,aAA4B,EAC5B,kBAAsC,EACtC,UAAsB,EACtB,qBAA4C;QAN5C,oBAAe,GAAf,eAAe,CAAa;QAC5B,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,iBAAY,GAAZ,YAAY,CAAqB;QACjC,kBAAa,GAAb,aAAa,CAAe;QAC5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;QAb9C,sBAAiB,GAAG,IAAI,eAAe,CAAiB,kBAAkB,CAAC,CAAC;KAchF;IAZJ,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KAC9C;IAYD,4BAA4B,CAAC,QAAgB,EAAE,cAAc,GAAG,KAAK,EAAE,OAAa,EAAE,cAAoB;QACxG,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzE,cAAc,GAAG,cAAc,IAAI,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEzG,MAAM,2BAA2B,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACxE,MAAM,YAAY,GAAG,CAAC,CAAC,2BAA2B,CAAC;QACnD,MAAM,wCAAwC,GAAG,IAAI,CAAC,UAAU,CAAC,wCAAwC,CAAC,QAAQ,CAAC,CAAC;QACpH,MAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAE9E,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC5E,IAAI,EAAE,wCAAwC,IAAI,qBAAqB,CAAC,EAAE;YACxE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8CAA8C,WAAW,EAAE,CAAC,CAAC;YAEnG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YAElD,OAAO,EAAE,CAAC,cAAc,CAAC,CAAC;SAC3B;QAED,MAAM,EAAE,4BAA4B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAErG,IAAI,CAAC,cAAc,IAAI,4BAA4B,IAAI,CAAC,YAAY,EAAE;YACpE,OAAO,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,IAAI,CACvE,SAAS,CAAC,CAAC,QAAQ;gBACjB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;gBACxE,IAAI,CAAC,CAAC,QAAQ,EAAE;oBACd,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;oBAEpE,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;iBACrB;qBAAM;oBACL,OAAO,UAAU,CAAC,uCAAuC,CAAC,CAAC;iBAC5D;aACF,CAAC,CACH,CAAC;SACH;QAED,OAAO,EAAE,CAAC,2BAA2B,CAAC,CAAC;KACxC;IAED,oBAAoB,CAAC,QAAgB;QACnC,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC;KAC1E;IAED,uBAAuB,CAAC,QAAgB;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC5C;KACF;IAED,kBAAkB,CAAC,QAAa,EAAE,QAAgB;QAChD,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACrE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC5C;IAED,oBAAoB,CAAC,QAAgB;QACnC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACxC;IAEO,0BAA0B,CAAC,UAAe,EAAE,QAAgB;QAClE,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC5C,GAAG,CAAC,CAAC,IAAS;YACZ,IAAI,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,CAAC,EAAE;gBAC1D,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAExC,OAAO,IAAI,CAAC;aACb;iBAAM;;gBAEL,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,yDAAyD,CAAC,CAAC;gBACnG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBAEpC,OAAO,IAAI,CAAC;aACb;SACF,CAAC,CACH,CAAC;KACH;IAEO,mBAAmB,CAAC,QAAgB;QAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAEtE,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAEvG,IAAI,CAAC,sBAAsB,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,yDAAyD,CAAC,CAAC;YAEnG,OAAO,UAAU,CAAC,qCAAqC,CAAC,CAAC;SAC1D;QAED,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;QAEjE,IAAI,CAAC,gBAAgB,EAAE;YACrB,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,gHAAgH,CACjH,CAAC;YAEF,OAAO,UAAU,CAAC,uDAAuD,CAAC,CAAC;SAC5E;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACnF;IAEO,0BAA0B,CAAC,UAAe,EAAE,WAAgB;QAClE,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAED,IAAK,UAAqB,KAAM,WAAsB,EAAE;YACtD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,mCAAmC,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;YAE1F,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAEO,iBAAiB,CAAC,QAAgB,EAAE,cAAmB;QAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,qCAAqC,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAEtF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC;KACjG;IAEO,qCAAqC,CAAC,QAAgB,EAAE,cAAmB;QACjF,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC;QAEnE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;SACnE;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QAElE,MAAM,WAAW,GAA2B,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;YAC7D,IAAI,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;gBAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC;aAChE;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;YAEtG,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,oBAAoB,EAAE,CAAC;SACtE,CAAC,CAAC;QAEH,OAAO;YACL,QAAQ,EAAE,IAAI;YACd,WAAW;SACZ,CAAC;KACH;IAEO,2BAA2B,CAAC,QAAgB,EAAE,QAAa;QACjE,OAAO;YACL,QAAQ;YACR,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;SACtC,CAAC;KACH;IAEO,uBAAuB,CAAC,QAAgB,EAAE,MAA2B;QAC3E,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC;KACrC;;wGApLU,WAAW;4GAAX,WAAW;2FAAX,WAAW;kBADvB,UAAU;;;MCTE,oBAAoB;IAC/B,YACmB,gBAAkC,EAClC,gBAAkC,EAClC,WAAwB;QAFxB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gBAAW,GAAX,WAAW,CAAa;KACvC;IAEJ,sBAAsB,CAAC,QAAgB;QACrC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;KAChE;;iHAXU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU;;;MCIE,kCAAkC;IAC7C,YACmB,oBAA0C,EAC1C,aAA4B,EAC5B,gBAAkC,EAChB,GAAQ;QAH1B,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAChB,QAAG,GAAH,GAAG,CAAK;KACzC;;;IAIJ,oBAAoB,CAAC,QAAgB,EAAE,IAAa;QAClD,MAAM,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAEhF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;QACtE,IAAI,CAAC,kBAAkB,EAAE;YACvB,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;SAC5D;QAED,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEhD,MAAM,UAAU,GAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,UAAe,EAAE,IAAY;YAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,UAAU,CAAC,KAAK,CAAC,KAAK,EAAY,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEtD,OAAO,UAAU,CAAC;SACnB,EAAE,EAAE,CAAC,CAAC;QAEP,MAAM,eAAe,GAAG;YACtB,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,IAAI;YAClB,KAAK,EAAE,IAAI;YACX,YAAY,EAAE,IAAI;YAClB,UAAU;YACV,cAAc,EAAE,kBAAkB;YAClC,OAAO,EAAE,IAAI;YACb,gBAAgB,EAAE,IAAI;YACtB,eAAe,EAAE,IAAI;SACtB,CAAC;QAEF,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;KAC5B;;+HAxCU,kCAAkC,0GAKnC,QAAQ;mIALP,kCAAkC;2FAAlC,kCAAkC;kBAD9C,UAAU;;0BAMN,MAAM;2BAAC,QAAQ;;;ACdpB;IACY;AAAZ,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,yDAAqC,CAAA;IACrC,uDAAmC,CAAA;IACnC,qDAAiC,CAAA;IACjC,uEAAmD,CAAA;IACnD,yDAAqC,CAAA;IACrC,mEAA+C,CAAA;IAC/C,yEAAqD,CAAA;IACrD,iDAA6B,CAAA;IAC7B,6FAAyE,CAAA;IACzE,iDAA6B,CAAA;IAC7B,iDAA6B,CAAA;IAC7B,uDAAmC,CAAA;IACnC,6BAAS,CAAA;IACT,mDAA+B,CAAA;IAC/B,qEAAiD,CAAA;AACnD,CAAC,EAjBW,gBAAgB,KAAhB,gBAAgB;;MCSf,oBAAoB;IAC/B,YACU,yBAAoD,EACpD,aAA4B,EAC5B,WAAwB;QAFxB,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;KAC9B;IAEJ,cAAc,CAAC,QAAgB;QAC7B,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,OAAO,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,OAAO,CAAC;QAChD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,KAAK,GAAG,uDAAuD,OAAO,GAAG,CAAC;YAChF,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAE/C,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,EAAE,OAAO,CAAC,CAAC;QAE3E,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAU,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC1D,KAAK,CAAC,CAAC,CAAC,EACR,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,yBAAyB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAC/D,CAAC;KACH;IAEO,yBAAyB,CAAC,aAAsC,EAAE,QAAgB;QACxF,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,aAAa,YAAY,YAAY,EAAE;YACzC,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC;YACtC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC;YAC7C,MAAM,GAAG,GAAG,MAAM,IAAI,EAAE,MAAM,UAAU,IAAI,EAAE,IAAI,GAAG,IAAI,EAAE,EAAE,CAAC;SAC/D;aAAM;YACL,MAAM,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;YAClC,MAAM,GAAG,CAAC,CAAC,OAAO,GAAG,OAAO,GAAG,GAAG,aAAa,EAAE,CAAC;SACnD;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE9C,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;KAC3B;;iHAvCU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU;;;ACKX,MAAM,QAAQ,GAAG,SAAS,CAAC;MAGd,oCAAoC;IAC/C,YACmB,aAA4B,EAC5B,qBAA4C,EAC5C,gBAAkC,EAClC,gBAAkC,EAClC,oBAA0C,EAC1C,yBAAoD,EACpD,oBAA0C;QAN1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,yBAAoB,GAApB,oBAAoB,CAAsB;KACzD;;IAGJ,8BAA8B,CAAC,eAAgC,EAAE,QAAgB;QAC/E,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,aAAa,EAAE,eAAe,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE1F,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;YAC5E,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC5B;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,2BAA2B,CAAC,CAAC;SACpE;QAED,IAAI,eAAe,CAAC,UAAU,CAAC,KAAK,EAAE;YACpC,MAAM,YAAY,GAAG,4CAA4C,eAAe,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACpG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC7C,IAAI,CAAC,6BAA6B,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,cAAc,CAAC,CAAC;YAE/F,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,eAAe,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;mDACrB,CAC9C,CAAC;QAEF,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC5D,GAAG,CAAC,CAAC,OAAgB,KAAK,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,EACnE,UAAU,CAAC,CAAC,GAAG;;YAEb,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,CAAC,CAAC,aAAa,EAAE;gBACnB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,0DAA0D,CAAC,CAAC;gBAEpG,OAAO,EAAE,CAAC,aAAa,CAAC,CAAC;aAC1B;YAED,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB,CAAC,EACF,SAAS,CAAC,CAAC,OAAO;YAChB,IAAI,OAAO,EAAE;gBACX,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC;gBAElC,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;aAC5B;YAED,MAAM,YAAY,GAAG,gCAAgC,CAAC;YACtD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEtD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,EACF,UAAU,CAAC,CAAC,GAAG;YACb,MAAM,YAAY,GAAG,8CAA8C,GAAG,EAAE,CAAC;YACzE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEtD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACH;IAEO,6BAA6B,CAAC,MAAW,EAAE,cAAuB;QACxE,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,sBAAsB,CAAC;QAE/D,IAAK,MAAM,CAAC,KAAgB,KAAK,gBAAgB,EAAE;YACjD,gBAAgB,GAAG,gBAAgB,CAAC,aAAa,CAAC;SACnD;QAED,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;YAC9C,eAAe,EAAE,KAAK;YACtB,gBAAgB;YAChB,cAAc;SACf,CAAC,CAAC;KACJ;IAEO,sBAAsB,CAAC,QAAgB;QAC7C,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE1F,OAAO,CAAC,iBAAiB,CAAC;KAC3B;IAEO,mBAAmB;QACzB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC3G;IAEO,gBAAgB,CAAC,OAAgB,EAAE,QAAgB;QACzD,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;KACnE;IAEO,eAAe,CAAC,QAAgB;QACtC,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAChE;;iIArGU,oCAAoC;qIAApC,oCAAoC;2FAApC,oCAAoC;kBADhD,UAAU;;;MCHE,0BAA0B;IACrC,YACmB,aAA4B,EAC5B,qBAA4C,EAC5C,gBAAkC,EAClC,gBAAkC,EAClC,WAAwB,EACxB,oBAA0C;QAL1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gBAAW,GAAX,WAAW,CAAa;QACxB,yBAAoB,GAApB,oBAAoB,CAAsB;KACzD;;IAGJ,YAAY,CAAC,eAAgC,EAAE,QAAgB;QAC7D,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,eAAe,CAAC;QACvF,MAAM,EAAE,YAAY,EAAE,4BAA4B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEnH,IAAI,CAAC,YAAY,EAAE;YACjB,IAAI,CAAC,cAAc,IAAI,4BAA4B,EAAE;;gBAEnD,IAAI,gBAAgB,CAAC,cAAc,EAAE;oBACnC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;iBAChF;aACF;YAED,IAAI,CAAC,cAAc,IAAI,CAAC,YAAY,EAAE;gBACpC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;aAC3E;YAED,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;YAExD,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;SAC5B;QAED,OAAO,IAAI,CAAC,WAAW;aACpB,4BAA4B,CAAC,QAAQ,EAAE,cAAc,EAAE,gBAAgB,CAAC,OAAO,EAAE,gBAAgB,CAAC,cAAc,CAAC;aACjH,IAAI,CACH,SAAS,CAAC,CAAC,QAAQ;YACjB,IAAI,CAAC,CAAC,QAAQ,EAAE;gBACd,IAAI,CAAC,YAAY,EAAE;oBACjB,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;iBAC3E;gBAED,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;gBAExD,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;aAC5B;iBAAM;gBACL,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;gBACnE,MAAM,YAAY,GAAG,qCAAqC,QAAQ,EAAE,CAAC;gBACrE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAEtD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;aACjC;SACF,CAAC,EACF,UAAU,CAAC,CAAC,GAAG;YACb,MAAM,YAAY,GAAG,6CAA6C,GAAG,EAAE,CAAC;YACxE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEtD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACL;IAEO,gBAAgB,CAAC,qBAA4C,EAAE,cAAuB;QAC5F,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;YAC9C,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,qBAAqB,CAAC,KAAK;YAC7C,cAAc;SACf,CAAC,CAAC;KACJ;IAEO,2BAA2B,CAAC,qBAA4C,EAAE,cAAuB;QACvG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;YAC9C,eAAe,EAAE,KAAK;YACtB,gBAAgB,EAAE,qBAAqB,CAAC,KAAK;YAC7C,cAAc;SACf,CAAC,CAAC;KACJ;;uHA5EU,0BAA0B;2HAA1B,0BAA0B;2FAA1B,0BAA0B;kBADtC,UAAU;;;MCVE,qBAAqB;IAChC,YACS,cAAc,EAAE,EAChB,UAAU,EAAE,EACZ,sBAAsB,KAAK,EAC3B,iBAAsB,EAAE,EACxB,QAA0B,gBAAgB,CAAC,MAAM;QAJjD,gBAAW,GAAX,WAAW,CAAK;QAChB,YAAO,GAAP,OAAO,CAAK;QACZ,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,mBAAc,GAAd,cAAc,CAAU;QACxB,UAAK,GAAL,KAAK,CAA4C;KACtD;;;MCNO,eAAe;IAC1B,mCAAmC,CAAC,MAAsB,EAAE,MAAsB;QAChF,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,kCAAkC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC3D,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC7C,OAAO,MAAM,KAAK,MAAM,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAe,EAAE,MAAe,CAAC,CAAC;SACtE;QAED,OAAO,KAAK,CAAC;KACd;IAED,QAAQ,CAAC,MAA+C,EAAE,MAA+C;QACvG,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAe,EAAE,MAAe,CAAC,CAAC;SACjE;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC7C,OAAO,MAAM,KAAK,MAAM,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC7C,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;SACtF;QAED,IAAI,IAAI,CAAC,kCAAkC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC3D,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;gBACvD,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;aAC7B;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;gBACvD,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;aAC7B;SACF;QAED,OAAO,KAAK,CAAC;KACd;IAEO,kCAAkC,CAAC,MAA4B,EAAE,MAA4B;QACnG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;KACvH;IAEO,oBAAoB,CAAC,MAA4B,EAAE,MAA4B;QACrF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;KACjE;IAEO,oBAAoB,CAAC,MAA4B,EAAE,MAA4B;QACrF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;KACjE;IAEO,mBAAmB,CAAC,MAA4B,EAAE,MAA4B;QACpF,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACvD;IAEO,aAAa,CAAC,KAAU;QAC9B,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,CAAC;KAC7D;IAEO,aAAa,CAAC,KAAU;QAC9B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;KAClC;IAEO,iBAAiB,CAAC,IAAmB,EAAE,IAAmB;QAChE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,GAAI;YAC/B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;gBACvB,OAAO,KAAK,CAAC;aACd;SACF;QAED,OAAO,IAAI,CAAC;KACb;IAEO,sBAAsB,CAAC,IAAmB,EAAE,IAAmB;QACrE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3C;IAEO,iBAAiB,CAAC,GAAQ;QAChC,OAAO,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC;KAC1C;;4GAtGU,eAAe;gHAAf,eAAe;2FAAf,eAAe;kBAD3B,UAAU;;;MCWE,sBAAsB;IACjC,YACU,yBAAoD,EACpD,sBAA8C,EAC9C,kBAAsC,EACtC,aAA4B,EAC5B,qBAA4C,EAC5C,eAAgC,EAChC,UAAsB;QANtB,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,oBAAe,GAAf,eAAe,CAAiB;QAChC,eAAU,GAAV,UAAU,CAAY;KAC5B;IAEJ,uBAAuB,CAAC,eAAgC,EAAE,QAAgB;QACxE,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,IAAI,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;SACrD;QAED,IAAI,eAAe,CAAC,UAAU,CAAC,KAAK,EAAE;YACpC,OAAO,IAAI,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;SACrD;QAED,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;KACtD;IAED,aAAa,CAAC,eAAoB,EAAE,QAAgB;QAClD,MAAM,QAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC7C,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAE3F,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,eAAe,CAAC,UAAU,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,CAAC,EAAE;YAC5H,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;YACxE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;YACnD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;YAE5C,OAAO,QAAQ,CAAC;SACjB;QAED,MAAM,wCAAwC,GAAG,IAAI,CAAC,UAAU,CAAC,wCAAwC,CAAC,QAAQ,CAAC,CAAC;QACpH,MAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAE9E,IAAI,wCAAwC,IAAI,qBAAqB,EAAE;YACrE,QAAQ,CAAC,WAAW,GAAG,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC;SAChE;QAED,IAAI,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE;YACvC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,mCAAmC,EAAE,0BAA0B,EAAE,uBAAuB,EAAE,GAC5H,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAE9D,QAAQ,CAAC,OAAO,GAAG,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC;YAEvD,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAEzG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBAC9G,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mDAAmD,CAAC,CAAC;gBAC3F,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,eAAe,CAAC;gBAClD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,cAAc,EAAE,SAAS,EAAE,uBAAuB,EAAE,QAAQ,CAAC,EAAE;gBAC5H,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,mFAAmF,CAAC,CAAC;gBAC7H,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,cAAc,CAAC;gBACjD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,EAAE;gBAC3F,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+EAA+E,CAAC,CAAC;gBACvH,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,uBAAuB,CAAC;gBAC1D,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IACE,CAAC,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,CACtD,QAAQ,CAAC,cAAc,EACvB,mCAAmC,EACnC,0BAA0B,EAC1B,QAAQ,CACT,EACD;gBACA,IAAI,CAAC,aAAa,CAAC,UAAU,CAC3B,QAAQ,EACR,8FAA8F,CAC/F,CAAC;gBACF,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;gBACnD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;YAEvG,IAAI,sBAAsB,EAAE;gBAC1B,IAAI,gBAAgB,EAAE;oBACpB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,wDAAwD,CAAC,CAAC;iBACjG;qBAAM,IACL,CAAC,gBAAgB;oBACjB,CAAC,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,cAAc,EAAE,sBAAsB,CAAC,MAAM,EAAE,QAAQ,CAAC,EACjH;oBACA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,yEAAyE,CAAC,CAAC;oBACnH,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,qBAAqB,CAAC;oBACxD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;oBAE5C,OAAO,QAAQ,CAAC;iBACjB;aACF;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,qCAAqC,CAAC,CAAC;gBAC/E,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,wBAAwB,CAAC;gBAC3D,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBAChG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;gBACtE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,wCAAwC,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;gBAClG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC;gBACpE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,EAAE;gBAC3F,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;gBACtE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sCAAsC,CAAC,eAAe,EAAE,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,EAAE;gBACpG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,gEAAgE,CAAC,CAAC;gBAC1G,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,kCAAkC,CAAC;gBACrE,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,EAAE;gBAChG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;gBACzE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;SACF;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iDAAiD,CAAC,CAAC;SAC1F;;QAGD,IAAI,CAAC,wCAAwC,IAAI,CAAC,qBAAqB,EAAE;YACvE,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC;YACpC,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;YAE5C,OAAO,QAAQ,CAAC;SACjB;;QAGD,IAAI,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE;YACvC,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;;YAGpG,IAAI,qBAAqB,IAAI,CAAE,QAAQ,CAAC,cAAc,CAAC,OAAkB,EAAE;gBACzE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mEAAmE,CAAC,CAAC;aAC5G;iBAAM,IACL,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAChD,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,cAAc,CAAC,OAAO,EAC/B,aAAa,CAAC,GAAG;YACjB,QAAQ,CACT;gBACD,CAAC,QAAQ,CAAC,WAAW,EACrB;gBACA,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,gCAAgC,CAAC,CAAC;gBAC1E,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,eAAe,CAAC;gBAClD,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;gBAE5C,OAAO,QAAQ,CAAC;aACjB;SACF;QAED,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC;QACrC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAE1C,OAAO,QAAQ,CAAC;KACjB;IAEO,sCAAsC,CAAC,eAAgC,EAAE,UAAe,EAAE,QAAgB;QAChH,MAAM,EAAE,eAAe,EAAE,uCAAuC,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACjI,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;;;;;QAQrH,IAAI,cAAc,CAAC,GAAG,KAAK,UAAU,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;YAEnG,OAAO,KAAK,CAAC;SACd;;;;QAID,IAAI,cAAc,CAAC,GAAG,KAAK,UAAU,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;YAEnG,OAAO,KAAK,CAAC;SACd;;QAED,IAAI,cAAc,CAAC,GAAG,KAAK,UAAU,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;YAEnG,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,mCAAmC,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,GAAG,CAAC,EAAE;YACnG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sCAAsC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,MAAM,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;YAExH,OAAO,KAAK,CAAC;SACd;QAED,IAAI,uCAAuC,EAAE;YAC3C,OAAO,IAAI,CAAC;SACb;;;;QAKD,IAAI,cAAc,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS,EAAE;YACrD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,2BAA2B,cAAc,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC;YAErH,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;IAEO,0BAA0B,CAAC,QAAgB;QACjD,MAAM,EAAE,iCAAiC,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC1G,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAElE,IAAI,iCAAiC,EAAE;YACrC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;SACxE;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,2CAA2C,CAAC,CAAC;KACpF;IAEO,4BAA4B,CAAC,QAAgB;QACnD,MAAM,EAAE,iCAAiC,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC1G,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAElE,IAAI,iCAAiC,EAAE;YACrC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;SACxE;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;KACxE;;mHAxRU,sBAAsB;uHAAtB,sBAAsB;2FAAtB,sBAAsB;kBADlC,UAAU;;;MCDE,qCAAqC;IAChD,YACmB,aAA4B,EAC5B,sBAA8C,EAC9C,gBAAkC,EAClC,oBAA0C,EACxB,GAAQ;QAJ1B,kBAAa,GAAb,aAAa,CAAe;QAC5B,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,yBAAoB,GAApB,oBAAoB,CAAsB;QACxB,QAAG,GAAH,GAAG,CAAK;KACzC;;IAIJ,uBAAuB,CAAC,eAAgC,EAAE,QAAgB;QACxE,MAAM,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QACxG,eAAe,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAEpD,IAAI,gBAAgB,CAAC,mBAAmB,EAAE;YACxC,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,WAAW,EAAE,eAAe,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE/G,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;SAC5B;aAAM;YACL,MAAM,YAAY,GAAG,oEAAoE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAClH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YACtD,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,gBAAgB,EAAE,eAAe,CAAC,cAAc,CAAC,CAAC;YAEhG,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;KACF;IAEO,wBAAwB,CAAC,qBAA4C,EAAE,cAAuB;QACpG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;YAC9C,eAAe,EAAE,KAAK;YACtB,gBAAgB,EAAE,qBAAqB,CAAC,KAAK;YAC7C,cAAc;SACf,CAAC,CAAC;KACJ;;kIAnCU,qCAAqC,6IAMtC,QAAQ;sIANP,qCAAqC;2FAArC,qCAAqC;kBADjD,UAAU;;0BAON,MAAM;2BAAC,QAAQ;;;MCRP,oCAAoC;IAC/C,YACmB,aAA4B,EAC5B,gBAAkC,EAClC,gBAAkC;QAFlC,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;KACjD;;IAGJ,+BAA+B,CAAC,QAAgB;QAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QACtF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8CAA8C,GAAG,SAAS,CAAC,CAAC;QAClG,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrE,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE3D,IAAI,YAAY,EAAE;YAChB,MAAM,eAAe,GAAG;gBACtB,IAAI,EAAE,IAAI;gBACV,YAAY;gBACZ,KAAK,EAAE,SAAS;gBAChB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE,IAAI;gBAChB,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,IAAI;gBACb,gBAAgB,EAAE,IAAI;gBACtB,eAAe,EAAE,OAAO;aACzB,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iEAAiE,CAAC,CAAC;;YAEzG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,sBAAsB,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;YAE9F,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;SAC5B;aAAM;YACL,MAAM,YAAY,GAAG,sCAAsC,CAAC;YAC5D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;KACF;;iIAtCU,oCAAoC;qIAApC,oCAAoC;2FAApC,oCAAoC;kBADhD,UAAU;;;MCIE,kCAAkC;IAC7C,YACmB,UAAsB,EACtB,aAA4B,EAC5B,qBAA4C,EAC5C,WAAwB,EACxB,yBAAoD;QAJpD,eAAU,GAAV,UAAU,CAAY;QACtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,gBAAW,GAAX,WAAW,CAAa;QACxB,8BAAyB,GAAzB,yBAAyB,CAA2B;KACnE;;IAGJ,0BAA0B,CACxB,eAAgC,EAChC,QAAgB,EAChB,mBAAkE;QAElE,IAAI,OAAO,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAE3E,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,aAAa,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,aAAa,CAAC;QAC5D,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,UAAU,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,yCAAyC,CAAC,eAAe,CAAC,YAAY,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAEpI,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CACvE,SAAS,CAAC,CAAC,QAAa;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC;YAC5E,IAAI,UAAU,GAAQ,IAAI,MAAM,EAAE,CAAC;YACnC,UAAU,GAAG,QAAQ,CAAC;YACtB,UAAU,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;YAEzC,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;YAExC,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC;SAC5B,CAAC,EACF,SAAS,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,EAC9D,UAAU,CAAC,CAAC,KAAK;YACf,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAClF,MAAM,YAAY,GAAG,4BAA4B,SAAS,EAAE,CAAC;YAC7D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACH;IAEO,kBAAkB,CAAC,MAAuB,EAAE,QAAgB;QAClE,OAAO,MAAM,CAAC,IAAI,CAChB,QAAQ,CAAC,CAAC,KAAK;;YAEb,IAAI,KAAK,IAAI,KAAK,YAAY,iBAAiB,IAAI,KAAK,CAAC,KAAK,YAAY,aAAa,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;gBACvH,MAAM,EAAE,SAAS,EAAE,0BAA0B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;gBAC9G,MAAM,YAAY,GAAG,4BAA4B,SAAS,2BAA2B,CAAC;gBACtF,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBAE7D,OAAO,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,CAAC;aACjD;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;;+HA/DU,kCAAkC;mIAAlC,kCAAkC;2FAAlC,kCAAkC;kBAD9C,UAAU;;;MCEE,YAAY;IACvB,YACmB,8BAA8D,EAC9D,kCAAsE,EACtE,oCAA0E,EAC1E,kBAA8C,EAC9C,qCAA4E,EAC5E,oCAA0E,EAC1E,kCAAsE;QANtE,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,uCAAkC,GAAlC,kCAAkC,CAAoC;QACtE,yCAAoC,GAApC,oCAAoC,CAAsC;QAC1E,uBAAkB,GAAlB,kBAAkB,CAA4B;QAC9C,0CAAqC,GAArC,qCAAqC,CAAuC;QAC5E,yCAAoC,GAApC,oCAAoC,CAAsC;QAC1E,uCAAkC,GAAlC,kCAAkC,CAAoC;KACrF;IAEJ,uBAAuB,CAAC,UAAkB,EAAE,QAAgB;QAC1D,OAAO,IAAI,CAAC,8BAA8B,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CACpF,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EAClH,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EACnI,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,qCAAqC,CAAC,uBAAuB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EAC7H,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAChG,CAAC;KACH;IAED,kCAAkC,CAAC,YAA6B,EAAE,QAAgB;QAChF,OAAO,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,IAAI,CACzF,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EACnI,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,qCAAqC,CAAC,uBAAuB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EAC7H,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAChG,CAAC;KACH;IAED,2BAA2B,CAAC,QAAgB,EAAE,IAAa;QACzD,OAAO,IAAI,CAAC,kCAAkC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CACtF,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EACnI,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,qCAAqC,CAAC,uBAAuB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EAC7H,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAChG,CAAC;KACH;IAED,mBAAmB,CAAC,QAAgB,EAAE,mBAAkE;QACtG,OAAO,IAAI,CAAC,oCAAoC,CAAC,+BAA+B,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC7F,SAAS,CAAC,CAAC,eAAe,KACxB,IAAI,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,eAAe,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CACnH,EACD,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EACnI,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,qCAAqC,CAAC,uBAAuB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,EAC7H,SAAS,CAAC,CAAC,eAAe,KAAK,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAChG,CAAC;KACH;;yGA7CU,YAAY;6GAAZ,YAAY;2FAAZ,YAAY;kBADxB,UAAU;;;MCRE,eAAe;IAG1B,YAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAFhC,8BAAyB,GAAiB,IAAI,CAAC;KAEX;IAEpC,sBAAsB;QACpB,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;YAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;SACvC;KACF;IAED,uBAAuB,CAAC,kBAA0B;QAChD,MAAM,kCAAkC,GAAG,kBAAkB,GAAG,IAAI,CAAC;QAErE,OAAO,IAAI,UAAU,CAAC,CAAC,UAAU;YAC/B,IAAI,UAAU,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAC1B,UAAU,GAAG,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;aAC5G,CAAC,CAAC;YAEH,OAAO;gBACL,aAAa,CAAC,UAAU,CAAC,CAAC;aAC3B,CAAC;SACH,CAAC,CAAC;KACJ;;4GAzBU,eAAe;gHAAf,eAAe,cADF,MAAM;2FACnB,eAAe;kBAD3B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCQrB,2BAA2B;IACtC,YACU,YAA0B,EAC1B,qBAA4C,EAC5C,MAAc,EACd,gBAAkC,EAClC,eAAgC;QAJhC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,WAAM,GAAN,MAAM,CAAQ;QACd,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;KACtC;IAEJ,iCAAiC,CAAC,QAAgB,EAAE,IAAa;QAC/D,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC5E,MAAM,EAAE,+BAA+B,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAC1E,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE9D,OAAO,IAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CACvE,GAAG,CAAC,CAAC,eAAe;YAClB,IAAI,CAAC,+BAA+B,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;gBACvE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;aAC3C;SACF,CAAC,EACF,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;YAC9C,IAAI,CAAC,+BAA+B,IAAI,CAAC,cAAc,EAAE;gBACvD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;aAC9C;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;;wHA9BU,2BAA2B;4HAA3B,2BAA2B,cADd,MAAM;2FACnB,2BAA2B;kBADvC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCLrB,aAAa;IACxB,YAA+C,GAAQ,EAAU,aAA4B;QAA9C,QAAG,GAAH,GAAG,CAAK;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEjG,iBAAiB,CAAC,UAAkB;QAClC,MAAM,cAAc,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;QAClE,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE;YACxC,OAAO,cAAc,CAAC;SACvB;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAC1D,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE;YACtC,OAAO,YAAY,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;KACb;IAED,qBAAqB,CAAC,UAAkB,EAAE,QAAgB;QACxD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACvD,aAAa,CAAC,EAAE,GAAG,UAAU,CAAC;QAC9B,aAAa,CAAC,KAAK,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACrD,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAEzC,OAAO,aAAa,CAAC;KACtB;IAEO,yBAAyB,CAAC,UAAkB;QAClD,IAAI;YACF,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACtF,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;gBACvC,OAAO,aAAa,CAAC;aACtB;YAED,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAC;SACb;KACF;IAEO,mBAAmB,CAAC,UAAkB;QAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC1D,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;YACvC,OAAO,aAAa,CAAC;SACtB;QAED,OAAO,IAAI,CAAC;KACb;IAEO,eAAe,CAAC,OAA2B;QACjD,OAAO,CAAC,CAAC,OAAO,IAAI,OAAO,YAAY,iBAAiB,CAAC;KAC1D;;0GApDU,aAAa,kBACJ,QAAQ;8GADjB,aAAa;2FAAb,aAAa;kBADzB,UAAU;;0BAEI,MAAM;2BAAC,QAAQ;;;ACI9B,MAAM,mCAAmC,GAAG,yBAAyB,CAAC;AAEtE;MAGa,mBAAmB;IAa9B,YACU,yBAAoD,EACpD,aAA4B,EAC5B,aAA4B,EAC5B,YAAiC,EACjC,qBAA4C,EAC5C,IAAY;QALZ,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAqB;QACjC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,SAAI,GAAJ,IAAI,CAAQ;QAlBd,yBAAoB,GAAG,KAAK,CAAC;QAE7B,sBAAiB,GAAG,CAAC,CAAC;QACtB,wBAAmB,GAAG,CAAC,CAAC;QACxB,sBAAiB,GAAG,IAAI,CAAC;QACzB,0BAAqB,GAAG,KAAK,CAAC;QAC9B,iCAA4B,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;KAavE;IAXJ,IAAI,oBAAoB;QACtB,OAAO,IAAI,CAAC,4BAA4B,CAAC,YAAY,EAAE,CAAC;KACzD;IAWD,wBAAwB,CAAC,QAAgB;QACvC,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE1F,OAAO,iBAAiB,CAAC;KAC1B;IAED,KAAK,CAAC,QAAgB;QACpB,IAAI,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACpC,OAAO;SACR;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC5C;IAED,IAAI;QACF,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACnC,OAAO;SACR;QAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;KACnC;IAED,kBAAkB,CAAC,QAAgB;QACjC,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE1F,OAAO,iBAAiB,IAAI,IAAI,CAAC,oBAAoB,CAAC;KACvD;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,mCAAmC,CAAC,CAAC;KAClF;IAEO,IAAI,CAAC,QAAgB;QAC3B,IAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;YACpE,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;SACtB;QAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAEvG,IAAI,CAAC,sBAAsB,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,oFAAoF,CAAC,CAAC;YAE9H,OAAO,EAAE,EAAE,CAAC;SACb;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACxD,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC;QAErE,IAAI,kBAAkB,EAAE;YACtB,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;SACnE;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,gFAAgF,CAAC,CAAC;SAC3H;QAED,OAAO,IAAI,UAAU,CAAC,CAAC,QAAQ;YAC7B,cAAc,CAAC,MAAM,GAAG;gBACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACpC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB,CAAC;SACH,CAAC,CAAC;KACJ;IAEO,iBAAiB,CAAC,QAAgB,EAAE,QAAgB;QAC1D,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,MAAM,sBAAsB,GAAG;YAC7B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACb,SAAS,CAAC;;gBACT,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAChD,IAAI,cAAc,IAAI,QAAQ,EAAE;oBAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8BAA8B,QAAQ,wBAAwB,cAAc,GAAG,CAAC,CAAC;oBACvH,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;oBACpF,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;oBAEvG,IAAI,YAAY,KAAI,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,kBAAkB,CAAA,EAAE;wBAC9D,MAAM,YAAY,GAAG,MAAA,IAAI,GAAG,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,0CAAE,MAAM,CAAC;wBAChF,IAAI,CAAC,mBAAmB,EAAE,CAAC;wBAC3B,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,GAAG,GAAG,GAAG,YAAY,EAAE,YAAY,CAAC,CAAC;qBACvF;yBAAM;wBACL,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,oCAAoC,YAAY,kCAAkC,IAAI,CAAC,SAAS,CAC9F,sBAAsB,EACtB,IAAI,EACJ,CAAC,CACF,GAAG,CACL,CAAC;wBACF,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC9C;iBACF;qBAAM;oBACL,IAAI,CAAC,aAAa,CAAC,UAAU,CAC3B,QAAQ,EACR;6BACe,QAAQ,wBAAwB,cAAc,GAAG,CACjE,CAAC;iBACH;;gBAGD,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE;oBAChC,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR;qDACuC,IAAI,CAAC,mBAAmB,wBAAwB,CACxF,CAAC;iBACH;gBAED,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;oBAC1B,IAAI,CAAC,yBAAyB,GAAG,UAAU,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;iBAClH,CAAC,CAAC;aACJ,CAAC,CAAC;SACN,CAAC;QAEF,sBAAsB,EAAE,CAAC;KAC1B;IAEO,uBAAuB;QAC7B,YAAY,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;KACvC;IAEO,cAAc,CAAC,QAAgB,EAAE,CAAM;;QAC7C,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAChD,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QACvG,MAAM,UAAU,GAAG,CAAC,EAAC,MAAA,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,kBAAkB,0CAAE,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA,CAAC;QAEtF,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAE7B,IAAI,cAAc,IAAI,UAAU,IAAI,CAAC,CAAC,MAAM,KAAK,cAAc,CAAC,aAAa,EAAE;YAC7E,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;gBACtB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,wDAAwD,CAAC,CAAC;aACnG;iBAAM,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kBAAkB,CAAC,oCAAoC,CAAC,CAAC;gBAC/F,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC9C;iBAAM;gBACL,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC;aACrG;SACF;KACF;IAEO,wBAAwB,CAAC,QAAgB;QAC/C,MAAM,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpE,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;KAC/D;IAEO,iBAAiB,CAAC,QAAgB;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEhD,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,mCAAmC,EAAE,QAAQ,CAAC,CAAC;YACtG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAExC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,cAAc,CAAC;KACvB;;gHAvLU,mBAAmB;oHAAnB,mBAAmB;2FAAnB,mBAAmB;kBAD/B,UAAU;;;MCVE,iBAAiB;IAC5B,YAAsC,GAAQ;QAAR,QAAG,GAAH,GAAG,CAAK;KAAI;IAElD,2BAA2B;QACzB,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACxC,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC;QACtC,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE5C,OAAO,YAAY,CAAC;KACrB;IAED,uBAAuB;QACrB,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC;KAC7C;IAED,aAAa;QACX,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;KACjD;;8GAlBU,iBAAiB,kBACR,QAAQ;kHADjB,iBAAiB;2FAAjB,iBAAiB;kBAD7B,UAAU;;0BAEI,MAAM;2BAAC,QAAQ;;;ACY9B,MAAM,kCAAkC,GAAG,wBAAwB,CAAC;MAGvD,kBAAkB;IAO7B,YACU,qBAA4C,EAC5C,aAA4B,EAC5B,YAA0B,EAC1B,oBAA0C,EAC1C,gBAAkC,EAClC,gBAAkC,EAClC,aAA4B,EAC5B,UAAsB,EACtB,2BAAwD,EACxD,eAAgC;QAThC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAY;QACtB,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,oBAAe,GAAf,eAAe,CAAiB;QAhBlC,+CAA0C,GAAG,IAAI,OAAO,EAAmB,CAAC;KAiBhF;IAfJ,IAAI,kCAAkC;QACpC,OAAO,IAAI,CAAC,0CAA0C,CAAC,YAAY,EAAE,CAAC;KACvE;IAeD,iBAAiB,CAAC,QAAgB;QAChC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEhD,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,kCAAkC,EAAE,QAAQ,CAAC,CAAC;SAC/F;QAED,OAAO,cAAc,CAAC;KACvB;IAED,uBAAuB,CAAC,QAAgB;QACtC,MAAM,EAAE,eAAe,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAErG,OAAO,CAAC,eAAe,IAAI,WAAW,CAAC;KACxC;IAED,iCAAiC,CAAC,QAAa,EAAE,QAAgB;QAC/D,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC;YAC5B,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;SACxB,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAElC,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;gBAC9C,eAAe,EAAE,KAAK;gBACtB,gBAAgB,EAAE,gBAAgB,CAAC,aAAa;gBAChD,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;YACH,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC7C,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;YAE9C,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAEjD,MAAM,eAAe,GAAG;YACtB,IAAI;YACJ,YAAY,EAAE,IAAI;YAClB,KAAK;YACL,YAAY;YACZ,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,IAAI;YACpB,OAAO,EAAE,IAAI;YACb,gBAAgB,EAAE,IAAI;YACtB,eAAe,EAAE,IAAI;SACtB,CAAC;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC,kCAAkC,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,IAAI,CACzF,UAAU,CAAC,CAAC,aAAa;YACvB,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;YAC9C,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,aAAa,CAAC,CAAC;SAClC,CAAC,CACH,CAAC;KACH;IAED,uBAAuB,CAAC,CAAc,EAAE,QAAgB;QACtD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;QACjE,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;YACb,OAAO;SACR;QAED,IAAI,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAEzB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEnE,IAAI,UAAU,EAAE;YACd,MAAM,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,SAAS,GAAG,IAAI,CAAC,iCAAiC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SACxE;aAAM;YACL,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC,iCAAiC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;SACpG;QAED,SAAS,CAAC,SAAS,CACjB,CAAC,eAAe;YACd,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACtE,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;SACzD,EACD,CAAC,GAAQ;YACP,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,GAAG,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;SACzD,CACF,CAAC;KACH;IAEO,iBAAiB;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,CAAC;KACjF;;+GAlHU,kBAAkB;mHAAlB,kBAAkB;2FAAlB,kBAAkB;kBAD9B,UAAU;;;MCRE,uBAAuB;IAClC,YACU,YAA0B,EAC1B,gBAAkC,EAClC,eAAgC,EAChC,qBAA4C,EAC5C,MAAc;QAJd,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;QAChC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,WAAM,GAAN,MAAM,CAAQ;KACpB;IAEJ,6BAA6B,CAAC,UAAkB,EAAE,QAAgB;QAChE,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC5E,MAAM,EAAE,+BAA+B,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAC1E,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE9D,OAAO,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CACzE,GAAG,CAAC,CAAC,eAAe;YAClB,IAAI,CAAC,+BAA+B,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;gBACvE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;aAC3C;SACF,CAAC,EACF,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;YAC9C,IAAI,CAAC,+BAA+B,IAAI,CAAC,cAAc,EAAE;gBACvD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;aAC9C;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;;oHA9BU,uBAAuB;wHAAvB,uBAAuB,cADV,MAAM;2FACnB,uBAAuB;kBADnC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCArB,eAAe;IAO1B,YACU,UAAsB,EACtB,UAAsB,EACtB,2BAAwD,EACxD,uBAAgD;QAHhD,eAAU,GAAV,UAAU,CAAY;QACtB,eAAU,GAAV,UAAU,CAAY;QACtB,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAVlD,yBAAoB,GAAG,IAAI,OAAO,EAAE,CAAC;KAWzC;IATJ,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC;KACjD;IASD,UAAU,CAAC,UAAkB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;KACtD;IAED,2BAA2B,CAAC,kBAA0B,EAAE,QAAgB;QACtE,IAAI,SAA0B,CAAC;QAE/B,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE;YACnD,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,6BAA6B,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;SACtG;aAAM,IAAI,IAAI,CAAC,UAAU,CAAC,4BAA4B,CAAC,QAAQ,CAAC,EAAE;YACjE,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC,iCAAiC,CAAC,QAAQ,CAAC,CAAC;SAC1F;QAED,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;KACpE;;4GA5BU,eAAe;gHAAf,eAAe,cADF,MAAM;2FACnB,eAAe;kBAD3B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;ACHlC,MAAM,iBAAiB,GAAG,mCAAmC,CAAC;MAGjD,wBAAwB;IACnC,YAA6B,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;KAAI;IAElD,4BAA4B,CAAC,qBAA6B,EAAE,QAAgB;QAC1E,OAAO,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC,IAAI,CACpE,GAAG,CACD,CAAC,kBAAkB,MAChB;YACC,MAAM,EAAE,kBAAkB,CAAC,MAAM;YACjC,OAAO,EAAE,kBAAkB,CAAC,QAAQ;YACpC,qBAAqB,EAAE,kBAAkB,CAAC,sBAAsB;YAChE,aAAa,EAAE,kBAAkB,CAAC,cAAc;YAChD,gBAAgB,EAAE,kBAAkB,CAAC,iBAAiB;YACtD,kBAAkB,EAAE,kBAAkB,CAAC,oBAAoB;YAC3D,kBAAkB,EAAE,kBAAkB,CAAC,oBAAoB;YAC3D,kBAAkB,EAAE,kBAAkB,CAAC,mBAAmB;YAC1D,qBAAqB,EAAE,kBAAkB,CAAC,sBAAsB;YAChE,WAAW,EAAE,kBAAkB,CAAC,qCAAqC;SAC3C,CAAA,CAC/B,CACF,CAAC;KACH;IAEO,oBAAoB,CAAC,iBAAyB,EAAE,QAAgB;QACtE,IAAI,GAAG,GAAG,iBAAiB,CAAC;QAE5B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YAClD,GAAG,GAAG,GAAG,iBAAiB,GAAG,iBAAiB,EAAE,CAAC;SAClD;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,GAAG,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACzD;;qHA/BU,wBAAwB;yHAAxB,wBAAwB;2FAAxB,wBAAwB;kBADpC,UAAU;;;MCEE,oBAAoB;IAC/B,YACU,mBAAwC,EACxC,WAAqC,EACrC,yBAAoD;QAFpD,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,gBAAW,GAAX,WAAW,CAA0B;QACrC,8BAAyB,GAAzB,yBAAyB,CAA2B;KAC1D;IAEJ,yBAAyB,CAAC,wBAAgC,EAAE,QAAgB;QAC1E,MAAM,8BAA8B,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAC/G,IAAI,CAAC,CAAC,8BAA8B,EAAE;YACpC,OAAO,EAAE,CAAC,8BAA8B,CAAC,CAAC;SAC3C;QAED,OAAO,IAAI,CAAC,4BAA4B,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC/E,GAAG,CAAC,CAAC,wBAAwB,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC,EACnG,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,UAAU,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;YAEzE,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;IAED,uBAAuB,CAAC,QAAgB,EAAE,wBAAgD;QACxF,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,wBAAwB,EAAE,wBAAwB,EAAE,QAAQ,CAAC,CAAC;KACpG;IAEO,4BAA4B,CAAC,wBAAgC,EAAE,QAAgB;QACrF,OAAO,IAAI,CAAC,WAAW,CAAC,4BAA4B,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;KAC1F;;iHA7BU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU;;;MCDE,2BAA2B;IAGtC,YACqC,GAAQ,EACnC,aAA4B,EAC5B,UAAsB,EACtB,kBAAsC,EAC9C,eAAiC;QAJE,QAAG,GAAH,GAAG,CAAK;QACnC,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAY;QACtB,uBAAkB,GAAlB,kBAAkB,CAAoB;QAG9C,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAC5D;IAED,wBAAwB,CAAC,QAAgB,EAAE,YAA2D;QACpG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,8CAA8C,CAAC,CAAC;QACtF,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAEpF,OAAO,IAAI,CAAC,oCAAoC,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KACjE;IAEO,oCAAoC,CAAC,GAAW,EAAE,QAAgB;QACxE,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAC1E,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+CAA+C,GAAG,GAAG,CAAC,CAAC;QAE7F,OAAO,IAAI,UAAU,CAAC,CAAC,QAAQ;YAC7B,MAAM,aAAa,GAAG;gBACpB,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;gBACzD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oCAAoC,CAAC,CAAC;gBAC5E,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB,CAAC;YACF,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACtD,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACnD,CAAC,CAAC;KACJ;IAEO,sBAAsB,CAAC,QAAgB;QAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAEjC,MAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,wBAAwB,EAAE,CAAC,CAAc;YACjG,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,EAAE;gBAC3B,kBAAkB,EAAE,CAAC;gBACrB,mBAAmB,EAAE,CAAC;aACvB;SACF,CAAC,CAAC;QACH,MAAM,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,2BAA2B,EAAE,CAAC,CAAC,KACxF,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAC7D,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAChC,IAAI,WAAW,CAAC,wBAAwB,EAAE;YACxC,MAAM,EAAE,UAAU;SACnB,CAAC,CACH,CAAC;KACH;;wHAvDU,2BAA2B,kBAI5B,QAAQ;4HAJP,2BAA2B,cADd,MAAM;2FACnB,2BAA2B;kBADvC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;0BAK7B,MAAM;2BAAC,QAAQ;;;MCFP,iCAAiC;IAC5C,YACU,aAA4B,EAC5B,oBAA0C,EAC1C,YAA0B,EAC1B,eAAgC;QAHhC,kBAAa,GAAb,aAAa,CAAe;QAC5B,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;KACtC;IAEJ,+BAA+B,CAC7B,QAAgB,EAChB,mBAAkE;QAElE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC,IAAI,CAC9E,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;YAC9C,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACH;;8HAtBU,iCAAiC;kIAAjC,iCAAiC,cADpB,MAAM;2FACnB,iCAAiC;kBAD7C,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;ACQ3B,MAAM,kBAAkB,GAAG,CAAC,CAAC;MAEvB,qBAAqB;IAChC,YACU,UAAsB,EACtB,qBAA4C,EAC5C,gBAAkC,EAClC,aAA4B,EAC5B,kBAAsC,EACtC,gBAAkC,EAClC,oBAA0C,EAC1C,2BAAwD,EACxD,yBAAoD,EACpD,iCAAoE,EACpE,WAAwB;QAVxB,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAa,GAAb,aAAa,CAAe;QAC5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,sCAAiC,GAAjC,iCAAiC,CAAmC;QACpE,gBAAW,GAAX,WAAW,CAAa;KAC9B;IAEJ,uBAAuB,CAAC,QAAgB,EAAE,iBAAgE;QACxG,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QAEtD,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;KAC9D;IAED,mBAAmB,CAAC,QAAgB,EAAE,iBAAgE;QACpG,MAAM,EAAE,+BAA+B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;QAEhG,MAAM,YAAY,mCAAQ,+BAA+B,GAAK,iBAAiB,CAAE,CAAC;QAElF,IAAI,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC,QAAQ,CAAC,EAAE;YACpE,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,IAAI,CAC1D,GAAG,CAAC;gBACF,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;gBAClF,IAAI,eAAe,EAAE;oBACnB,OAAO;wBACL,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC;wBACnD,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC;wBAC3D,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC;wBACzD,eAAe;wBACf,QAAQ;qBACQ,CAAC;iBACpB;gBAED,OAAO,IAAI,CAAC;aACb,CAAC,CACH,CAAC;SACH;QAED,MAAM,EAAE,2BAA2B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACpG,MAAM,WAAW,GAAG,2BAA2B,GAAG,IAAI,CAAC;QAEvD,OAAO,QAAQ,CAAC;YACd,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,iBAAiB,CAAC;YACrD,IAAI,CAAC,kBAAkB,CAAC,kCAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACzE,CAAC,CAAC,IAAI,CACL,OAAO,CAAC,WAAW,CAAC,EACpB,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAC/C,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC;;YACvB,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAClF,IAAI,eAAe,EAAE;gBACnB,OAAO;oBACL,OAAO,EAAE,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,UAAU,0CAAE,QAAQ;oBAC9C,WAAW,EAAE,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,UAAU,0CAAE,YAAY;oBACtD,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC;oBACzD,eAAe;oBACf,QAAQ;iBACT,CAAC;aACH;YAED,OAAO,IAAI,CAAC;SACb,CAAC,CACH,CAAC;KACH;IAEO,mBAAmB,CAAC,iBAA+D,EAAE,QAAgB;QAC3G,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;QAEhF,IAAI,iBAAiB,EAAE;YACrB,IAAI,eAAe,EAAE;gBACnB,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,4BAA4B,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;aACjG;iBAAM;gBACL,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,gCAAgC,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;aACrG;SACF;KACF;IAEO,mBAAmB,CACzB,QAAgB,EAChB,iBAAgE;QAEhE,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAClF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,oBAAoB,EAAE,CAAC,CAAC;QAC/F,MAAM,gBAAgB,GAAG,CAAC,oBAAoB,CAAC;QAE/C,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEvG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC;YAEzE,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CACjG,SAAS,CAAC;YACR,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAEtD,IAAI,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC,QAAQ,CAAC,EAAE;;gBAEpE,OAAO,IAAI,CAAC,iCAAiC,CAAC,+BAA+B,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;aAC5G;YAED,OAAO,IAAI,CAAC,2BAA2B,CAAC,wBAAwB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;SAC/F,CAAC,CACH,CAAC;KACH;IAEO,oBAAoB,CAAC,aAA8B,EAAE,QAAgB;QAC3E,OAAO,aAAa,CAAC,IAAI,CACvB,QAAQ,CAAC,CAAC,KAAK,EAAE,KAAK;YACpB,MAAM,eAAe,GAAG,IAAI,CAAC;YAC7B,MAAM,cAAc,GAAG,KAAK,GAAG,CAAC,CAAC;YAEjC,IAAI,EAAE,KAAK,YAAY,YAAY,CAAC,IAAI,cAAc,GAAG,kBAAkB,EAAE;gBAC3E,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;YAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,cAAc,EAAE,CAAC,CAAC;YAEjG,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAExD,OAAO,KAAK,CAAC,cAAc,GAAG,eAAe,CAAC,CAAC;SAChD,CAAC,CACH,CAAC;KACH;;kHAtIU,qBAAqB;sHAArB,qBAAqB,cADR,MAAM;2FACnB,qBAAqB;kBADjC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCCrB,6BAA6B;IACxC,YACU,oBAA0C,EAC1C,UAAsB,EACtB,qBAA4C,EAC5C,gBAAkC,EAClC,aAA4B,EAC5B,WAAwB,EACxB,gBAAkC,EAClC,2BAAwD,EACxD,iCAAoE,EACpE,eAAgC,EAChC,yBAAoD,EACpD,mBAAwC;QAXxC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,sCAAiC,GAAjC,iCAAiC,CAAmC;QACpE,oBAAe,GAAf,eAAe,CAAiB;QAChC,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,wBAAmB,GAAnB,mBAAmB,CAAqB;KAC9C;IAEJ,gCAAgC;QAC9B,MAAM,6BAA6B,GAAG,IAAI,CAAC,gCAAgC,EAAE,CAAC;QAC9E,IAAI,6BAA6B,CAAC,MAAM,IAAI,CAAC,EAAE;YAC7C,OAAO;SACR;QAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,iCAAiC,CAAC,6BAA6B,CAAC,CAAC;QAEnG,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,yBAAyB,EAAE;YACpD,OAAO;SACR;;QAGD,MAAM,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAChG,SAAS,CAAC;YACR,MAAM,kCAAkC,GAAG,EAAE,CAAC;YAC9C,6BAA6B,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE;gBACjD,kCAAkC,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC/E,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC,kCAAkC,CAAC,CAAC;SACrD,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,yBAAyB,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC,mBAAmB;YAChG,KAAK,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;gBAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,wCAAwC,CAAC,CAAC;gBAE3E,IAAI,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC,GAAG,CAAC,EAAE;oBAC/D,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;iBACpD;aACF;SACF,CAAC,CAAC;KACJ;IAEO,eAAe,CAAC,QAAgB;QACtC,MAAM,uBAAuB,GAAG,IAAI,CAAC,qCAAqC,CAAC,QAAQ,CAAC,CAAC;QAErF,IAAI,CAAC,uBAAuB,EAAE;YAC5B,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;QAEjE,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QAElE,MAAM,6BAA6B,GAAG,aAAa,CAAC,IAAI,CACtD,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,EAAE,KAAK,CAAC,CAAC;YACrE,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAExD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;QAEF,OAAO,6BAA6B,CAAC;KACtC;IAEO,iCAAiC,CAAC,6BAAoD;QAC5F,MAAM,MAAM,GAAG,6BAA6B,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,KAC7D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,GAAG,IAAI,GAAG,IAAI,CACtE,CAAC;QAEF,OAAO,MAAM,CAAC,qBAAqB,CAAC;KACrC;IAEO,gCAAgC;QACtC,OAAO,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC;KACvF;IAEO,2BAA2B,CAAC,QAAgB;QAClD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC;QAElE,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE3E,IAAI,EAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,CAAA,EAAE;YACxB,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAE3D,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEtD,IAAI,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC,QAAQ,CAAC,EAAE;;YAEpE,MAAM,mBAAmB,GACvB,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,4BAA4B,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEpF,MAAM,EAAE,+BAA+B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;YAExG,MAAM,YAAY,mCAAQ,+BAA+B,GAAK,mBAAmB,CAAE,CAAC;;YAGpF,OAAO,IAAI,CAAC,iCAAiC,CAAC,+BAA+B,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SACvG;;QAGD,MAAM,YAAY,GAAiD,IAAI,CAAC,yBAAyB,CAAC,IAAI,CACpG,gCAAgC,EAChC,QAAQ,CACT,CAAC;QAEF,OAAO,IAAI,CAAC,2BAA2B,CAAC,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAC1F;IAEO,qCAAqC,CAAC,QAAgB;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC3D,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAClF,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAE1E,IAAI,CAAC,aAAa,CAAC,QAAQ,CACzB,QAAQ,EACR,iCAAiC,oBAAoB,mBAAmB,CAAC,CAAC,OAAO,oBAAoB,CAAC,CAAC,iBAAiB,EAAE,CAC3H,CAAC;QAEF,MAAM,gBAAgB,GAAG,CAAC,CAAC,iBAAiB,IAAI,CAAC,oBAAoB,IAAI,CAAC,CAAC,OAAO,CAAC;QAEnF,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,uCAAuC,CAAC,QAAQ,CAAC,CAAC;QAClG,MAAM,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,QAAQ,CAAC,CAAC;QAElG,IAAI,CAAC,iBAAiB,IAAI,CAAC,qBAAqB,EAAE;YAChD,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;0HAjJU,6BAA6B;8HAA7B,6BAA6B,cADhB,MAAM;2FACnB,6BAA6B;kBADzC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCZrB,YAAY;IADzB;QAEU,uBAAkB,GAAG,WAAW,CAAC;QAGjC,oBAAe,GAAG,IAAI,OAAO,EAAe,CAAC;KAiFtD;IA/EC,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;KAC5C;IAED,kBAAkB;QAChB,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,MAAM,KAAK,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAE9D,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC;SAC/D;QAED,OAAO,KAAK,CAAC;KACd;IAED,SAAS,CAAC,GAAW,EAAE,YAA2B;QAChD,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;QAEnE,MAAM,QAAQ,GAAG,CAAC,KAAmB;YACnC,IAAI,EAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAA,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAClD,OAAO;aACR;YAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YAE1E,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SACxB,CAAC;QAEF,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEpD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;YAC/B,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACrB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;gBAEhD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aACxB;SACF,EAAE,GAAG,CAAC,CAAC;KACT;IAED,uBAAuB,CAAC,GAAW;QACjC,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC7C;KACF;IAEO,OAAO,CAAC,QAAa;;QAC3B,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEvD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAElC,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,MAAA,IAAI,CAAC,KAAK,CAAC,cAAc,0CAAE,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;KACF;IAEO,WAAW,CAAC,GAAW,EAAE,IAAY;QAC3C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACtC;IAEO,UAAU,CAAC,YAA2B;QAC5C,MAAM,mBAAmB,GAAiB,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;QAEzF,MAAM,OAAO,mCAAsB,mBAAmB,IAAM,YAAY,IAAI,EAAE,EAAG,CAAC;QAClF,MAAM,IAAI,GAAW,MAAM,CAAC,UAAU,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC;QACjF,MAAM,GAAG,GAAW,MAAM,CAAC,SAAS,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;QACjF,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;QAElB,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;aAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;aAChF,IAAI,CAAC,GAAG,CAAC,CAAC;KACd;IAEO,uBAAuB;QAC7B,OAAO,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,aAAa,IAAI,OAAO,OAAO,KAAK,WAAW,CAAC;KACtG;;yGApFU,YAAY;6GAAZ,YAAY,cADC,MAAM;2FACnB,YAAY;kBADxB,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCerB,gBAAgB;IAC3B,YACU,mBAAwC,EACxC,iBAAoC,EACpC,kBAAsC,EACtC,WAAwB,EACxB,aAA4B,EAC5B,qBAA4C,EAC5C,gBAAkC,EAClC,eAAgC,EAChC,qBAA4C,EAC5C,6BAA4D,EAC5D,YAA0B,EAC1B,gBAAkC,EAClC,yBAAoD;QAZpD,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,gBAAW,GAAX,WAAW,CAAa;QACxB,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;QAChC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,8BAAyB,GAAzB,yBAAyB,CAA2B;KAC1D;IAEJ,SAAS,CAAC,cAAuB,EAAE,GAAY;QAC7C,IAAI,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,EAAE;YACpD,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,CAAC;YAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,CAAC;YAEpE,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,UAAU,CAAC,4CAA4C,iBAAiB,EAAE,CAAC,CAAC;aACpF;YAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SAC9C;QAED,IAAI,CAAC,CAAC,cAAc,EAAE;YACpB,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YAEjF,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SAC9C;QAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;QAE/E,OAAO,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;KAC1D;IAED,iBAAiB,CAAC,cAAuB,EAAE,GAAY;QACrD,IAAI,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,EAAE;YACpD,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,CAAC;YAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,CAAC;YAEpE,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,UAAU,CAAC,4CAA4C,iBAAiB,EAAE,CAAC,CAAC;aACpF;YAED,OAAO,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,CAAC,cAAc,EAAE;YACpB,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YAEjF,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,UAAU,CAAC,yCAAyC,cAAc,EAAE,CAAC,CAAC;aAC9E;YAED,OAAO,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACtD;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QACrE,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAE3E,OAAO,QAAQ,CAAC,UAAU,CAAC,CAAC;KAC7B;IAED,wBAAwB,CAAC,QAAgB;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE3E,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,IAAI,CAC1C,SAAS,CAAC,CAAC,aAAa;YACtB,MAAM,EAAE,eAAe,EAAE,GAAG,aAAa,CAAC;YAE1C,IAAI,eAAe,EAAE;gBACnB,OAAO,EAAE,CAAC,aAAa,CAAC,CAAC;aAC1B;YAED,OAAO,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAClE,GAAG,CAAC,CAAC,gCAAgC;gBACnC,IAAI,gCAAgC,aAAhC,gCAAgC,uBAAhC,gCAAgC,CAAE,eAAe,EAAE;oBACrD,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;iBAC/C;aACF,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;IAEO,mBAAmB,CAAC,MAA2B,EAAE,GAAY;QACnE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QAEvC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,EAAE;YACrD,MAAM,YAAY,GAAG,wEAAwE,CAAC;YAC9F,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,EAAE,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;SACjH;QAED,MAAM,UAAU,GAAG,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAEjE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,wBAAwB,QAAQ,WAAW,SAAS,EAAE,CAAC,CAAC;QAE9F,IAAI,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,EAAE;YAC1C,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAEtD,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAE/D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,EAAE,UAAU,CAAC,CAAC;QAErF,MAAM,SAAS,GAAG,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,2BAA2B,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAEjH,OAAO,SAAS,CAAC,IAAI,CACnB,GAAG,CAAC;YACF,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAClF,IAAI,eAAe,EAAE;gBACnB,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;gBAE9C,IAAI,CAAC,UAAU,EAAE;oBACf,IAAI,CAAC,gBAAgB,CAAC,4BAA4B,EAAE,CAAC;oBACrD,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;iBACpD;aACF;YAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,4DAA4D,GAAG,eAAe,CAAC,CAAC;YAEtH,OAAO;gBACL,eAAe;gBACf,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC;gBACzD,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC;gBAC3D,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACnD,QAAQ;aACT,CAAC;SACH,CAAC,EACF,GAAG,CAAC,CAAC,EAAE,eAAe,EAAE;YACtB,IAAI,eAAe,EAAE;gBACnB,IAAI,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,QAAQ,CAAC,CAAC;aACpE;SACF,CAAC,EACF,UAAU,CAAC,CAAC,YAAY;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,EAAE,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;SACjH,CAAC,CACH,CAAC;KACH;IAEO,8BAA8B,CAAC,QAAgB;QACrD,IAAI,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE;YAC/D,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,6BAA6B,CAAC,gCAAgC,EAAE,CAAC;QAEtE,IAAI,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE;YAC7D,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SACrD;KACF;IAEO,4BAA4B,CAAC,YAAoB;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QAErE,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;YAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAE7F,IAAI,WAAW,KAAK,YAAY,EAAE;gBAChC,OAAO,MAAM,CAAC;aACf;SACF;QAED,OAAO,IAAI,CAAC;KACb;IAEO,2BAA2B,CAAC,YAAiC,EAAE,GAAY;QACjF,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE9H,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAExE,MAAM,qBAAqB,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM;YACvD,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;YAE/B,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;SACtD,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC,CAAC,mBAAmB,EAAE,GAAG,qBAAqB,CAAC,CAAC,CAAC;KAClE;;6GA7LU,gBAAgB;iHAAhB,gBAAgB;2FAAhB,gBAAgB;kBAD5B,UAAU;;;AChBJ,MAAM,cAAc,GAAwB;IACjD,SAAS,EAAE,oBAAoB;IAC/B,wBAAwB,EAAE,EAAE;IAC5B,sBAAsB,EAAE,IAAI;IAC5B,WAAW,EAAE,oBAAoB;IACjC,QAAQ,EAAE,YAAY;IACtB,YAAY,EAAE,MAAM;IACpB,KAAK,EAAE,sBAAsB;IAC7B,OAAO,EAAE,EAAE;IACX,qBAAqB,EAAE,oBAAoB;IAC3C,iBAAiB,EAAE,KAAK;IACxB,WAAW,EAAE,KAAK;IAClB,cAAc,EAAE,oBAAoB;IACpC,2BAA2B,EAAE,EAAE;IAC/B,oCAAoC,EAAE,CAAC;IACvC,eAAe,EAAE,KAAK;IACtB,8BAA8B,EAAE,KAAK;IACrC,uBAAuB,EAAE,KAAK;IAC9B,cAAc,EAAE,GAAG;IACnB,cAAc,EAAE,YAAY;IAC5B,iBAAiB,EAAE,eAAe;IAClC,YAAY,EAAE,IAAI;IAClB,iCAAiC,EAAE,IAAI;IACvC,+BAA+B,EAAE,KAAK;IACtC,QAAQ,EAAE,QAAQ,CAAC,IAAI;IACvB,gBAAgB,EAAE,KAAK;IACvB,iBAAiB,EAAE,KAAK;IACxB,mCAAmC,EAAE,GAAG;IACxC,0BAA0B,EAAE,KAAK;IACjC,OAAO,EAAE,IAAI;IACb,uBAAuB,EAAE,EAAE;IAC3B,+BAA+B,EAAE,EAAE;IACnC,6BAA6B,EAAE,EAAE;IACjC,uBAAuB,EAAE,EAAE;IAC3B,+BAA+B,EAAE,IAAI;IACrC,uCAAuC,EAAE,KAAK;IAC9C,qCAAqC,EAAE,IAAI;IAC3C,qBAAqB,EAAE,CAAC;IACxB,0BAA0B,EAAE,CAAC;IAC7B,UAAU,EAAE,KAAK;CAClB;;AC/BM,MAAM,0BAA0B,GAAG;IACxC,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,EAAE;IACZ,KAAK,EAAE,IAAI;CACZ;;ACbM,MAAM,eAAe,GAAG,CAAC,YAAiC;IAC/D,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;QAC3B,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,2DAA2D,CAAC;YACvE,KAAK,EAAE,OAAO;SACf,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACVM,MAAM,cAAc,GAAG,CAAC,YAAiC;IAC9D,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;QAC1B,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,wDAAwD,CAAC;YACpE,KAAK,EAAE,OAAO;SACf,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACVD,MAAM,uBAAuB,GAAG,CAAC,YAAiC;IAChE,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,YAAY,CAAC;IAEpD,OAAO,GAAG,SAAS,GAAG,QAAQ,GAAG,KAAK,EAAE,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,KAAe,KAAc,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC;AAEvF,MAAM,6BAA6B,GAAG,CAAC,aAAoC;IAChF,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;IAE3D,IAAI,WAAW,EAAE;QACf,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,sGAAsG,CAAC;YAClH,KAAK,EAAE,OAAO;SACf,CAAC;KACH;IAED,MAAM,aAAa,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IAEzD,IAAI,aAAa,EAAE;QACjB,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,wEAAwE,CAAC;YACpF,KAAK,EAAE,SAAS;SACjB,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACpCM,MAAM,kBAAkB,GAAG,CAAC,YAAiC;IAClE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;QAC7B,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,0DAA0D,CAAC;YACtE,KAAK,EAAE,OAAO;SACf,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACVM,MAAM,0CAA0C,GAAG,CAAC,YAAiC;IAC1F,MAAM,eAAe,GAAG,YAAY,CAAC,WAAW,CAAC;IACjD,MAAM,gBAAgB,GAAG,YAAY,CAAC,eAAe,CAAC;IACtD,MAAM,iBAAiB,GAAG,YAAY,CAAC,cAAc,CAAC;IAEtD,IAAI,eAAe,IAAI,CAAC,gBAAgB,IAAI,CAAC,iBAAiB,EAAE;QAC9D,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,yEAAyE,CAAC;YACrF,KAAK,EAAE,OAAO;SACf,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACdM,MAAM,8BAA8B,GAAG,CAAC,YAAiC;IAC9E,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;IACrD,MAAM,cAAc,GAAG,YAAY,CAAC,WAAW,CAAC;IAChD,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,IAAI,EAAE,CAAC;IACvC,MAAM,eAAe,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAEpE,IAAI,eAAe,IAAI,cAAc,IAAI,CAAC,eAAe,EAAE;QACzD,OAAO;YACL,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,CAAC,kFAAkF,CAAC;YAC9F,KAAK,EAAE,SAAS;SACjB,CAAC;KACH;IAED,OAAO,0BAA0B,CAAC;AACpC,CAAC;;ACXM,MAAM,QAAQ,GAAG;IACtB,eAAe;IACf,8BAA8B;IAC9B,kBAAkB;IAClB,cAAc;IACd,0CAA0C;CAC3C,CAAC;AAEK,MAAM,sBAAsB,GAAG,CAAC,6BAA6B,CAAC;;MCPxD,uBAAuB;IAClC,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEpD,eAAe,CAAC,aAAoC;QAClD,OAAO,IAAI,CAAC,uBAAuB,CAAC,aAAa,EAAE,sBAAsB,CAAC,CAAC;KAC5E;IAED,cAAc,CAAC,YAAiC;QAC9C,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC5D;IAEO,uBAAuB,CAAC,aAAoC,EAAE,aAAoB;QACxF,MAAM,oBAAoB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAE9E,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAC1B,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY;YACjC,MAAM,UAAU,GAAG,IAAI,CAAC,wCAAwC,CAAC,oBAAoB,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,CAAC,CAAC;YAC/G,iBAAiB,IAAI,UAAU,CAAC;SACjC,CAAC,CAAC;QAEH,OAAO,iBAAiB,KAAK,CAAC,CAAC;KAChC;IAEO,sBAAsB,CAAC,YAAiC,EAAE,aAAoB;QACpF,MAAM,oBAAoB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAE7E,MAAM,UAAU,GAAG,IAAI,CAAC,wCAAwC,CAAC,oBAAoB,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE9G,OAAO,UAAU,KAAK,CAAC,CAAC;KACzB;IAEO,wCAAwC,CAAC,oBAA4C,EAAE,QAAgB;QAC7G,MAAM,WAAW,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE9E,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACtE,gBAAgB,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QACtF,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEnF,OAAO,gBAAgB,CAAC,MAAM,CAAC;KAChC;IAEO,oBAAoB,CAAC,IAAW,EAAE,OAA+B;QACvE,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC;QAE7F,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;KAC9D;;oHA9CU,uBAAuB;wHAAvB,uBAAuB;2FAAvB,uBAAuB;kBADnC,UAAU;;;MCHE,gBAAgB;IAK3B,YAAyC,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;KAAI;IAJ/D,IAAI,SAAS;QACX,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC3C;;6GAHU,gBAAgB,kBAKP,WAAW;iHALpB,gBAAgB;2FAAhB,gBAAgB;kBAD5B,UAAU;;0BAMI,MAAM;2BAAC,WAAW;;;MCLpB,4BAA4B;IAChC,IAAI,CAAC,GAAW;QACrB,OAAO,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KACpC;IAEM,KAAK,CAAC,GAAW,EAAE,KAAU;QAClC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACpC;IAEM,MAAM,CAAC,GAAW;QACvB,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;KAChC;IAEM,KAAK;QACV,cAAc,CAAC,KAAK,EAAE,CAAC;KACxB;;yHAfU,4BAA4B;6HAA5B,4BAA4B;2FAA5B,4BAA4B;kBADxC,UAAU;;;MCaE,iBAAiB;IAC5B,YACU,aAA4B,EAC5B,mBAAwC,EACxC,qBAA4C,EAC5C,oBAA0C,EAC1C,yBAAoD,EACpD,uBAAgD,EAChD,gBAAkC,EAClC,4BAA0D;QAP1D,kBAAa,GAAb,aAAa,CAAe;QAC5B,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iCAA4B,GAA5B,4BAA4B,CAA8B;KAChE;IAEJ,WAAW,CAAC,aAAoC;QAC9C,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;YAChE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;QACpC,MAAM,uBAAuB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/E,OAAO,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;KAC7C;IAEO,eAAe,CAAC,aAAoC;QAC1D,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK;YAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACpB,MAAM,CAAC,QAAQ,GAAG,GAAG,KAAK,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;aACjD;SACF,CAAC,CAAC;KACJ;IAEO,YAAY,CAAC,YAAiC;QACpD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,+DAA+D,CAAC,CAAC;gBACpH,OAAO,CAAC,IAAI,CAAC,CAAC;gBAEd,OAAO;aACR;YAED,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;gBAC1C,YAAY,CAAC,wBAAwB,GAAG,YAAY,CAAC,SAAS,CAAC;aAChE;YAED,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAEjD,MAAM,qCAAqC,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;YACjI,IAAI,CAAC,CAAC,qCAAqC,EAAE;gBAC3C,UAAU,CAAC,sBAAsB,GAAG,qCAAqC,CAAC;gBAC1E,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAsB,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;gBAE7F,OAAO,CAAC,UAAU,CAAC,CAAC;gBAEpB,OAAO;aACR;YAED,MAAM,4BAA4B,GAAG,UAAU,CAAC,sBAAsB,CAAC;YAEvE,IAAI,CAAC,CAAC,4BAA4B,EAAE;gBAClC,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,UAAU,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;gBACrG,UAAU,CAAC,sBAAsB,GAAG,4BAA4B,CAAC;gBACjE,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAsB,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;gBAE7F,OAAO,CAAC,UAAU,CAAC,CAAC;gBAEpB,OAAO;aACR;YAED,IAAI,UAAU,CAAC,+BAA+B,EAAE;gBAC9C,IAAI,CAAC,oBAAoB;qBACtB,yBAAyB,CAAC,UAAU,CAAC,wBAAwB,EAAE,UAAU,CAAC,QAAQ,CAAC;qBACnF,IAAI,CACH,UAAU,CAAC,CAAC,KAAK;oBACf,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,mDAAmD,EAAE,KAAK,CAAC,CAAC;oBAE7G,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;iBAC1B,CAAC,EACF,GAAG,CAAC,CAAC,kBAAkB;oBACrB,UAAU,CAAC,sBAAsB,GAAG,kBAAkB,CAAC;oBACvD,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAsB,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;iBAC9F,CAAC,CACH;qBACA,SAAS,CACR,MAAM,OAAO,CAAC,UAAU,CAAC,EAEzB,MAAM,MAAM,EAAE,CACf,CAAC;aACL;iBAAM;gBACL,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAsB,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;gBAC7F,OAAO,CAAC,UAAU,CAAC,CAAC;aACrB;SACF,CAAC,CAAC;KACJ;IAEO,aAAa,CAAC,aAAkC;QACtD,MAAM,2BAA2B,mCAAQ,cAAc,GAAK,aAAa,CAAE,CAAC;QAC5E,IAAI,CAAC,eAAe,CAAC,2BAA2B,CAAC,CAAC;QAClD,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;QAE7C,OAAO,2BAA2B,CAAC;KACpC;IAEO,eAAe,CAAC,aAAkC;QACxD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACpC,aAAa,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACxC,aAAa,CAAC,WAAW,GAAG,KAAK,CAAC;YAClC,aAAa,CAAC,eAAe,GAAG,KAAK,CAAC;YACtC,aAAa,CAAC,8BAA8B,GAAG,KAAK,CAAC;SACtD;KACF;IAEO,UAAU,CAAC,aAAkC;QACnD,IAAI,aAAa,CAAC,OAAO,EAAE;YACzB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC5B,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,4BAA4B,CAAC;SAC3D;aAAM;YACL,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9B;KACF;IAEO,iBAAiB;QACvB,OAAO,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,aAAa,IAAI,OAAO,OAAO,KAAK,WAAW,CAAC;KACtG;;8GA9HU,iBAAiB;kHAAjB,iBAAiB;2FAAjB,iBAAiB;kBAD7B,UAAU;;;MCZE,kBAAkB;CAE9B;MAEqB,eAAe;CAEpC;MAEY,qBAAqB;IAChC,YAAoB,aAA0D;QAA1D,kBAAa,GAAb,aAAa,CAA6C;KAAI;IAElF,WAAW;QACT,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YACrC,MAAM,wBAAwB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAExG,OAAO,wBAAwB,CAAC;SACjC;QAED,MAAM,mBAAmB,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAErF,OAAO,CAAC,mBAAmB,CAAC,CAAC;KAC9B;CACF;MAEY,mBAAmB;IAC9B,YAAoB,QAAuE;QAAvE,aAAQ,GAAR,QAAQ,CAA+D;KAAI;IAE/F,WAAW;QACT,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACvE;;;MC5BU,2BAA2B;IACtC,YAAoB,cAAqC;QAArC,mBAAc,GAAd,cAAc,CAAuB;KAAI;IAE7D,kCAAkC,CAAC,KAAa;QAC9C,MAAM,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE1D,KAAK,MAAM,gBAAgB,IAAI,mBAAmB,EAAE;YAClD,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,MAAM,CAAC;YAEnD,KAAK,MAAM,eAAe,IAAI,kBAAkB,EAAE;gBAChD,IAAI,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;oBACrC,OAAO;wBACL,aAAa,EAAE,eAAe;wBAC9B,gBAAgB,EAAE,gBAAgB,CAAC,QAAQ;qBAC5C,CAAC;iBACH;aACF;SACF;QAED,OAAO;YACL,aAAa,EAAE,IAAI;YACnB,gBAAgB,EAAE,IAAI;SACvB,CAAC;KACH;IAEO,sBAAsB;QAC5B,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC;QAErE,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;KACzF;;wHA7BU,2BAA2B;4HAA3B,2BAA2B;2FAA3B,2BAA2B;kBADvC,UAAU;;;MCEE,6BAA6B;IACxC,YAAoB,aAA4B,EAAU,UAAsB;QAA5D,kBAAa,GAAb,aAAa,CAAe;QAAU,eAAU,GAAV,UAAU,CAAY;KAAI;IAEpF,0BAA0B,CAAC,QAAgB;QACzC,IAAI,IAAI,CAAC,UAAU,CAAC,4BAA4B,CAAC,QAAQ,CAAC,EAAE;YAC1D,OAAO,IAAI,CAAC;SACb;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,4FAA4F,CAAC,CAAC;QAEtI,OAAO,KAAK,CAAC;KACd;;0HAfU,6BAA6B;8HAA7B,6BAA6B;2FAA7B,6BAA6B;kBADzC,UAAU;;;MCAE,eAAe;IAC1B,YAA+C,GAAQ;QAAR,QAAG,GAAH,GAAG,CAAK;KAAI;IAE3D,UAAU,CAAC,GAAG;QACZ,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;KAC9B;;4GALU,eAAe,kBACN,QAAQ;gHADjB,eAAe,cADF,MAAM;2FACnB,eAAe;kBAD3B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;0BAEnB,MAAM;2BAAC,QAAQ;;;MCMjB,UAAU;IACrB,YACU,aAA4B,EAC5B,UAAsB,EACtB,WAAwB,EACxB,yBAAoD;QAHpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAY;QACtB,gBAAW,GAAX,WAAW,CAAa;QACxB,8BAAyB,GAAzB,yBAAyB,CAA2B;KAC1D;IAEJ,cAAc,CAAC,QAAgB,EAAE,YAA2D;QAC1F,IAAI,OAAO,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAE3E,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;QAEvG,IAAI,CAAC,sBAAsB,EAAE;YAC3B,OAAO,UAAU,CAAC,0EAA0E,CAAC,CAAC;SAC/F;QAED,MAAM,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC;QACvD,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,UAAU,CAAC,yDAAyD,CAAC,CAAC;SAC9E;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAErF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CACrE,KAAK,CAAC,CAAC,CAAC,EACR,GAAG,CAAC,CAAC,QAAa;YAChB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAElE,OAAO;gBACL,SAAS,EAAE,QAAQ,CAAC,UAAU;gBAC9B,UAAU,EAAE,QAAQ,CAAC,WAAW;aACjC,CAAC;SACH,CAAC,EACF,UAAU,CAAC,CAAC,KAAK;YACf,MAAM,YAAY,GAAG,iDAAiD,CAAC;YACvE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACH;;uGA1CU,UAAU;2GAAV,UAAU;2FAAV,UAAU;kBADtB,UAAU;;;MCSE,eAAe;IAC1B,YACU,aAA4B,EAC5B,6BAA4D,EAC5D,UAAsB,EACtB,eAAgC,EAChC,qBAA4C,EAC5C,oBAA0C,EAC1C,YAA0B,EAC1B,gBAAkC,EAClC,UAAsB;QARtB,kBAAa,GAAb,aAAa,CAAe;QAC5B,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,eAAU,GAAV,UAAU,CAAY;QACtB,oBAAe,GAAf,eAAe,CAAiB;QAChC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,eAAU,GAAV,UAAU,CAAY;KAC5B;IAEJ,QAAQ,CAAC,QAAgB,EAAE,WAAyB;QAClD,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;YAC5E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;YAEhE,OAAO;SACR;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC;YAEzE,OAAO;SACR;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,CAAC,CAAC;QAEjF,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;QAEvD,IAAI,CAAC,oBAAoB;aACtB,yBAAyB,CAAC,wBAAwB,EAAE,QAAQ,CAAC;aAC7D,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;aAC7E,SAAS,CAAC,CAAC,QAAQ;YAClB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAElE,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE9E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mBAAmB,EAAE,GAAG,CAAC,CAAC;YAEhE,IAAI,CAAC,GAAG,EAAE;gBACR,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mCAAmC,QAAQ,CAAC,UAAU,MAAM,GAAG,GAAG,CAAC,CAAC;gBAE1G,OAAO;aACR;YAED,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACtC;SACF,CAAC,CAAC;KACN;IAED,iBAAiB,CAAC,QAAgB,EAAE,WAAyB,EAAE,YAA2B;QACxF,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;YAC5E,MAAM,YAAY,GAAG,wBAAwB,CAAC;YAC9C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,MAAM,YAAY,GAAG,iCAAiC,CAAC;YACvD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oDAAoD,CAAC,CAAC;QAE5F,MAAM,EAAE,YAAY,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CACjG,SAAS,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,EACvE,SAAS,CAAC,CAAC,QAAqB;YAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YAElE,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE9E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mBAAmB,EAAE,GAAG,CAAC,CAAC;YAEhE,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,YAAY,GAAG,mCAAmC,QAAQ,CAAC,UAAU,SAAS,CAAC;gBACrF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;aACjC;YAED,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YAE/C,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CACnC,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,CAAC,MAA8B;gBACvC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;gBAE3C,IAAI,UAAU,EAAE;oBACd,OAAO,EAAE,CAAC;wBACR,eAAe,EAAE,KAAK;wBACtB,YAAY,EAAE,mBAAmB;wBACjC,QAAQ,EAAE,IAAI;wBACd,OAAO,EAAE,IAAI;wBACb,WAAW,EAAE,IAAI;wBACjB,QAAQ;qBACT,CAAC,CAAC;iBACJ;gBAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aAC/D,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;;4GApHU,eAAe;gHAAf,eAAe;2FAAf,eAAe;kBAD3B,UAAU;;;MCFE,iBAAiB;IAC5B,YACU,aAA4B,EAC5B,6BAA4D,EAC5D,UAAsB,EACtB,qBAA4C,EAC5C,oBAA0C,EAC1C,YAA0B,EAC1B,gBAAkC;QANlC,kBAAa,GAAb,aAAa,CAAe;QAC5B,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,qBAAgB,GAAhB,gBAAgB,CAAkB;KACxC;IAEJ,sBAAsB,CAAC,QAAgB,EAAE,WAAyB,EAAE,YAA2B;QAC7F,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;YAC5E,MAAM,YAAY,GAAG,wBAAwB,CAAC;YAC9C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,MAAM,YAAY,GAAG,iCAAiC,CAAC;YACvD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,oDAAoD,CAAC,CAAC;QAE5F,OAAO,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,IAAI,CACjG,SAAS,CAAC;YACR,MAAM,EAAE,YAAY,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;YAE3C,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAExE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YAEnD,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CACnC,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,CAAC,MAA8B;gBACvC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;gBAE3C,IAAI,UAAU,EAAE;oBACd,OAAO,EAAE,CAAC;wBACR,eAAe,EAAE,KAAK;wBACtB,YAAY,EAAE,mBAAmB;wBACjC,QAAQ,EAAE,IAAI;wBACd,OAAO,EAAE,IAAI;wBACb,WAAW,EAAE,IAAI;wBACjB,QAAQ;qBACT,CAAC,CAAC;iBACJ;gBAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aAC/D,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;;8GA3DU,iBAAiB;kHAAjB,iBAAiB;2FAAjB,iBAAiB;kBAD7B,UAAU;;;MCLE,oBAAoB;IAC/B,YACU,aAA4B,EAC5B,6BAA4D,EAC5D,UAAsB,EACtB,eAAgC,EAChC,qBAA4C,EAC5C,oBAA0C;QAL1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,eAAU,GAAV,UAAU,CAAY;QACtB,oBAAe,GAAf,eAAe,CAAiB;QAChC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,yBAAoB,GAApB,oBAAoB,CAAsB;KAChD;IAEJ,aAAa,CAAC,QAAgB,EAAE,WAAyB;QACvD,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;YAC5E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;YAEhE,OAAO;SACR;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEjG,IAAI,CAAC,wBAAwB,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC;YAEzE,OAAO;SACR;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yCAAyC,CAAC,CAAC;QAEjF,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC;YAChG,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;YAEvD,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAEpE,IAAI,CAAC,GAAG,EAAE;gBACR,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,EAAE,GAAG,CAAC,CAAC;gBAEnE,OAAO;aACR;YAED,IAAI,UAAU,EAAE;gBACd,UAAU,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;aACtC;SACF,CAAC,CAAC;KACJ;;iHA5CU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU;;;MCGE,YAAY;IACvB,YACU,qBAA4C,EAC5C,eAAgC,EAChC,iBAAoC,EACpC,oBAA0C,EAC1C,yBAAoD;QAJpD,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,oBAAe,GAAf,eAAe,CAAiB;QAChC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,8BAAyB,GAAzB,yBAAyB,CAA2B;KAC1D;IAEJ,KAAK,CAAC,QAAgB,EAAE,WAAyB;QAC/C,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,YAAY,EAAE;YAC7B,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,gCAAgC,EAAE,WAAW,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;SAC5G;QAED,MAAM,EAAE,8BAA8B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEvG,IAAI,8BAA8B,EAAE;YAClC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SAC7D;aAAM;YACL,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SACvE;KACF;IAED,cAAc,CAAC,QAAgB,EAAE,WAAyB,EAAE,YAA2B;QACrF,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,YAAY,EAAE;YAC7B,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,gCAAgC,EAAE,WAAW,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;SAC5G;QAED,MAAM,EAAE,8BAA8B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAEvG,IAAI,8BAA8B,EAAE;YAClC,OAAO,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;SACpF;aAAM;YACL,OAAO,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;SAC3F;KACF;;yGAnCU,YAAY;6GAAZ,YAAY;2FAAZ,YAAY;kBADxB,UAAU;;;MCIE,uBAAuB;IAClC,YACU,WAAwB,EACxB,yBAAoD,EACpD,aAA4B,EAC5B,UAAsB,EACtB,mBAAwC,EACxC,oBAA0C,EAC1C,eAAgC,EAChC,qBAA4C;QAP5C,gBAAW,GAAX,WAAW,CAAa;QACxB,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,oBAAe,GAAf,eAAe,CAAiB;QAChC,0BAAqB,GAArB,qBAAqB,CAAuB;KAClD;;;IAIJ,MAAM,CAAC,QAAgB,EAAE,WAAyB;QAChD,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,WAAW,IAAI,EAAE,CAAC;QAEvD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QAE9D,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAEpE,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAE3D,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,sDAAsD,CAAC,CAAC;YAE9F,OAAO;SACR;QAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;YACzD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,yDAAyD,CAAC,CAAC;SAClG;aAAM,IAAI,UAAU,EAAE;YACrB,UAAU,CAAC,aAAa,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;SAChD;KACF;IAED,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;KACjC;IAED,mBAAmB;QACjB,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QAErE,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;KAClE;;;IAID,qBAAqB,CAAC,QAAgB,EAAE,WAAyB;QAC/D,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE7G,IAAI,CAAC,kBAAkB,EAAE;YACvB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,mCAAmC,CAAC,CAAC;YAC3E,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SACpC;QAED,IAAI,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YAC5D,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC3C,SAAS,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,EAC/D,UAAU,CAAC,CAAC,KAAK;gBACf,MAAM,YAAY,GAAG,qBAAqB,CAAC;gBAC3C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;aACjC,CAAC,EACF,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAC9C,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC1C,UAAU,CAAC,CAAC,KAAK;gBACf,MAAM,YAAY,GAAG,2BAA2B,CAAC;gBACjD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;aACjC,CAAC,EACF,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAC9C,CAAC;SACH;KACF;;;;;IAMD,iBAAiB,CAAC,QAAgB,EAAE,WAAiB;QACnD,MAAM,SAAS,GAAG,WAAW,IAAI,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzF,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,uCAAuC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAE1F,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC/C;;;;;IAMD,kBAAkB,CAAC,QAAgB,EAAE,YAAkB;QACrD,MAAM,UAAU,GAAG,YAAY,IAAI,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC5F,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,wCAAwC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAE5F,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC/C;IAED,gBAAgB,CAAC,QAAgB,EAAE,YAAyD;QAC1F,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACpE,MAAM,EAAE,6BAA6B,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC;QAE9F,MAAM,YAAY,mCAAQ,6BAA6B,GAAK,YAAY,CAAE,CAAC;QAE3E,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;KAC7E;IAEO,iBAAiB,CAAC,QAAgB,EAAE,IAAY;QACtD,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QAE/D,IAAI,OAAO,GAAgB,IAAI,WAAW,EAAE,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAE3E,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAC7D,KAAK,CAAC,CAAC,CAAC,EACR,SAAS,CAAC,CAAC,QAAa;YACtB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,qCAAqC,EAAE,QAAQ,CAAC,CAAC;YAEvF,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;SACrB,CAAC,EACF,UAAU,CAAC,CAAC,KAAK;YACf,MAAM,YAAY,GAAG,2BAA2B,CAAC;YACjD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAE3D,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC;SACjC,CAAC,CACH,CAAC;KACH;;oHAtIU,uBAAuB;wHAAvB,uBAAuB;2FAAvB,uBAAuB;kBADnC,UAAU;;;MCQE,mBAAmB;IAuC9B,YACU,mBAAwC,EACxC,gBAAkC,EAClC,WAAwB,EACxB,kBAAsC,EACtC,qBAA4C,EAC5C,gBAAkC,EAClC,gBAAkC,EAClC,eAAgC,EAChC,uBAAgD,EAChD,YAA0B,EAC1B,qBAA4C,EAC5C,UAAsB;QAXtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gBAAW,GAAX,WAAW,CAAa;QACxB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAiB;QAChC,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,iBAAY,GAAZ,YAAY,CAAc;QAC1B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,eAAU,GAAV,UAAU,CAAY;KAC5B;;;;;;;IA7CJ,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;KACnC;;;;;;;;;;IAWD,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;KAC7C;;;;;IAMD,IAAI,oBAAoB;QACtB,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC;KACtD;;;;IAKD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC;KAC1C;;;;;;IAsBD,iBAAiB;QACf,OAAO,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;KAC1D;;;;;;IAOD,gBAAgB,CAAC,QAAiB;QAChC,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC;QAEpF,OAAO,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;KACpE;;;;;;IAOD,WAAW,CAAC,QAAiB;QAC3B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC;QAEpF,OAAO,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;KACxD;;;;;;;;;;;IAYD,SAAS,CAAC,GAAY,EAAE,QAAiB;QACvC,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KACvD;;;;;;;;;;;;;IAcD,iBAAiB,CAAC,GAAY,EAAE,QAAiB;QAC/C,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC/D;;;;;;;;IASD,eAAe,CAAC,QAAiB;QAC/B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;KACxD;;;;IAKD,wBAAwB,CAAC,QAAiB;QACxC,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;KACjE;;;;;;;;IASD,cAAc,CAAC,QAAiB;QAC9B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;KACvD;;;;;;;;IASD,UAAU,CAAC,QAAiB;QAC1B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACnD;;;;;;;;IASD,eAAe,CAAC,QAAiB;QAC/B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;KACxD;;;;;;;;IASD,uBAAuB,CAAC,QAAiB;QACvC,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;KAChE;;;;;;;;;IAUD,qBAAqB,CAAC,MAAM,GAAG,KAAK,EAAE,QAAiB;QACrD,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAC5F,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEzD,OAAO,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC7E;;;;;;;IAQD,QAAQ,CAAC,KAAa,EAAE,QAAiB;QACvC,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KAC5D;;;;;;;;IASD,QAAQ,CAAC,QAAiB;QACxB,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;KAC5D;;;;;;;IAQD,SAAS,CAAC,QAAiB,EAAE,WAAyB;QACpD,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;KAChD;;;;;;;;;;IAWD,kBAAkB,CAAC,WAAyB,EAAE,YAA2B,EAAE,QAAiB;QAC1F,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;KAC9E;;;;;;;;;IAUD,mBAAmB,CAAC,YAA2D,EAAE,QAAiB;QAChG,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KACnF;;;;;;;;;;;IAYD,qBAAqB,CAAC,QAAiB,EAAE,WAAyB;QAChE,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;KAClF;;;;;;;;IASD,MAAM,CAAC,QAAiB,EAAE,WAAyB;QACjD,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;KACnE;;;;;;;IAQD,WAAW,CAAC,QAAiB;QAC3B,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KAC3D;;;;;IAMD,mBAAmB;QACjB,OAAO,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,EAAE,CAAC;KAC3D;;;;;;;;;;;IAYD,iBAAiB,CAAC,WAAiB,EAAE,QAAiB;QACpD,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;KAC9E;;;;;;;;;;;IAYD,kBAAkB,CAAC,YAAkB,EAAE,QAAiB;QACtD,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAChF;;;;;;;;;IAUD,gBAAgB,CAAC,YAAyD,EAAE,QAAiB;QAC3F,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAC9E;;;;;;;;;IAUD,eAAe,CAAC,YAAyD,EAAE,QAAiB;QAC1F,QAAQ,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAE5F,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAChE;;gHAzXU,mBAAmB;oHAAnB,mBAAmB;2FAAnB,mBAAmB;kBAD/B,UAAU;;;ACyCX;SACgB,kBAAkB,CAAC,YAAiC;IAClE,OAAO,IAAI,qBAAqB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACxD,CAAC;AAED;SACgB,4BAA4B,CAAC,iBAAoC,EAAE,MAAuB;IACxG,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IAC1D,MAAM,EAAE,GAAyC,MAAM,eAAe,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;IAEjI,OAAO,EAAE,CAAC;AACZ,CAAC;MAEY,aAAa,GAAG,IAAI,cAAc,CAAsB,eAAe,EAAE;MAOzE,UAAU;IACrB,OAAO,OAAO,CAAC,YAAiC;QAC9C,OAAO;YACL,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE;;gBAET,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,YAAY,EAAE;;gBAGlD,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,KAAI,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE;;gBAG3G;oBACE,OAAO,EAAE,eAAe;oBACxB,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC,iBAAiB,EAAE,eAAe,EAAE,aAAa,CAAC;oBACzD,UAAU,EAAE,4BAA4B;iBACzC;gBACD,iBAAiB;gBACjB,mBAAmB;gBACnB,UAAU;gBACV,qBAAqB;gBACrB,mBAAmB;gBACnB,sBAAsB;gBACtB,gBAAgB;gBAChB,mBAAmB;gBACnB,gBAAgB;gBAChB,YAAY;gBACZ,kBAAkB;gBAClB,uBAAuB;gBACvB,WAAW;gBACX,aAAa;gBACb,eAAe;gBACf,UAAU;gBACV,gBAAgB;gBAChB,oBAAoB;gBACpB,yBAAyB;gBACzB,kBAAkB;gBAClB,aAAa;gBACb,aAAa;gBACb,eAAe;gBACf,YAAY;gBACZ,UAAU;gBACV,wBAAwB;gBACxB,oBAAoB;gBACpB,WAAW;gBACX,sBAAsB;gBACtB,uBAAuB;gBACvB,gBAAgB;gBAChB,oBAAoB;gBACpB,2BAA2B;gBAC3B,oCAAoC;gBACpC,6BAA6B;gBAC7B,0BAA0B;gBAC1B,qCAAqC;gBACrC,oCAAoC;gBACpC,kCAAkC;gBAClC,8BAA8B;gBAC9B,kCAAkC;gBAClC,eAAe;gBACf,iBAAiB;gBACjB,oBAAoB;gBACpB,gBAAgB;gBAChB,uBAAuB;gBACvB,iBAAiB;gBACjB,2BAA2B;gBAC3B,4BAA4B;gBAC5B,qBAAqB;aACtB;SACF,CAAC;KACH;;uGAtEU,UAAU;wGAAV,UAAU,YAJX,YAAY,EAAE,gBAAgB;wGAI7B,UAAU,YAJZ,CAAC,YAAY,EAAE,gBAAgB,CAAC;2FAI9B,UAAU;kBALtB,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;oBACzC,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,EAAE;iBACZ;;;MCvEY,uBAAuB;IAClC,YACU,gBAAkC,EAClC,gBAAkC,EAClC,YAA0B,EAC1B,qBAA4C;QAH5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,0BAAqB,GAArB,qBAAqB,CAAuB;KAClD;IAEJ,OAAO,CAAC,KAAY,EAAE,QAAsB;QAC1C,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;KACxC;IAED,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAClC;IAED,gBAAgB,CAAC,KAA6B,EAAE,KAA0B;QACxE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAClC;IAEO,SAAS,CAAC,GAAW;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAE9B,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,IAAI,CAC3C,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC,CAAC,EAAE,eAAe,EAAE;YACtB,IAAI,eAAe,EAAE;gBACnB,IAAI,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,QAAQ,CAAC,CAAC;aACpE;YAED,IAAI,CAAC,eAAe,EAAE;gBACpB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;gBACvD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,OAAO,eAAe,CAAC;SACxB,CAAC,CACH,CAAC;KACH;IAEO,KAAK;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC;KACrE;;oHA5CU,uBAAuB;wHAAvB,uBAAuB,cADV,MAAM;2FACnB,uBAAuB;kBADnC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCDrB,2BAA2B;IACtC,YACU,gBAAkC,EAClC,gBAAkC,EAClC,YAA0B,EAC1B,qBAA4C;QAH5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,0BAAqB,GAArB,qBAAqB,CAAuB;KAClD;IAEJ,OAAO,CAAC,KAAY,EAAE,QAAsB;QAC1C,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;KACxC;IAED,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAClC;IAED,gBAAgB,CAAC,KAA6B,EAAE,KAA0B;QACxE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAClC;IAEO,SAAS,CAAC,GAAW;QAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAE9B,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;QAElF,IAAI,eAAe,EAAE;YACnB,IAAI,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,QAAQ,CAAC,CAAC;SACpE;QAED,IAAI,CAAC,eAAe,EAAE;YACpB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SACnC;QAED,OAAO,eAAe,CAAC;KACxB;IAEO,KAAK;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC;KACrE;;wHAzCU,2BAA2B;4HAA3B,2BAA2B,cADd,MAAM;2FACnB,2BAA2B;kBADvC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCErB,eAAe;IAC1B,YACU,gBAAkC,EAClC,qBAA4C,EAC5C,aAA4B,EAC5B,2BAAwD;QAHxD,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAC5B,gCAA2B,GAA3B,2BAA2B,CAA6B;KAC9D;IAEJ,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAChD,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,EAAE;YACrD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC;QAC5E,MAAM,mBAAmB,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;QAC/E,MAAM,uBAAuB,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;QAEzE,IAAI,uBAAuB,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,MAAM,EAAE,QAAQ,EAAE,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+BAA+B,CAAC,CAAC;YAEvE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,2BAA2B,CAAC,kCAAkC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEzH,IAAI,CAAC,gBAAgB,EAAE;YACrB,MAAM,EAAE,QAAQ,EAAE,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,+CAA+C,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;YAEhG,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,GAAG,CAAC,GAAG,+BAA+B,aAAa,GAAG,CAAC,CAAC;QAE1G,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAErE,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,EAAE,0BAA0B,GAAG,CAAC,GAAG,yBAAyB,KAAK,GAAG,CAAC,CAAC;YAElH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,GAAG,CAAC,GAAG,+BAA+B,aAAa,iBAAiB,CAAC,CAAC;QACxH,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;YACd,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,KAAK,CAAC;SAC7D,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACzB;;4GAjDU,eAAe;gHAAf,eAAe;2FAAf,eAAe;kBAD3B,UAAU;;;ACNX;;;MAIsB,uBAAuB;;oHAAvB,uBAAuB;wHAAvB,uBAAuB;2FAAvB,uBAAuB;kBAD5C,UAAU;;;ACLX;;ACAA;;;;ACAA;;;;;;"}